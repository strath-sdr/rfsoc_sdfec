-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\book_example\awgn_channel_src_AWGN_Channel.vhd
-- Created: 2022-11-22 20:34:30
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1.25e-08
-- Target subsystem base rate: 1.25e-08
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1.25e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- m_axis_tvalid                 ce_out        1.25e-08
-- m_axis_tdata                  ce_out        1.25e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: awgn_channel_src_AWGN_Channel
-- Source Path: book_example/AWGN Channel
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.awgn_channel_src_AWGN_Channel_pkg.ALL;

ENTITY awgn_channel_src_AWGN_Channel IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        aximm_noise_std                   :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32_En30
        s_axis_tvalid                     :   IN    std_logic;
        s_axis_tdata                      :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        ce_out                            :   OUT   std_logic;
        m_axis_tvalid                     :   OUT   std_logic;
        m_axis_tdata                      :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
        );
END awgn_channel_src_AWGN_Channel;


ARCHITECTURE rtl OF awgn_channel_src_AWGN_Channel IS

  -- Component Declarations
  COMPONENT awgn_channel_src_AWGN_Generator
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          noise_std                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32_En30
          awgn_imag                       :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En14
          awgn_real                       :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En14
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : awgn_channel_src_AWGN_Generator
    USE ENTITY work.awgn_channel_src_AWGN_Generator(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL delayMatch2_reg                  : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL s_axis_tvalid_1                  : std_logic;
  SIGNAL s_axis_tdata_unsigned            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL s_axis_tdata_1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bit_Slice_out1                   : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Data_Type_Conversion1_out1       : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL delayMatch_reg                   : vector_of_signed4(0 TO 1);  -- sfix4 [2]
  SIGNAL Data_Type_Conversion1_out1_1     : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL aximm_noise_std_unsigned         : unsigned(31 DOWNTO 0);  -- ufix32_En30
  SIGNAL aximm_noise_std_1                : unsigned(31 DOWNTO 0);  -- ufix32_En30
  SIGNAL AWGN_Generator_out1              : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL AWGN_Generator_out2              : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL AWGN_Generator_out2_signed       : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL Bit_Slice1_out1                  : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Data_Type_Conversion_out1        : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL AWGN_Generator_out1_signed       : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL Add_add_cast                     : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL Add_add_cast_1                   : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL Add_add_temp                     : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL Add_out1                         : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL delayMatch1_reg                  : vector_of_signed4(0 TO 1);  -- sfix4 [2]
  SIGNAL Data_Type_Conversion_out1_1      : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL Add1_add_cast                    : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL Add1_add_cast_1                  : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL Add1_add_temp                    : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL Add1_out1                        : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL Bit_Concat_out1                  : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Bit_Concat_out1_1                : unsigned(31 DOWNTO 0);  -- uint32

BEGIN
  u_AWGN_Generator : awgn_channel_src_AWGN_Generator
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              noise_std => std_logic_vector(aximm_noise_std_1),  -- ufix32_En30
              awgn_imag => AWGN_Generator_out1,  -- sfix18_En14
              awgn_real => AWGN_Generator_out2  -- sfix18_En14
              );

  enb <= clk_enable;

  delayMatch2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch2_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch2_reg(0) <= s_axis_tvalid;
        delayMatch2_reg(1 TO 3) <= delayMatch2_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch2_process;

  s_axis_tvalid_1 <= delayMatch2_reg(3);

  s_axis_tdata_unsigned <= unsigned(s_axis_tdata);

  in_2_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      s_axis_tdata_1 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        s_axis_tdata_1 <= s_axis_tdata_unsigned;
      END IF;
    END IF;
  END PROCESS in_2_pipe_process;


  Bit_Slice_out1 <= s_axis_tdata_1(7 DOWNTO 4);

  Data_Type_Conversion1_out1 <= signed(Bit_Slice_out1);

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg <= (OTHERS => to_signed(16#0#, 4));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg(0) <= Data_Type_Conversion1_out1;
        delayMatch_reg(1) <= delayMatch_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  Data_Type_Conversion1_out1_1 <= delayMatch_reg(1);

  aximm_noise_std_unsigned <= unsigned(aximm_noise_std);

  in_0_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      aximm_noise_std_1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        aximm_noise_std_1 <= aximm_noise_std_unsigned;
      END IF;
    END IF;
  END PROCESS in_0_pipe_process;


  AWGN_Generator_out2_signed <= signed(AWGN_Generator_out2);

  Bit_Slice1_out1 <= s_axis_tdata_1(3 DOWNTO 0);

  Data_Type_Conversion_out1 <= signed(Bit_Slice1_out1);

  AWGN_Generator_out1_signed <= signed(AWGN_Generator_out1);

  Add_add_cast <= resize(Data_Type_Conversion1_out1_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32);
  Add_add_cast_1 <= resize(AWGN_Generator_out1_signed, 32);
  Add_add_temp <= Add_add_cast + Add_add_cast_1;
  
  Add_out1 <= X"7FFF" WHEN (Add_add_temp(31) = '0') AND (Add_add_temp(30 DOWNTO 18) /= "0000000000000") ELSE
      X"8000" WHEN (Add_add_temp(31) = '1') AND (Add_add_temp(30 DOWNTO 18) /= "1111111111111") ELSE
      Add_add_temp(18 DOWNTO 3);

  delayMatch1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch1_reg <= (OTHERS => to_signed(16#0#, 4));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch1_reg(0) <= Data_Type_Conversion_out1;
        delayMatch1_reg(1) <= delayMatch1_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  Data_Type_Conversion_out1_1 <= delayMatch1_reg(1);

  Add1_add_cast <= resize(AWGN_Generator_out2_signed, 32);
  Add1_add_cast_1 <= resize(Data_Type_Conversion_out1_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32);
  Add1_add_temp <= Add1_add_cast + Add1_add_cast_1;
  
  Add1_out1 <= X"7FFF" WHEN (Add1_add_temp(31) = '0') AND (Add1_add_temp(30 DOWNTO 18) /= "0000000000000") ELSE
      X"8000" WHEN (Add1_add_temp(31) = '1') AND (Add1_add_temp(30 DOWNTO 18) /= "1111111111111") ELSE
      Add1_add_temp(18 DOWNTO 3);

  Bit_Concat_out1 <= unsigned(Add_out1) & unsigned(Add1_out1);

  out_1_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Bit_Concat_out1_1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Bit_Concat_out1_1 <= Bit_Concat_out1;
      END IF;
    END IF;
  END PROCESS out_1_pipe_process;


  m_axis_tdata <= std_logic_vector(Bit_Concat_out1_1);

  ce_out <= clk_enable;

  m_axis_tvalid <= s_axis_tvalid_1;

END rtl;

