-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\fec_ber_hw\awgn_channel_src_Subsystem3.vhd
-- Created: 2022-10-06 15:11:23
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: awgn_channel_src_Subsystem3
-- Source Path: fec_ber_hw/AWGN Channel/AWGN Generator/Subsystem3
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY awgn_channel_src_Subsystem3 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_4_0                         :   IN    std_logic;
        Reset_1                           :   IN    std_logic;
        LFSR_G                            :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        LFSR_F                            :   OUT   std_logic_vector(11 DOWNTO 0)  -- ufix12
        );
END awgn_channel_src_Subsystem3;


ARCHITECTURE rtl OF awgn_channel_src_Subsystem3 IS

  -- Component Declarations
  COMPONENT awgn_channel_src_PN_Sequence_Generator
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT awgn_channel_src_PN_Sequence_Generator1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT awgn_channel_src_PN_Sequence_Generator2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT awgn_channel_src_PN_Sequence_Generator3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT awgn_channel_src_PN_Sequence_Generator4
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT awgn_channel_src_PN_Sequence_Generator5
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT awgn_channel_src_PN_Sequence_Generator6
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT awgn_channel_src_PN_Sequence_Generator7
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT awgn_channel_src_PN_Sequence_Generator8
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT awgn_channel_src_PN_Sequence_Generator9
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT awgn_channel_src_PN_Sequence_Generator10
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT awgn_channel_src_PN_Sequence_Generator11
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT awgn_channel_src_PN_Sequence_Generator12
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT awgn_channel_src_PN_Sequence_Generator13
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT awgn_channel_src_PN_Sequence_Generator14
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT awgn_channel_src_PN_Sequence_Generator15
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT awgn_channel_src_PN_Sequence_Generator16
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT awgn_channel_src_PN_Sequence_Generator17
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT awgn_channel_src_PN_Sequence_Generator18
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT awgn_channel_src_PN_Sequence_Generator19
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : awgn_channel_src_PN_Sequence_Generator
    USE ENTITY work.awgn_channel_src_PN_Sequence_Generator(rtl);

  FOR ALL : awgn_channel_src_PN_Sequence_Generator1
    USE ENTITY work.awgn_channel_src_PN_Sequence_Generator1(rtl);

  FOR ALL : awgn_channel_src_PN_Sequence_Generator2
    USE ENTITY work.awgn_channel_src_PN_Sequence_Generator2(rtl);

  FOR ALL : awgn_channel_src_PN_Sequence_Generator3
    USE ENTITY work.awgn_channel_src_PN_Sequence_Generator3(rtl);

  FOR ALL : awgn_channel_src_PN_Sequence_Generator4
    USE ENTITY work.awgn_channel_src_PN_Sequence_Generator4(rtl);

  FOR ALL : awgn_channel_src_PN_Sequence_Generator5
    USE ENTITY work.awgn_channel_src_PN_Sequence_Generator5(rtl);

  FOR ALL : awgn_channel_src_PN_Sequence_Generator6
    USE ENTITY work.awgn_channel_src_PN_Sequence_Generator6(rtl);

  FOR ALL : awgn_channel_src_PN_Sequence_Generator7
    USE ENTITY work.awgn_channel_src_PN_Sequence_Generator7(rtl);

  FOR ALL : awgn_channel_src_PN_Sequence_Generator8
    USE ENTITY work.awgn_channel_src_PN_Sequence_Generator8(rtl);

  FOR ALL : awgn_channel_src_PN_Sequence_Generator9
    USE ENTITY work.awgn_channel_src_PN_Sequence_Generator9(rtl);

  FOR ALL : awgn_channel_src_PN_Sequence_Generator10
    USE ENTITY work.awgn_channel_src_PN_Sequence_Generator10(rtl);

  FOR ALL : awgn_channel_src_PN_Sequence_Generator11
    USE ENTITY work.awgn_channel_src_PN_Sequence_Generator11(rtl);

  FOR ALL : awgn_channel_src_PN_Sequence_Generator12
    USE ENTITY work.awgn_channel_src_PN_Sequence_Generator12(rtl);

  FOR ALL : awgn_channel_src_PN_Sequence_Generator13
    USE ENTITY work.awgn_channel_src_PN_Sequence_Generator13(rtl);

  FOR ALL : awgn_channel_src_PN_Sequence_Generator14
    USE ENTITY work.awgn_channel_src_PN_Sequence_Generator14(rtl);

  FOR ALL : awgn_channel_src_PN_Sequence_Generator15
    USE ENTITY work.awgn_channel_src_PN_Sequence_Generator15(rtl);

  FOR ALL : awgn_channel_src_PN_Sequence_Generator16
    USE ENTITY work.awgn_channel_src_PN_Sequence_Generator16(rtl);

  FOR ALL : awgn_channel_src_PN_Sequence_Generator17
    USE ENTITY work.awgn_channel_src_PN_Sequence_Generator17(rtl);

  FOR ALL : awgn_channel_src_PN_Sequence_Generator18
    USE ENTITY work.awgn_channel_src_PN_Sequence_Generator18(rtl);

  FOR ALL : awgn_channel_src_PN_Sequence_Generator19
    USE ENTITY work.awgn_channel_src_PN_Sequence_Generator19(rtl);

  -- Signals
  SIGNAL PN_Sequence_Generator_out1       : std_logic;
  SIGNAL PN_Sequence_Generator1_out1      : std_logic;
  SIGNAL PN_Sequence_Generator2_out1      : std_logic;
  SIGNAL PN_Sequence_Generator3_out1      : std_logic;
  SIGNAL PN_Sequence_Generator4_out1      : std_logic;
  SIGNAL PN_Sequence_Generator5_out1      : std_logic;
  SIGNAL PN_Sequence_Generator6_out1      : std_logic;
  SIGNAL PN_Sequence_Generator7_out1      : std_logic;
  SIGNAL Bit_Concat_out1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL PN_Sequence_Generator8_out1      : std_logic;
  SIGNAL PN_Sequence_Generator9_out1      : std_logic;
  SIGNAL PN_Sequence_Generator10_out1     : std_logic;
  SIGNAL PN_Sequence_Generator11_out1     : std_logic;
  SIGNAL PN_Sequence_Generator12_out1     : std_logic;
  SIGNAL PN_Sequence_Generator13_out1     : std_logic;
  SIGNAL PN_Sequence_Generator14_out1     : std_logic;
  SIGNAL PN_Sequence_Generator15_out1     : std_logic;
  SIGNAL PN_Sequence_Generator16_out1     : std_logic;
  SIGNAL PN_Sequence_Generator17_out1     : std_logic;
  SIGNAL PN_Sequence_Generator18_out1     : std_logic;
  SIGNAL PN_Sequence_Generator19_out1     : std_logic;
  SIGNAL Bit_Concat1_out1                 : unsigned(11 DOWNTO 0);  -- ufix12

BEGIN
  -- here

  u_PN_Sequence_Generator : awgn_channel_src_PN_Sequence_Generator
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0,
              inportReset => Reset_1,
              PN_Sequence => PN_Sequence_Generator_out1
              );

  u_PN_Sequence_Generator1 : awgn_channel_src_PN_Sequence_Generator1
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0,
              inportReset => Reset_1,
              PN_Sequence => PN_Sequence_Generator1_out1
              );

  u_PN_Sequence_Generator2 : awgn_channel_src_PN_Sequence_Generator2
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0,
              inportReset => Reset_1,
              PN_Sequence => PN_Sequence_Generator2_out1
              );

  u_PN_Sequence_Generator3 : awgn_channel_src_PN_Sequence_Generator3
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0,
              inportReset => Reset_1,
              PN_Sequence => PN_Sequence_Generator3_out1
              );

  u_PN_Sequence_Generator4 : awgn_channel_src_PN_Sequence_Generator4
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0,
              inportReset => Reset_1,
              PN_Sequence => PN_Sequence_Generator4_out1
              );

  u_PN_Sequence_Generator5 : awgn_channel_src_PN_Sequence_Generator5
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0,
              inportReset => Reset_1,
              PN_Sequence => PN_Sequence_Generator5_out1
              );

  u_PN_Sequence_Generator6 : awgn_channel_src_PN_Sequence_Generator6
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0,
              inportReset => Reset_1,
              PN_Sequence => PN_Sequence_Generator6_out1
              );

  u_PN_Sequence_Generator7 : awgn_channel_src_PN_Sequence_Generator7
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0,
              inportReset => Reset_1,
              PN_Sequence => PN_Sequence_Generator7_out1
              );

  u_PN_Sequence_Generator8 : awgn_channel_src_PN_Sequence_Generator8
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0,
              inportReset => Reset_1,
              PN_Sequence => PN_Sequence_Generator8_out1
              );

  u_PN_Sequence_Generator9 : awgn_channel_src_PN_Sequence_Generator9
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0,
              inportReset => Reset_1,
              PN_Sequence => PN_Sequence_Generator9_out1
              );

  u_PN_Sequence_Generator10 : awgn_channel_src_PN_Sequence_Generator10
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0,
              inportReset => Reset_1,
              PN_Sequence => PN_Sequence_Generator10_out1
              );

  u_PN_Sequence_Generator11 : awgn_channel_src_PN_Sequence_Generator11
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0,
              inportReset => Reset_1,
              PN_Sequence => PN_Sequence_Generator11_out1
              );

  u_PN_Sequence_Generator12 : awgn_channel_src_PN_Sequence_Generator12
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0,
              inportReset => Reset_1,
              PN_Sequence => PN_Sequence_Generator12_out1
              );

  u_PN_Sequence_Generator13 : awgn_channel_src_PN_Sequence_Generator13
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0,
              inportReset => Reset_1,
              PN_Sequence => PN_Sequence_Generator13_out1
              );

  u_PN_Sequence_Generator14 : awgn_channel_src_PN_Sequence_Generator14
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0,
              inportReset => Reset_1,
              PN_Sequence => PN_Sequence_Generator14_out1
              );

  u_PN_Sequence_Generator15 : awgn_channel_src_PN_Sequence_Generator15
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0,
              inportReset => Reset_1,
              PN_Sequence => PN_Sequence_Generator15_out1
              );

  u_PN_Sequence_Generator16 : awgn_channel_src_PN_Sequence_Generator16
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0,
              inportReset => Reset_1,
              PN_Sequence => PN_Sequence_Generator16_out1
              );

  u_PN_Sequence_Generator17 : awgn_channel_src_PN_Sequence_Generator17
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0,
              inportReset => Reset_1,
              PN_Sequence => PN_Sequence_Generator17_out1
              );

  u_PN_Sequence_Generator18 : awgn_channel_src_PN_Sequence_Generator18
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0,
              inportReset => Reset_1,
              PN_Sequence => PN_Sequence_Generator18_out1
              );

  u_PN_Sequence_Generator19 : awgn_channel_src_PN_Sequence_Generator19
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0,
              inportReset => Reset_1,
              PN_Sequence => PN_Sequence_Generator19_out1
              );

  Bit_Concat_out1 <= unsigned'(PN_Sequence_Generator_out1 & PN_Sequence_Generator1_out1 & PN_Sequence_Generator2_out1 & PN_Sequence_Generator3_out1 & PN_Sequence_Generator4_out1 & PN_Sequence_Generator5_out1 & PN_Sequence_Generator6_out1 & PN_Sequence_Generator7_out1);

  LFSR_G <= std_logic_vector(Bit_Concat_out1);

  Bit_Concat1_out1 <= unsigned'(PN_Sequence_Generator8_out1 & PN_Sequence_Generator9_out1 & PN_Sequence_Generator10_out1 & PN_Sequence_Generator11_out1 & PN_Sequence_Generator12_out1 & PN_Sequence_Generator13_out1 & PN_Sequence_Generator14_out1 & PN_Sequence_Generator15_out1 & PN_Sequence_Generator16_out1 & PN_Sequence_Generator17_out1 & PN_Sequence_Generator18_out1 & PN_Sequence_Generator19_out1);

  LFSR_F <= std_logic_vector(Bit_Concat1_out1);

END rtl;

