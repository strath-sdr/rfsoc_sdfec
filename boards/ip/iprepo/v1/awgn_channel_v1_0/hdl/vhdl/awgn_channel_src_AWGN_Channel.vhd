-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\fec_ber_hw\awgn_channel_src_AWGN_Channel.vhd
-- Created: 2022-10-06 15:11:23
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 3.125e-09
-- Target subsystem base rate: 3.125e-09
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        3.125e-09
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- m_axis_tvalid                 ce_out        3.125e-09
-- m_axis_tdata                  ce_out        3.125e-09
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: awgn_channel_src_AWGN_Channel
-- Source Path: fec_ber_hw/AWGN Channel
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.awgn_channel_src_AWGN_Channel_pkg.ALL;

ENTITY awgn_channel_src_AWGN_Channel IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        aximm_noise_std                   :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32_En30
        aximm_awgn_reset                  :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        s_axis_tvalid                     :   IN    std_logic;
        s_axis_tdata                      :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        ce_out                            :   OUT   std_logic;
        m_axis_tvalid                     :   OUT   std_logic;
        m_axis_tdata                      :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
        );
END awgn_channel_src_AWGN_Channel;


ARCHITECTURE rtl OF awgn_channel_src_AWGN_Channel IS

  -- Component Declarations
  COMPONENT awgn_channel_src_AWGN_Channel_tc
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_1_1                       :   OUT   std_logic;
          enb_1_4_0                       :   OUT   std_logic;
          enb_1_4_1                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT awgn_channel_src_sample_and_hold_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          valid_in                        :   IN    std_logic;
          data_in                         :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          alphavalid_out                  :   OUT   std_logic;
          alphadata_out                   :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  COMPONENT awgn_channel_src_AWGN_Generator
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          noise_std                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32_En30
          reset_1                         :   IN    std_logic;
          awgn_re                         :   OUT   std_logic_vector(14 DOWNTO 0);  -- sfix15_En11
          awgn_im                         :   OUT   std_logic_vector(14 DOWNTO 0)  -- sfix15_En11
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : awgn_channel_src_AWGN_Channel_tc
    USE ENTITY work.awgn_channel_src_AWGN_Channel_tc(rtl);

  FOR ALL : awgn_channel_src_sample_and_hold_block
    USE ENTITY work.awgn_channel_src_sample_and_hold_block(rtl);

  FOR ALL : awgn_channel_src_AWGN_Generator
    USE ENTITY work.awgn_channel_src_AWGN_Generator(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL enb_1_4_0                        : std_logic;
  SIGNAL enb_1_4_1                        : std_logic;
  SIGNAL enb_1_1_1                        : std_logic;
  SIGNAL sample_and_hold_out1             : std_logic;
  SIGNAL sample_and_hold_out2             : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Downsample1_out1                 : std_logic;
  SIGNAL Delay_reg                        : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL Delay3_reg                       : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL Repeat_out1                      : std_logic;
  SIGNAL sample_and_hold_out2_unsigned    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Downsample_out1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay1_reg                       : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL Delay1_out1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bit_Slice1_out1                  : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Data_Type_Conversion_out1        : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL Bit_Slice_out1                   : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Data_Type_Conversion1_out1       : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL aximm_noise_std_unsigned         : unsigned(31 DOWNTO 0);  -- ufix32_En30
  SIGNAL Downsample2_out1                 : unsigned(31 DOWNTO 0);  -- ufix32_En30
  SIGNAL Delay2_reg                       : vector_of_unsigned32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay2_out1                      : unsigned(31 DOWNTO 0);  -- ufix32_En30
  SIGNAL aximm_awgn_reset_unsigned        : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Cast_To_Boolean_out1             : std_logic;
  SIGNAL Downsample3_out1                 : std_logic;
  SIGNAL Delay5_reg                       : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay5_out1                      : std_logic;
  SIGNAL AWGN_Generator_out1_re           : std_logic_vector(14 DOWNTO 0);  -- ufix15
  SIGNAL AWGN_Generator_out1_im           : std_logic_vector(14 DOWNTO 0);  -- ufix15
  SIGNAL AWGN_Generator_out1_re_signed    : signed(14 DOWNTO 0);  -- sfix15_En11
  SIGNAL AWGN_Generator_out1_im_signed    : signed(14 DOWNTO 0);  -- sfix15_En11
  SIGNAL Add_add_cast                     : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL Add_add_cast_1                   : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL Add_add_cast_2                   : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL Add_add_cast_3                   : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL Add_out1_re                      : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL Add_out1_im                      : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL Bit_Concat_out1                  : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay4_reg                       : vector_of_unsigned32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay4_out1                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Repeat1_out1                     : unsigned(31 DOWNTO 0);  -- uint32

BEGIN
  u_AWGN_Channel_tc : awgn_channel_src_AWGN_Channel_tc
    PORT MAP( clk => clk,
              reset => reset,
              clk_enable => clk_enable,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              enb_1_4_0 => enb_1_4_0,
              enb_1_4_1 => enb_1_4_1
              );

  u_sample_and_hold : awgn_channel_src_sample_and_hold_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              valid_in => s_axis_tvalid,
              data_in => s_axis_tdata,  -- uint8
              alphavalid_out => sample_and_hold_out1,
              alphadata_out => sample_and_hold_out2  -- uint8
              );

  u_AWGN_Generator : awgn_channel_src_AWGN_Generator
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0,
              noise_std => std_logic_vector(Delay2_out1),  -- ufix32_En30
              reset_1 => Delay5_out1,
              awgn_re => AWGN_Generator_out1_re,  -- sfix15_En11
              awgn_im => AWGN_Generator_out1_im  -- sfix15_En11
              );

  -- Downsample by 4 register (Sample offset 0)
  Downsample1_output_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Downsample1_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_1 = '1' THEN
        Downsample1_out1 <= sample_and_hold_out1;
      END IF;
    END IF;
  END PROCESS Downsample1_output_process;


  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        Delay_reg(0) <= Downsample1_out1;
        Delay_reg(1) <= Delay_reg(0);
      END IF;
    END IF;
  END PROCESS Delay_process;

  Delay_out1 <= Delay_reg(1);

  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        Delay3_reg(0) <= Delay_out1;
        Delay3_reg(1) <= Delay3_reg(0);
      END IF;
    END IF;
  END PROCESS Delay3_process;

  Delay3_out1 <= Delay3_reg(1);

  Repeat_out1 <= Delay3_out1;

  sample_and_hold_out2_unsigned <= unsigned(sample_and_hold_out2);

  -- Downsample by 4 register (Sample offset 0)
  Downsample_output_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Downsample_out1 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_1 = '1' THEN
        Downsample_out1 <= sample_and_hold_out2_unsigned;
      END IF;
    END IF;
  END PROCESS Downsample_output_process;


  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        Delay1_reg(0) <= Downsample_out1;
        Delay1_reg(1) <= Delay1_reg(0);
      END IF;
    END IF;
  END PROCESS Delay1_process;

  Delay1_out1 <= Delay1_reg(1);

  Bit_Slice1_out1 <= Delay1_out1(7 DOWNTO 4);

  Data_Type_Conversion_out1 <= signed(Bit_Slice1_out1);

  Bit_Slice_out1 <= Delay1_out1(3 DOWNTO 0);

  Data_Type_Conversion1_out1 <= signed(Bit_Slice_out1);

  aximm_noise_std_unsigned <= unsigned(aximm_noise_std);

  -- Downsample by 4 register (Sample offset 0)
  Downsample2_output_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Downsample2_out1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_1 = '1' THEN
        Downsample2_out1 <= aximm_noise_std_unsigned;
      END IF;
    END IF;
  END PROCESS Downsample2_output_process;


  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_reg <= (OTHERS => to_unsigned(0, 32));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        Delay2_reg(0) <= Downsample2_out1;
        Delay2_reg(1) <= Delay2_reg(0);
      END IF;
    END IF;
  END PROCESS Delay2_process;

  Delay2_out1 <= Delay2_reg(1);

  aximm_awgn_reset_unsigned <= unsigned(aximm_awgn_reset);

  
  Cast_To_Boolean_out1 <= '1' WHEN aximm_awgn_reset_unsigned /= to_unsigned(0, 32) ELSE
      '0';

  -- Downsample by 4 register (Sample offset 0)
  Downsample3_output_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Downsample3_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_1 = '1' THEN
        Downsample3_out1 <= Cast_To_Boolean_out1;
      END IF;
    END IF;
  END PROCESS Downsample3_output_process;


  Delay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        Delay5_reg(0) <= Downsample3_out1;
        Delay5_reg(1) <= Delay5_reg(0);
      END IF;
    END IF;
  END PROCESS Delay5_process;

  Delay5_out1 <= Delay5_reg(1);

  AWGN_Generator_out1_re_signed <= signed(AWGN_Generator_out1_re);

  AWGN_Generator_out1_im_signed <= signed(AWGN_Generator_out1_im);

  Add_add_cast <= resize(Data_Type_Conversion_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 16);
  Add_add_cast_1 <= resize(AWGN_Generator_out1_re_signed, 16);
  Add_out1_re <= Add_add_cast + Add_add_cast_1;
  Add_add_cast_2 <= resize(Data_Type_Conversion1_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 16);
  Add_add_cast_3 <= resize(AWGN_Generator_out1_im_signed, 16);
  Add_out1_im <= Add_add_cast_2 + Add_add_cast_3;

  Bit_Concat_out1 <= unsigned(Add_out1_re) & unsigned(Add_out1_im);

  Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_reg <= (OTHERS => to_unsigned(0, 32));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        Delay4_reg(0) <= Bit_Concat_out1;
        Delay4_reg(1) <= Delay4_reg(0);
      END IF;
    END IF;
  END PROCESS Delay4_process;

  Delay4_out1 <= Delay4_reg(1);

  Repeat1_out1 <= Delay4_out1;

  m_axis_tdata <= std_logic_vector(Repeat1_out1);

  ce_out <= enb_1_1_1;

  m_axis_tvalid <= Repeat_out1;

END rtl;

