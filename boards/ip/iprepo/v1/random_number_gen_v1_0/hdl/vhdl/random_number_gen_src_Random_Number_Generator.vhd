-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\fec_ber_hw\random_number_gen_src_Random_Number_Generator.vhd
-- Created: 2022-10-06 14:58:23
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 3.125e-09
-- Target subsystem base rate: 3.125e-09
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        3.125e-09
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- m00_axis_tvalid               ce_out        3.125e-09
-- m00_axis_tdata                ce_out        3.125e-09
-- m01_axis_tvalid               ce_out        3.125e-09
-- m01_axis_tdata                ce_out        3.125e-09
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: random_number_gen_src_Random_Number_Generator
-- Source Path: fec_ber_hw/Random Number Generator
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.random_number_gen_src_Random_Number_Generator_pkg.ALL;

ENTITY random_number_gen_src_Random_Number_Generator IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        aximm_enable                      :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        aximm_comparator                  :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        ce_out                            :   OUT   std_logic;
        m00_axis_tvalid                   :   OUT   std_logic;
        m00_axis_tdata                    :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        m01_axis_tvalid                   :   OUT   std_logic;
        m01_axis_tdata                    :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
        );
END random_number_gen_src_Random_Number_Generator;


ARCHITECTURE rtl OF random_number_gen_src_Random_Number_Generator IS

  -- Component Declarations
  COMPONENT random_number_gen_src_Random_Number_Generator_tc
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb_1_1_1                       :   OUT   std_logic;
          enb_1_16_0                      :   OUT   std_logic;
          enb_1_16_1                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT random_number_gen_src_tvalid_hold
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_16_0                      :   IN    std_logic;
          trigger                         :   IN    std_logic;
          comparator                      :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          enable                          :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT random_number_gen_src_PN_Sequence_Generator
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_16_0                      :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT random_number_gen_src_PN_Sequence_Generator1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_16_0                      :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT random_number_gen_src_PN_Sequence_Generator2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_16_0                      :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT random_number_gen_src_PN_Sequence_Generator3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_16_0                      :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT random_number_gen_src_PN_Sequence_Generator4
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_16_0                      :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT random_number_gen_src_PN_Sequence_Generator5
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_16_0                      :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT random_number_gen_src_PN_Sequence_Generator6
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_16_0                      :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT random_number_gen_src_PN_Sequence_Generator7
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_16_0                      :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : random_number_gen_src_Random_Number_Generator_tc
    USE ENTITY work.random_number_gen_src_Random_Number_Generator_tc(rtl);

  FOR ALL : random_number_gen_src_tvalid_hold
    USE ENTITY work.random_number_gen_src_tvalid_hold(rtl);

  FOR ALL : random_number_gen_src_PN_Sequence_Generator
    USE ENTITY work.random_number_gen_src_PN_Sequence_Generator(rtl);

  FOR ALL : random_number_gen_src_PN_Sequence_Generator1
    USE ENTITY work.random_number_gen_src_PN_Sequence_Generator1(rtl);

  FOR ALL : random_number_gen_src_PN_Sequence_Generator2
    USE ENTITY work.random_number_gen_src_PN_Sequence_Generator2(rtl);

  FOR ALL : random_number_gen_src_PN_Sequence_Generator3
    USE ENTITY work.random_number_gen_src_PN_Sequence_Generator3(rtl);

  FOR ALL : random_number_gen_src_PN_Sequence_Generator4
    USE ENTITY work.random_number_gen_src_PN_Sequence_Generator4(rtl);

  FOR ALL : random_number_gen_src_PN_Sequence_Generator5
    USE ENTITY work.random_number_gen_src_PN_Sequence_Generator5(rtl);

  FOR ALL : random_number_gen_src_PN_Sequence_Generator6
    USE ENTITY work.random_number_gen_src_PN_Sequence_Generator6(rtl);

  FOR ALL : random_number_gen_src_PN_Sequence_Generator7
    USE ENTITY work.random_number_gen_src_PN_Sequence_Generator7(rtl);

  -- Signals
  SIGNAL enb_1_16_0                       : std_logic;
  SIGNAL enb_1_16_1                       : std_logic;
  SIGNAL enb_1_1_1                        : std_logic;
  SIGNAL aximm_enable_unsigned            : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Downsample1_out1                 : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay_reg                        : vector_of_unsigned32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay_out1                       : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Data_Type_Conversion_out1        : std_logic;
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL aximm_comparator_unsigned        : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Downsample2_out1                 : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Logical_Operator1_out1           : std_logic;
  SIGNAL Delay3_reg                       : vector_of_unsigned32(0 TO 1);  -- ufix32 [2]
  SIGNAL Delay3_out1                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL tvalid_hold_out1                 : std_logic;
  SIGNAL Delay1_reg                       : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Upsample_zero                    : std_logic;
  SIGNAL Upsample_muxout                  : std_logic;
  SIGNAL Upsample_bypass_reg              : std_logic;  -- ufix1
  SIGNAL Upsample_bypassout               : std_logic;
  SIGNAL Constant_out1                    : std_logic;
  SIGNAL PN_Sequence_Generator_out1       : std_logic;
  SIGNAL PN_Sequence_Generator1_out1      : std_logic;
  SIGNAL PN_Sequence_Generator2_out1      : std_logic;
  SIGNAL PN_Sequence_Generator3_out1      : std_logic;
  SIGNAL PN_Sequence_Generator4_out1      : std_logic;
  SIGNAL PN_Sequence_Generator5_out1      : std_logic;
  SIGNAL PN_Sequence_Generator6_out1      : std_logic;
  SIGNAL PN_Sequence_Generator7_out1      : std_logic;
  SIGNAL Bit_Concat_out1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay2_reg                       : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL Delay2_out1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Upsample1_zero                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Upsample1_muxout                 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Upsample1_bypass_reg             : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Upsample1_bypassout              : unsigned(7 DOWNTO 0);  -- uint8

BEGIN
  u_Random_Number_Generator_tc : random_number_gen_src_Random_Number_Generator_tc
    PORT MAP( clk => clk,
              reset => reset,
              clk_enable => clk_enable,
              enb_1_1_1 => enb_1_1_1,
              enb_1_16_0 => enb_1_16_0,
              enb_1_16_1 => enb_1_16_1
              );

  u_tvalid_hold : random_number_gen_src_tvalid_hold
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_16_0 => enb_1_16_0,
              trigger => Logical_Operator1_out1,
              comparator => std_logic_vector(Delay3_out1),  -- uint32
              enable => tvalid_hold_out1
              );

  u_PN_Sequence_Generator : random_number_gen_src_PN_Sequence_Generator
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_16_0 => enb_1_16_0,
              inportReset => Constant_out1,
              PN_Sequence => PN_Sequence_Generator_out1
              );

  u_PN_Sequence_Generator1 : random_number_gen_src_PN_Sequence_Generator1
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_16_0 => enb_1_16_0,
              inportReset => Constant_out1,
              PN_Sequence => PN_Sequence_Generator1_out1
              );

  u_PN_Sequence_Generator2 : random_number_gen_src_PN_Sequence_Generator2
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_16_0 => enb_1_16_0,
              inportReset => Constant_out1,
              PN_Sequence => PN_Sequence_Generator2_out1
              );

  u_PN_Sequence_Generator3 : random_number_gen_src_PN_Sequence_Generator3
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_16_0 => enb_1_16_0,
              inportReset => Constant_out1,
              PN_Sequence => PN_Sequence_Generator3_out1
              );

  u_PN_Sequence_Generator4 : random_number_gen_src_PN_Sequence_Generator4
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_16_0 => enb_1_16_0,
              inportReset => Constant_out1,
              PN_Sequence => PN_Sequence_Generator4_out1
              );

  u_PN_Sequence_Generator5 : random_number_gen_src_PN_Sequence_Generator5
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_16_0 => enb_1_16_0,
              inportReset => Constant_out1,
              PN_Sequence => PN_Sequence_Generator5_out1
              );

  u_PN_Sequence_Generator6 : random_number_gen_src_PN_Sequence_Generator6
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_16_0 => enb_1_16_0,
              inportReset => Constant_out1,
              PN_Sequence => PN_Sequence_Generator6_out1
              );

  u_PN_Sequence_Generator7 : random_number_gen_src_PN_Sequence_Generator7
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_16_0 => enb_1_16_0,
              inportReset => Constant_out1,
              PN_Sequence => PN_Sequence_Generator7_out1
              );

  aximm_enable_unsigned <= unsigned(aximm_enable);

  -- Downsample by 16 register (Sample offset 0)
  Downsample1_output_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Downsample1_out1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_1 = '1' THEN
        Downsample1_out1 <= aximm_enable_unsigned;
      END IF;
    END IF;
  END PROCESS Downsample1_output_process;


  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_reg <= (OTHERS => to_unsigned(0, 32));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay_reg(0) <= Downsample1_out1;
        Delay_reg(1) <= Delay_reg(0);
      END IF;
    END IF;
  END PROCESS Delay_process;

  Delay_out1 <= Delay_reg(1);

  
  Data_Type_Conversion_out1 <= '1' WHEN Delay_out1 /= to_unsigned(0, 32) ELSE
      '0';

  Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_out1 <= '1';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay4_out1 <= Data_Type_Conversion_out1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Logical_Operator_out1 <=  NOT Delay4_out1;

  aximm_comparator_unsigned <= unsigned(aximm_comparator);

  -- Downsample by 16 register (Sample offset 0)
  Downsample2_output_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Downsample2_out1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_1 = '1' THEN
        Downsample2_out1 <= aximm_comparator_unsigned;
      END IF;
    END IF;
  END PROCESS Downsample2_output_process;


  Logical_Operator1_out1 <= Data_Type_Conversion_out1 AND Logical_Operator_out1;

  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_reg <= (OTHERS => to_unsigned(0, 32));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay3_reg(0) <= Downsample2_out1;
        Delay3_reg(1) <= Delay3_reg(0);
      END IF;
    END IF;
  END PROCESS Delay3_process;

  Delay3_out1 <= Delay3_reg(1);

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay1_reg(0) <= tvalid_hold_out1;
        Delay1_reg(1) <= Delay1_reg(0);
      END IF;
    END IF;
  END PROCESS Delay1_process;

  Delay1_out1 <= Delay1_reg(1);

  -- Upsample: Upsample by 16, Sample offset 0 
  Upsample_zero <= '0';

  
  Upsample_muxout <= Delay1_out1 WHEN enb_1_16_1 = '1' ELSE
      Upsample_zero;

  -- Upsample bypass register
  Upsample_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Upsample_bypass_reg <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_1_1 = '1' THEN
        Upsample_bypass_reg <= Upsample_muxout;
      END IF;
    END IF;
  END PROCESS Upsample_bypass_process;

  
  Upsample_bypassout <= Upsample_muxout WHEN enb_1_1_1 = '1' ELSE
      Upsample_bypass_reg;

  Constant_out1 <= '0';

  Bit_Concat_out1 <= unsigned'(PN_Sequence_Generator_out1 & PN_Sequence_Generator1_out1 & PN_Sequence_Generator2_out1 & PN_Sequence_Generator3_out1 & PN_Sequence_Generator4_out1 & PN_Sequence_Generator5_out1 & PN_Sequence_Generator6_out1 & PN_Sequence_Generator7_out1);

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay2_reg(0) <= Bit_Concat_out1;
        Delay2_reg(1) <= Delay2_reg(0);
      END IF;
    END IF;
  END PROCESS Delay2_process;

  Delay2_out1 <= Delay2_reg(1);

  -- Upsample1: Upsample by 16, Sample offset 0 
  Upsample1_zero <= to_unsigned(16#00#, 8);

  
  Upsample1_muxout <= Delay2_out1 WHEN enb_1_16_1 = '1' ELSE
      Upsample1_zero;

  -- Upsample bypass register
  Upsample1_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Upsample1_bypass_reg <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_1_1 = '1' THEN
        Upsample1_bypass_reg <= Upsample1_muxout;
      END IF;
    END IF;
  END PROCESS Upsample1_bypass_process;

  
  Upsample1_bypassout <= Upsample1_muxout WHEN enb_1_1_1 = '1' ELSE
      Upsample1_bypass_reg;

  m00_axis_tdata <= std_logic_vector(Upsample1_bypassout);

  m01_axis_tdata <= std_logic_vector(Upsample1_bypassout);

  ce_out <= enb_1_1_1;

  m00_axis_tvalid <= Upsample_bypassout;

  m01_axis_tvalid <= Upsample_bypassout;

END rtl;

