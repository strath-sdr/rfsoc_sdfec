-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\fec_ber_hw\soft_demodulation_src_Subsystem6.vhd
-- Created: 2022-10-06 15:14:46
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: soft_demodulation_src_Subsystem6
-- Source Path: fec_ber_hw/Soft Demodulation/Soft Demodulation/Subsystem6
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY soft_demodulation_src_Subsystem6 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        a                                 :   IN    std_logic_vector(34 DOWNTO 0);  -- sfix35_En22
        b                                 :   IN    std_logic_vector(34 DOWNTO 0);  -- sfix35_En22
        a1                                :   IN    std_logic_vector(34 DOWNTO 0);  -- sfix35_En22
        b1                                :   IN    std_logic_vector(34 DOWNTO 0);  -- sfix35_En22
        a2                                :   IN    std_logic_vector(34 DOWNTO 0);  -- sfix35_En22
        b2                                :   IN    std_logic_vector(34 DOWNTO 0);  -- sfix35_En22
        a3                                :   IN    std_logic_vector(34 DOWNTO 0);  -- sfix35_En22
        b3                                :   IN    std_logic_vector(34 DOWNTO 0);  -- sfix35_En22
        min                               :   OUT   std_logic_vector(34 DOWNTO 0)  -- sfix35_En22
        );
END soft_demodulation_src_Subsystem6;


ARCHITECTURE rtl OF soft_demodulation_src_Subsystem6 IS

  -- Component Declarations
  COMPONENT soft_demodulation_src_get_min1_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          a                               :   IN    std_logic_vector(34 DOWNTO 0);  -- sfix35_En22
          b                               :   IN    std_logic_vector(34 DOWNTO 0);  -- sfix35_En22
          min                             :   OUT   std_logic_vector(34 DOWNTO 0)  -- sfix35_En22
          );
  END COMPONENT;

  COMPONENT soft_demodulation_src_get_min2_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          a                               :   IN    std_logic_vector(34 DOWNTO 0);  -- sfix35_En22
          b                               :   IN    std_logic_vector(34 DOWNTO 0);  -- sfix35_En22
          min                             :   OUT   std_logic_vector(34 DOWNTO 0)  -- sfix35_En22
          );
  END COMPONENT;

  COMPONENT soft_demodulation_src_get_min5_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          a                               :   IN    std_logic_vector(34 DOWNTO 0);  -- sfix35_En22
          b                               :   IN    std_logic_vector(34 DOWNTO 0);  -- sfix35_En22
          min                             :   OUT   std_logic_vector(34 DOWNTO 0)  -- sfix35_En22
          );
  END COMPONENT;

  COMPONENT soft_demodulation_src_get_min3_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          a                               :   IN    std_logic_vector(34 DOWNTO 0);  -- sfix35_En22
          b                               :   IN    std_logic_vector(34 DOWNTO 0);  -- sfix35_En22
          min                             :   OUT   std_logic_vector(34 DOWNTO 0)  -- sfix35_En22
          );
  END COMPONENT;

  COMPONENT soft_demodulation_src_get_min4_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          a                               :   IN    std_logic_vector(34 DOWNTO 0);  -- sfix35_En22
          b                               :   IN    std_logic_vector(34 DOWNTO 0);  -- sfix35_En22
          min                             :   OUT   std_logic_vector(34 DOWNTO 0)  -- sfix35_En22
          );
  END COMPONENT;

  COMPONENT soft_demodulation_src_get_min6_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          a                               :   IN    std_logic_vector(34 DOWNTO 0);  -- sfix35_En22
          b                               :   IN    std_logic_vector(34 DOWNTO 0);  -- sfix35_En22
          min                             :   OUT   std_logic_vector(34 DOWNTO 0)  -- sfix35_En22
          );
  END COMPONENT;

  COMPONENT soft_demodulation_src_get_min7_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          a                               :   IN    std_logic_vector(34 DOWNTO 0);  -- sfix35_En22
          b                               :   IN    std_logic_vector(34 DOWNTO 0);  -- sfix35_En22
          min                             :   OUT   std_logic_vector(34 DOWNTO 0)  -- sfix35_En22
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : soft_demodulation_src_get_min1_block
    USE ENTITY work.soft_demodulation_src_get_min1_block(rtl);

  FOR ALL : soft_demodulation_src_get_min2_block
    USE ENTITY work.soft_demodulation_src_get_min2_block(rtl);

  FOR ALL : soft_demodulation_src_get_min5_block
    USE ENTITY work.soft_demodulation_src_get_min5_block(rtl);

  FOR ALL : soft_demodulation_src_get_min3_block
    USE ENTITY work.soft_demodulation_src_get_min3_block(rtl);

  FOR ALL : soft_demodulation_src_get_min4_block
    USE ENTITY work.soft_demodulation_src_get_min4_block(rtl);

  FOR ALL : soft_demodulation_src_get_min6_block
    USE ENTITY work.soft_demodulation_src_get_min6_block(rtl);

  FOR ALL : soft_demodulation_src_get_min7_block
    USE ENTITY work.soft_demodulation_src_get_min7_block(rtl);

  -- Signals
  SIGNAL a_signed                         : signed(34 DOWNTO 0);  -- sfix35_En22
  SIGNAL b_signed                         : signed(34 DOWNTO 0);  -- sfix35_En22
  SIGNAL a_1                              : signed(34 DOWNTO 0);  -- sfix35_En22
  SIGNAL b_1                              : signed(34 DOWNTO 0);  -- sfix35_En22
  SIGNAL get_min1_out1                    : std_logic_vector(34 DOWNTO 0);  -- ufix35
  SIGNAL a1_signed                        : signed(34 DOWNTO 0);  -- sfix35_En22
  SIGNAL b1_signed                        : signed(34 DOWNTO 0);  -- sfix35_En22
  SIGNAL a1_1                             : signed(34 DOWNTO 0);  -- sfix35_En22
  SIGNAL b1_1                             : signed(34 DOWNTO 0);  -- sfix35_En22
  SIGNAL get_min2_out1                    : std_logic_vector(34 DOWNTO 0);  -- ufix35
  SIGNAL get_min5_out1                    : std_logic_vector(34 DOWNTO 0);  -- ufix35
  SIGNAL a2_signed                        : signed(34 DOWNTO 0);  -- sfix35_En22
  SIGNAL b2_signed                        : signed(34 DOWNTO 0);  -- sfix35_En22
  SIGNAL a2_1                             : signed(34 DOWNTO 0);  -- sfix35_En22
  SIGNAL b2_1                             : signed(34 DOWNTO 0);  -- sfix35_En22
  SIGNAL get_min3_out1                    : std_logic_vector(34 DOWNTO 0);  -- ufix35
  SIGNAL a3_signed                        : signed(34 DOWNTO 0);  -- sfix35_En22
  SIGNAL b3_signed                        : signed(34 DOWNTO 0);  -- sfix35_En22
  SIGNAL a3_1                             : signed(34 DOWNTO 0);  -- sfix35_En22
  SIGNAL b3_1                             : signed(34 DOWNTO 0);  -- sfix35_En22
  SIGNAL get_min4_out1                    : std_logic_vector(34 DOWNTO 0);  -- ufix35
  SIGNAL get_min6_out1                    : std_logic_vector(34 DOWNTO 0);  -- ufix35
  SIGNAL get_min7_out1                    : std_logic_vector(34 DOWNTO 0);  -- ufix35
  SIGNAL get_min7_out1_signed             : signed(34 DOWNTO 0);  -- sfix35_En22
  SIGNAL get_min7_out1_1                  : signed(34 DOWNTO 0);  -- sfix35_En22

BEGIN
  u_get_min1 : soft_demodulation_src_get_min1_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              a => std_logic_vector(a_1),  -- sfix35_En22
              b => std_logic_vector(b_1),  -- sfix35_En22
              min => get_min1_out1  -- sfix35_En22
              );

  u_get_min2 : soft_demodulation_src_get_min2_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              a => std_logic_vector(a1_1),  -- sfix35_En22
              b => std_logic_vector(b1_1),  -- sfix35_En22
              min => get_min2_out1  -- sfix35_En22
              );

  u_get_min5 : soft_demodulation_src_get_min5_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              a => get_min1_out1,  -- sfix35_En22
              b => get_min2_out1,  -- sfix35_En22
              min => get_min5_out1  -- sfix35_En22
              );

  u_get_min3 : soft_demodulation_src_get_min3_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              a => std_logic_vector(a2_1),  -- sfix35_En22
              b => std_logic_vector(b2_1),  -- sfix35_En22
              min => get_min3_out1  -- sfix35_En22
              );

  u_get_min4 : soft_demodulation_src_get_min4_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              a => std_logic_vector(a3_1),  -- sfix35_En22
              b => std_logic_vector(b3_1),  -- sfix35_En22
              min => get_min4_out1  -- sfix35_En22
              );

  u_get_min6 : soft_demodulation_src_get_min6_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              a => get_min3_out1,  -- sfix35_En22
              b => get_min4_out1,  -- sfix35_En22
              min => get_min6_out1  -- sfix35_En22
              );

  u_get_min7 : soft_demodulation_src_get_min7_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              a => get_min5_out1,  -- sfix35_En22
              b => get_min6_out1,  -- sfix35_En22
              min => get_min7_out1  -- sfix35_En22
              );

  a_signed <= signed(a);

  b_signed <= signed(b);

  in_0_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      a_1 <= to_signed(0, 35);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        a_1 <= a_signed;
      END IF;
    END IF;
  END PROCESS in_0_pipe_process;


  in_1_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      b_1 <= to_signed(0, 35);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        b_1 <= b_signed;
      END IF;
    END IF;
  END PROCESS in_1_pipe_process;


  a1_signed <= signed(a1);

  b1_signed <= signed(b1);

  in_2_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      a1_1 <= to_signed(0, 35);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        a1_1 <= a1_signed;
      END IF;
    END IF;
  END PROCESS in_2_pipe_process;


  in_3_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      b1_1 <= to_signed(0, 35);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        b1_1 <= b1_signed;
      END IF;
    END IF;
  END PROCESS in_3_pipe_process;


  a2_signed <= signed(a2);

  b2_signed <= signed(b2);

  in_4_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      a2_1 <= to_signed(0, 35);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        a2_1 <= a2_signed;
      END IF;
    END IF;
  END PROCESS in_4_pipe_process;


  in_5_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      b2_1 <= to_signed(0, 35);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        b2_1 <= b2_signed;
      END IF;
    END IF;
  END PROCESS in_5_pipe_process;


  a3_signed <= signed(a3);

  b3_signed <= signed(b3);

  in_6_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      a3_1 <= to_signed(0, 35);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        a3_1 <= a3_signed;
      END IF;
    END IF;
  END PROCESS in_6_pipe_process;


  in_7_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      b3_1 <= to_signed(0, 35);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        b3_1 <= b3_signed;
      END IF;
    END IF;
  END PROCESS in_7_pipe_process;


  get_min7_out1_signed <= signed(get_min7_out1);

  out_0_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      get_min7_out1_1 <= to_signed(0, 35);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        get_min7_out1_1 <= get_min7_out1_signed;
      END IF;
    END IF;
  END PROCESS out_0_pipe_process;


  min <= std_logic_vector(get_min7_out1_1);

END rtl;

