-- -------------------------------------------------------------
-- 
-- File Name: hdl_32bits\hdlsrc\fec_ber_hw_V2\decoder_control_src_FEC_Ctrl.vhd
-- Created: 2022-10-27 15:30:16
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1.5625e-09
-- Target subsystem base rate: 1.5625e-09
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1.5625e-09
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- m_axis_ctrl_tvalid            ce_out        1.5625e-09
-- m_axis_ctrl_tdata             ce_out        1.5625e-09
-- m_axis_ctrl_tlast             ce_out        1.5625e-09
-- m00_axis_tvalid               ce_out        1.5625e-09
-- m00_axis_tdata                ce_out        1.5625e-09
-- m01_axis_tvalid               ce_out        1.5625e-09
-- m01_axis_tdata                ce_out        1.5625e-09
-- m02_axis_tvalid               ce_out        1.5625e-09
-- m02_axis_tdata                ce_out        1.5625e-09
-- m03_axis_tvalid               ce_out        1.5625e-09
-- m03_axis_tdata                ce_out        1.5625e-09
-- s_axis_status_tready          ce_out        1.5625e-09
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: decoder_control_src_FEC_Ctrl
-- Source Path: fec_ber_hw_V2/FEC Ctrl
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY decoder_control_src_FEC_Ctrl IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        aximm_ctrl_word                   :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        aximm_length                      :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        aximm_load                        :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        s00_axis_tvalid                   :   IN    std_logic;
        s00_axis_tdata                    :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
        s01_axis_tvalid                   :   IN    std_logic;
        s01_axis_tdata                    :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
        s02_axis_tvalid                   :   IN    std_logic;
        s02_axis_tdata                    :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
        s03_axis_tvalid                   :   IN    std_logic;
        s03_axis_tdata                    :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
        s_axis_status_tvalid              :   IN    std_logic;
        s_axis_status_tdata               :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        ce_out                            :   OUT   std_logic;
        m_axis_ctrl_tvalid                :   OUT   std_logic;
        m_axis_ctrl_tdata                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        m_axis_ctrl_tlast                 :   OUT   std_logic;
        m00_axis_tvalid                   :   OUT   std_logic;
        m00_axis_tdata                    :   OUT   std_logic_vector(127 DOWNTO 0);  -- ufix128
        m01_axis_tvalid                   :   OUT   std_logic;
        m01_axis_tdata                    :   OUT   std_logic_vector(127 DOWNTO 0);  -- ufix128
        m02_axis_tvalid                   :   OUT   std_logic;
        m02_axis_tdata                    :   OUT   std_logic_vector(127 DOWNTO 0);  -- ufix128
        m03_axis_tvalid                   :   OUT   std_logic;
        m03_axis_tdata                    :   OUT   std_logic_vector(127 DOWNTO 0);  -- ufix128
        s_axis_status_tready              :   OUT   std_logic
        );
END decoder_control_src_FEC_Ctrl;


ARCHITECTURE rtl OF decoder_control_src_FEC_Ctrl IS

  -- Component Declarations
  COMPONENT decoder_control_src_Rising_Edge
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In1                             :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          Out1                            :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT decoder_control_src_Chart
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          ctrl_word                       :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          block_length                    :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          load                            :   IN    std_logic;
          s_axis_tvalid                   :   IN    std_logic;
          s_axis_lane1_tdata              :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
          s_axis_lane2_tdata              :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
          s_axis_lane3_tdata              :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
          s_axis_lane0_tdata              :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
          m_axis_ctrl_tvalid              :   OUT   std_logic;
          m_axis_ctrl_tdata               :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
          m_axis_ctrl_tlast               :   OUT   std_logic;
          m_axis_tvalid                   :   OUT   std_logic;
          s_axis_status_tready            :   OUT   std_logic;
          m_axis_lane0_tdata              :   OUT   std_logic_vector(127 DOWNTO 0);  -- ufix128
          m_axis_lane1_tdata              :   OUT   std_logic_vector(127 DOWNTO 0);  -- ufix128
          m_axis_lane2_tdata              :   OUT   std_logic_vector(127 DOWNTO 0);  -- ufix128
          m_axis_lane3_tdata              :   OUT   std_logic_vector(127 DOWNTO 0)  -- ufix128
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : decoder_control_src_Rising_Edge
    USE ENTITY work.decoder_control_src_Rising_Edge(rtl);

  FOR ALL : decoder_control_src_Chart
    USE ENTITY work.decoder_control_src_Chart(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Rising_Edge_out1                 : std_logic;
  SIGNAL m_axis_ctrl_tdata_tmp            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL m_axis_tvalid                    : std_logic;
  SIGNAL m_axis_lane0_tdata               : std_logic_vector(127 DOWNTO 0);  -- ufix128
  SIGNAL m_axis_lane1_tdata               : std_logic_vector(127 DOWNTO 0);  -- ufix128
  SIGNAL m_axis_lane2_tdata               : std_logic_vector(127 DOWNTO 0);  -- ufix128
  SIGNAL m_axis_lane3_tdata               : std_logic_vector(127 DOWNTO 0);  -- ufix128
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL m_axis_lane0_tdata_unsigned      : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL Delay1_out1                      : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL m_axis_lane1_tdata_unsigned      : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL Delay3_out1                      : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL m_axis_lane2_tdata_unsigned      : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL Delay4_out1                      : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL m_axis_lane3_tdata_unsigned      : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL Delay5_out1                      : unsigned(127 DOWNTO 0);  -- ufix128

BEGIN
  u_Rising_Edge : decoder_control_src_Rising_Edge
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              In1 => aximm_load,  -- uint32
              Out1 => Rising_Edge_out1
              );

  u_Chart : decoder_control_src_Chart
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              ctrl_word => aximm_ctrl_word,  -- uint32
              block_length => aximm_length,  -- uint32
              load => Rising_Edge_out1,
              s_axis_tvalid => s00_axis_tvalid,
              s_axis_lane1_tdata => s01_axis_tdata,  -- ufix128
              s_axis_lane2_tdata => s02_axis_tdata,  -- ufix128
              s_axis_lane3_tdata => s03_axis_tdata,  -- ufix128
              s_axis_lane0_tdata => s00_axis_tdata,  -- ufix128
              m_axis_ctrl_tvalid => m_axis_ctrl_tvalid,
              m_axis_ctrl_tdata => m_axis_ctrl_tdata_tmp,  -- uint32
              m_axis_ctrl_tlast => m_axis_ctrl_tlast,
              m_axis_tvalid => m_axis_tvalid,
              s_axis_status_tready => s_axis_status_tready,
              m_axis_lane0_tdata => m_axis_lane0_tdata,  -- ufix128
              m_axis_lane1_tdata => m_axis_lane1_tdata,  -- ufix128
              m_axis_lane2_tdata => m_axis_lane2_tdata,  -- ufix128
              m_axis_lane3_tdata => m_axis_lane3_tdata  -- ufix128
              );

  enb <= clk_enable;

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_out1 <= m_axis_tvalid;
      END IF;
    END IF;
  END PROCESS Delay_process;


  m_axis_lane0_tdata_unsigned <= unsigned(m_axis_lane0_tdata);

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1 <= to_unsigned(0, 128);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_out1 <= m_axis_lane0_tdata_unsigned;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  m00_axis_tdata <= std_logic_vector(Delay1_out1);

  m_axis_lane1_tdata_unsigned <= unsigned(m_axis_lane1_tdata);

  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_out1 <= to_unsigned(0, 128);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_out1 <= m_axis_lane1_tdata_unsigned;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  m01_axis_tdata <= std_logic_vector(Delay3_out1);

  m_axis_lane2_tdata_unsigned <= unsigned(m_axis_lane2_tdata);

  Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_out1 <= to_unsigned(0, 128);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_out1 <= m_axis_lane2_tdata_unsigned;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  m02_axis_tdata <= std_logic_vector(Delay4_out1);

  m_axis_lane3_tdata_unsigned <= unsigned(m_axis_lane3_tdata);

  Delay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_out1 <= to_unsigned(0, 128);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay5_out1 <= m_axis_lane3_tdata_unsigned;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  m03_axis_tdata <= std_logic_vector(Delay5_out1);

  ce_out <= clk_enable;

  m_axis_ctrl_tdata <= m_axis_ctrl_tdata_tmp;

  m00_axis_tvalid <= Delay_out1;

  m01_axis_tvalid <= Delay_out1;

  m02_axis_tvalid <= Delay_out1;

  m03_axis_tvalid <= Delay_out1;

END rtl;

