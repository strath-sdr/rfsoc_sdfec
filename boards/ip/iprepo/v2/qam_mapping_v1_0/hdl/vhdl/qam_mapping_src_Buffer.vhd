-- -------------------------------------------------------------
-- 
-- File Name: hdl_32bits\hdlsrc\fec_ber_hw_V2\qam_mapping_src_Buffer.vhd
-- Created: 2022-10-27 12:38:09
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: qam_mapping_src_Buffer
-- Source Path: fec_ber_hw_V2/QAM Mapping/Buffer
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY qam_mapping_src_Buffer IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_4_0                         :   IN    std_logic;
        s_axis_tvalid                     :   IN    std_logic;
        s_axis_tdata                      :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
        alpham_axis_tvalid                :   OUT   std_logic;
        alpham_axis_tdata                 :   OUT   std_logic_vector(63 DOWNTO 0);  -- ufix64
        s_axis_tready                     :   OUT   std_logic
        );
END qam_mapping_src_Buffer;


ARCHITECTURE rtl OF qam_mapping_src_Buffer IS

  -- Component Declarations
  COMPONENT qam_mapping_src_HDL_FIFO
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          In_rsvd                         :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
          Push                            :   IN    std_logic;
          Pop                             :   IN    std_logic;
          Out_rsvd                        :   OUT   std_logic_vector(63 DOWNTO 0);  -- ufix64
          Empty                           :   OUT   std_logic;
          Full                            :   OUT   std_logic;
          Num                             :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : qam_mapping_src_HDL_FIFO
    USE ENTITY work.qam_mapping_src_HDL_FIFO(rtl);

  -- Signals
  SIGNAL HDL_FIFO_out3                    : std_logic;
  SIGNAL NOT1_out1                        : std_logic;
  SIGNAL AND1_out1                        : std_logic;
  SIGNAL NOT_out1                         : std_logic;
  SIGNAL HDL_FIFO_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL HDL_FIFO_out2                    : std_logic;
  SIGNAL HDL_FIFO_out4                    : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL HDL_FIFO_out4_unsigned           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Constant_out1                    : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL GreaterThan_relop1               : std_logic;

BEGIN
  u_HDL_FIFO : qam_mapping_src_HDL_FIFO
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0,
              In_rsvd => s_axis_tdata,  -- ufix64
              Push => AND1_out1,
              Pop => NOT_out1,
              Out_rsvd => HDL_FIFO_out1,  -- ufix64
              Empty => HDL_FIFO_out2,
              Full => HDL_FIFO_out3,
              Num => HDL_FIFO_out4  -- uint8
              );

  NOT1_out1 <=  NOT HDL_FIFO_out3;

  AND1_out1 <= s_axis_tvalid AND NOT1_out1;

  NOT_out1 <=  NOT HDL_FIFO_out2;

  Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        Delay4_out1 <= NOT_out1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  HDL_FIFO_out4_unsigned <= unsigned(HDL_FIFO_out4);

  Constant_out1 <= to_unsigned(16#78#, 7);

  
  GreaterThan_relop1 <= '1' WHEN HDL_FIFO_out4_unsigned < resize(Constant_out1, 8) ELSE
      '0';

  alpham_axis_tvalid <= Delay4_out1;

  alpham_axis_tdata <= HDL_FIFO_out1;

  s_axis_tready <= GreaterThan_relop1;

END rtl;

