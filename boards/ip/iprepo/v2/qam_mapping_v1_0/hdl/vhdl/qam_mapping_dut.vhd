-- -------------------------------------------------------------
-- 
-- File Name: hdl_32bits\hdlsrc\fec_ber_hw_V2\qam_mapping_dut.vhd
-- Created: 2022-10-27 12:38:12
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: qam_mapping_dut
-- Source Path: qam_mapping/qam_mapping_dut
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY qam_mapping_dut IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        dut_enable                        :   IN    std_logic;  -- ufix1
        s_axis_tvalid                     :   IN    std_logic;  -- ufix1
        s_axis_tdata                      :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
        m_axis_tready                     :   IN    std_logic;  -- ufix1
        ce_out                            :   OUT   std_logic;  -- ufix1
        m_axis_Q_tvalid                   :   OUT   std_logic;  -- ufix1
        m_axis_Q_tdata                    :   OUT   std_logic_vector(47 DOWNTO 0);  -- ufix48
        m_axis_I_tvalid                   :   OUT   std_logic;  -- ufix1
        m_axis_I_tdata                    :   OUT   std_logic_vector(47 DOWNTO 0);  -- ufix48
        s_axis_tready                     :   OUT   std_logic  -- ufix1
        );
END qam_mapping_dut;


ARCHITECTURE rtl OF qam_mapping_dut IS

  -- Component Declarations
  COMPONENT qam_mapping_src_QAM_Mapping
    PORT( clk                             :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          reset                           :   IN    std_logic;
          s_axis_tvalid                   :   IN    std_logic;  -- ufix1
          s_axis_tdata                    :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
          m_axis_tready                   :   IN    std_logic;  -- ufix1
          ce_out                          :   OUT   std_logic;  -- ufix1
          m_axis_Q_tvalid                 :   OUT   std_logic;  -- ufix1
          m_axis_Q_tdata                  :   OUT   std_logic_vector(47 DOWNTO 0);  -- ufix48
          m_axis_I_tvalid                 :   OUT   std_logic;  -- ufix1
          m_axis_I_tdata                  :   OUT   std_logic_vector(47 DOWNTO 0);  -- ufix48
          s_axis_tready                   :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : qam_mapping_src_QAM_Mapping
    USE ENTITY work.qam_mapping_src_QAM_Mapping(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL s_axis_tvalid_sig                : std_logic;  -- ufix1
  SIGNAL m_axis_tready_sig                : std_logic;  -- ufix1
  SIGNAL ce_out_sig                       : std_logic;  -- ufix1
  SIGNAL m_axis_Q_tvalid_sig              : std_logic;  -- ufix1
  SIGNAL m_axis_Q_tdata_sig               : std_logic_vector(47 DOWNTO 0);  -- ufix48
  SIGNAL m_axis_I_tvalid_sig              : std_logic;  -- ufix1
  SIGNAL m_axis_I_tdata_sig               : std_logic_vector(47 DOWNTO 0);  -- ufix48
  SIGNAL s_axis_tready_sig                : std_logic;  -- ufix1

BEGIN
  u_qam_mapping_src_QAM_Mapping : qam_mapping_src_QAM_Mapping
    PORT MAP( clk => clk,
              clk_enable => enb,
              reset => reset,
              s_axis_tvalid => s_axis_tvalid_sig,  -- ufix1
              s_axis_tdata => s_axis_tdata,  -- ufix64
              m_axis_tready => m_axis_tready_sig,  -- ufix1
              ce_out => ce_out_sig,  -- ufix1
              m_axis_Q_tvalid => m_axis_Q_tvalid_sig,  -- ufix1
              m_axis_Q_tdata => m_axis_Q_tdata_sig,  -- ufix48
              m_axis_I_tvalid => m_axis_I_tvalid_sig,  -- ufix1
              m_axis_I_tdata => m_axis_I_tdata_sig,  -- ufix48
              s_axis_tready => s_axis_tready_sig  -- ufix1
              );

  s_axis_tvalid_sig <= s_axis_tvalid;

  m_axis_tready_sig <= m_axis_tready;

  enb <= dut_enable;

  ce_out <= ce_out_sig;

  m_axis_Q_tvalid <= m_axis_Q_tvalid_sig;

  m_axis_Q_tdata <= m_axis_Q_tdata_sig;

  m_axis_I_tvalid <= m_axis_I_tvalid_sig;

  m_axis_I_tdata <= m_axis_I_tdata_sig;

  s_axis_tready <= s_axis_tready_sig;

END rtl;

