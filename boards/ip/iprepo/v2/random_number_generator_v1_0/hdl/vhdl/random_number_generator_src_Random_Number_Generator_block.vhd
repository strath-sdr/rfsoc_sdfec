-- -------------------------------------------------------------
-- 
-- File Name: hdl_32bits\hdlsrc\fec_ber_hw_V2\random_number_generator_src_Random_Number_Generator_block.vhd
-- Created: 2022-10-27 12:01:58
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: random_number_generator_src_Random_Number_Generator_block
-- Source Path: fec_ber_hw_V2/Random Number Generator/Random Number Generator
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY random_number_generator_src_Random_Number_Generator_block IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_4_0                         :   IN    std_logic;
        reset_1                           :   IN    std_logic;
        enable                            :   IN    std_logic;
        data                              :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
        );
END random_number_generator_src_Random_Number_Generator_block;


ARCHITECTURE rtl OF random_number_generator_src_Random_Number_Generator_block IS

  -- Component Declarations
  COMPONENT random_number_generator_src_bit0
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT random_number_generator_src_bit1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT random_number_generator_src_bit2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT random_number_generator_src_bit3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT random_number_generator_src_bit4
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT random_number_generator_src_bit5
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT random_number_generator_src_bit6
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT random_number_generator_src_bit7
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT random_number_generator_src_bit8
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT random_number_generator_src_bit9
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT random_number_generator_src_bit10
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT random_number_generator_src_bit11
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT random_number_generator_src_bit12
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT random_number_generator_src_bit13
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT random_number_generator_src_bit14
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT random_number_generator_src_bit15
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT random_number_generator_src_bit16
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT random_number_generator_src_bit17
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT random_number_generator_src_bit18
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT random_number_generator_src_bit19
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT random_number_generator_src_bit20
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT random_number_generator_src_bit21
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT random_number_generator_src_bit22
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT random_number_generator_src_bit23
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT random_number_generator_src_bit24
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT random_number_generator_src_bit25
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT random_number_generator_src_bit26
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT random_number_generator_src_bit27
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT random_number_generator_src_bit28
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT random_number_generator_src_bit29
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT random_number_generator_src_bit30
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT random_number_generator_src_bit31
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : random_number_generator_src_bit0
    USE ENTITY work.random_number_generator_src_bit0(rtl);

  FOR ALL : random_number_generator_src_bit1
    USE ENTITY work.random_number_generator_src_bit1(rtl);

  FOR ALL : random_number_generator_src_bit2
    USE ENTITY work.random_number_generator_src_bit2(rtl);

  FOR ALL : random_number_generator_src_bit3
    USE ENTITY work.random_number_generator_src_bit3(rtl);

  FOR ALL : random_number_generator_src_bit4
    USE ENTITY work.random_number_generator_src_bit4(rtl);

  FOR ALL : random_number_generator_src_bit5
    USE ENTITY work.random_number_generator_src_bit5(rtl);

  FOR ALL : random_number_generator_src_bit6
    USE ENTITY work.random_number_generator_src_bit6(rtl);

  FOR ALL : random_number_generator_src_bit7
    USE ENTITY work.random_number_generator_src_bit7(rtl);

  FOR ALL : random_number_generator_src_bit8
    USE ENTITY work.random_number_generator_src_bit8(rtl);

  FOR ALL : random_number_generator_src_bit9
    USE ENTITY work.random_number_generator_src_bit9(rtl);

  FOR ALL : random_number_generator_src_bit10
    USE ENTITY work.random_number_generator_src_bit10(rtl);

  FOR ALL : random_number_generator_src_bit11
    USE ENTITY work.random_number_generator_src_bit11(rtl);

  FOR ALL : random_number_generator_src_bit12
    USE ENTITY work.random_number_generator_src_bit12(rtl);

  FOR ALL : random_number_generator_src_bit13
    USE ENTITY work.random_number_generator_src_bit13(rtl);

  FOR ALL : random_number_generator_src_bit14
    USE ENTITY work.random_number_generator_src_bit14(rtl);

  FOR ALL : random_number_generator_src_bit15
    USE ENTITY work.random_number_generator_src_bit15(rtl);

  FOR ALL : random_number_generator_src_bit16
    USE ENTITY work.random_number_generator_src_bit16(rtl);

  FOR ALL : random_number_generator_src_bit17
    USE ENTITY work.random_number_generator_src_bit17(rtl);

  FOR ALL : random_number_generator_src_bit18
    USE ENTITY work.random_number_generator_src_bit18(rtl);

  FOR ALL : random_number_generator_src_bit19
    USE ENTITY work.random_number_generator_src_bit19(rtl);

  FOR ALL : random_number_generator_src_bit20
    USE ENTITY work.random_number_generator_src_bit20(rtl);

  FOR ALL : random_number_generator_src_bit21
    USE ENTITY work.random_number_generator_src_bit21(rtl);

  FOR ALL : random_number_generator_src_bit22
    USE ENTITY work.random_number_generator_src_bit22(rtl);

  FOR ALL : random_number_generator_src_bit23
    USE ENTITY work.random_number_generator_src_bit23(rtl);

  FOR ALL : random_number_generator_src_bit24
    USE ENTITY work.random_number_generator_src_bit24(rtl);

  FOR ALL : random_number_generator_src_bit25
    USE ENTITY work.random_number_generator_src_bit25(rtl);

  FOR ALL : random_number_generator_src_bit26
    USE ENTITY work.random_number_generator_src_bit26(rtl);

  FOR ALL : random_number_generator_src_bit27
    USE ENTITY work.random_number_generator_src_bit27(rtl);

  FOR ALL : random_number_generator_src_bit28
    USE ENTITY work.random_number_generator_src_bit28(rtl);

  FOR ALL : random_number_generator_src_bit29
    USE ENTITY work.random_number_generator_src_bit29(rtl);

  FOR ALL : random_number_generator_src_bit30
    USE ENTITY work.random_number_generator_src_bit30(rtl);

  FOR ALL : random_number_generator_src_bit31
    USE ENTITY work.random_number_generator_src_bit31(rtl);

  -- Signals
  SIGNAL enb_1_4_0_gated                  : std_logic;
  SIGNAL enable_out2                      : std_logic;
  SIGNAL bit0_out1                        : std_logic;
  SIGNAL bit1_out1                        : std_logic;
  SIGNAL bit2_out1                        : std_logic;
  SIGNAL bit3_out1                        : std_logic;
  SIGNAL bit4_out1                        : std_logic;
  SIGNAL bit5_out1                        : std_logic;
  SIGNAL bit6_out1                        : std_logic;
  SIGNAL bit7_out1                        : std_logic;
  SIGNAL bit8_out1                        : std_logic;
  SIGNAL bit9_out1                        : std_logic;
  SIGNAL bit10_out1                       : std_logic;
  SIGNAL bit11_out1                       : std_logic;
  SIGNAL bit12_out1                       : std_logic;
  SIGNAL bit13_out1                       : std_logic;
  SIGNAL bit14_out1                       : std_logic;
  SIGNAL bit15_out1                       : std_logic;
  SIGNAL bit16_out1                       : std_logic;
  SIGNAL bit17_out1                       : std_logic;
  SIGNAL bit18_out1                       : std_logic;
  SIGNAL bit19_out1                       : std_logic;
  SIGNAL bit20_out1                       : std_logic;
  SIGNAL bit21_out1                       : std_logic;
  SIGNAL bit22_out1                       : std_logic;
  SIGNAL bit23_out1                       : std_logic;
  SIGNAL bit24_out1                       : std_logic;
  SIGNAL bit25_out1                       : std_logic;
  SIGNAL bit26_out1                       : std_logic;
  SIGNAL bit27_out1                       : std_logic;
  SIGNAL bit28_out1                       : std_logic;
  SIGNAL bit29_out1                       : std_logic;
  SIGNAL bit30_out1                       : std_logic;
  SIGNAL bit31_out1                       : std_logic;
  SIGNAL concat_out1                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL concat_out1_bypass               : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL concat_out1_last_value           : unsigned(31 DOWNTO 0);  -- uint32

BEGIN
  u_bit0 : random_number_generator_src_bit0
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0_gated,
              inportReset => reset_1,
              PN_Sequence => bit0_out1
              );

  u_bit1 : random_number_generator_src_bit1
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0_gated,
              inportReset => reset_1,
              PN_Sequence => bit1_out1
              );

  u_bit2 : random_number_generator_src_bit2
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0_gated,
              inportReset => reset_1,
              PN_Sequence => bit2_out1
              );

  u_bit3 : random_number_generator_src_bit3
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0_gated,
              inportReset => reset_1,
              PN_Sequence => bit3_out1
              );

  u_bit4 : random_number_generator_src_bit4
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0_gated,
              inportReset => reset_1,
              PN_Sequence => bit4_out1
              );

  u_bit5 : random_number_generator_src_bit5
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0_gated,
              inportReset => reset_1,
              PN_Sequence => bit5_out1
              );

  u_bit6 : random_number_generator_src_bit6
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0_gated,
              inportReset => reset_1,
              PN_Sequence => bit6_out1
              );

  u_bit7 : random_number_generator_src_bit7
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0_gated,
              inportReset => reset_1,
              PN_Sequence => bit7_out1
              );

  u_bit8 : random_number_generator_src_bit8
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0_gated,
              inportReset => reset_1,
              PN_Sequence => bit8_out1
              );

  u_bit9 : random_number_generator_src_bit9
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0_gated,
              inportReset => reset_1,
              PN_Sequence => bit9_out1
              );

  u_bit10 : random_number_generator_src_bit10
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0_gated,
              inportReset => reset_1,
              PN_Sequence => bit10_out1
              );

  u_bit11 : random_number_generator_src_bit11
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0_gated,
              inportReset => reset_1,
              PN_Sequence => bit11_out1
              );

  u_bit12 : random_number_generator_src_bit12
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0_gated,
              inportReset => reset_1,
              PN_Sequence => bit12_out1
              );

  u_bit13 : random_number_generator_src_bit13
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0_gated,
              inportReset => reset_1,
              PN_Sequence => bit13_out1
              );

  u_bit14 : random_number_generator_src_bit14
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0_gated,
              inportReset => reset_1,
              PN_Sequence => bit14_out1
              );

  u_bit15 : random_number_generator_src_bit15
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0_gated,
              inportReset => reset_1,
              PN_Sequence => bit15_out1
              );

  u_bit16 : random_number_generator_src_bit16
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0_gated,
              inportReset => reset_1,
              PN_Sequence => bit16_out1
              );

  u_bit17 : random_number_generator_src_bit17
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0_gated,
              inportReset => reset_1,
              PN_Sequence => bit17_out1
              );

  u_bit18 : random_number_generator_src_bit18
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0_gated,
              inportReset => reset_1,
              PN_Sequence => bit18_out1
              );

  u_bit19 : random_number_generator_src_bit19
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0_gated,
              inportReset => reset_1,
              PN_Sequence => bit19_out1
              );

  u_bit20 : random_number_generator_src_bit20
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0_gated,
              inportReset => reset_1,
              PN_Sequence => bit20_out1
              );

  u_bit21 : random_number_generator_src_bit21
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0_gated,
              inportReset => reset_1,
              PN_Sequence => bit21_out1
              );

  u_bit22 : random_number_generator_src_bit22
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0_gated,
              inportReset => reset_1,
              PN_Sequence => bit22_out1
              );

  u_bit23 : random_number_generator_src_bit23
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0_gated,
              inportReset => reset_1,
              PN_Sequence => bit23_out1
              );

  u_bit24 : random_number_generator_src_bit24
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0_gated,
              inportReset => reset_1,
              PN_Sequence => bit24_out1
              );

  u_bit25 : random_number_generator_src_bit25
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0_gated,
              inportReset => reset_1,
              PN_Sequence => bit25_out1
              );

  u_bit26 : random_number_generator_src_bit26
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0_gated,
              inportReset => reset_1,
              PN_Sequence => bit26_out1
              );

  u_bit27 : random_number_generator_src_bit27
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0_gated,
              inportReset => reset_1,
              PN_Sequence => bit27_out1
              );

  u_bit28 : random_number_generator_src_bit28
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0_gated,
              inportReset => reset_1,
              PN_Sequence => bit28_out1
              );

  u_bit29 : random_number_generator_src_bit29
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0_gated,
              inportReset => reset_1,
              PN_Sequence => bit29_out1
              );

  u_bit30 : random_number_generator_src_bit30
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0_gated,
              inportReset => reset_1,
              PN_Sequence => bit30_out1
              );

  u_bit31 : random_number_generator_src_bit31
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0_gated,
              inportReset => reset_1,
              PN_Sequence => bit31_out1
              );

  enable_out2 <= enable;

  enb_1_4_0_gated <= enable_out2 AND enb_1_4_0;

  concat_out1 <= unsigned'(bit0_out1 & bit1_out1 & bit2_out1 & bit3_out1 & bit4_out1 & bit5_out1 & bit6_out1 & bit7_out1 & bit8_out1 & bit9_out1 & bit10_out1 & bit11_out1 & bit12_out1 & bit13_out1 & bit14_out1 & bit15_out1 & bit16_out1 & bit17_out1 & bit18_out1 & bit19_out1 & bit20_out1 & bit21_out1 & bit22_out1 & bit23_out1 & bit24_out1 & bit25_out1 & bit26_out1 & bit27_out1 & bit28_out1 & bit29_out1 & bit30_out1 & bit31_out1);

  data_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      concat_out1_last_value <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0_gated = '1' THEN
        concat_out1_last_value <= concat_out1_bypass;
      END IF;
    END IF;
  END PROCESS data_bypass_process;


  
  concat_out1_bypass <= concat_out1_last_value WHEN enable_out2 = '0' ELSE
      concat_out1;

  data <= std_logic_vector(concat_out1_bypass);

END rtl;

