-- -------------------------------------------------------------
-- 
-- File Name: hdl_32bits\hdlsrc\fec_ber_hw_V2\random_number_generator_src_concat.vhd
-- Created: 2022-10-27 12:01:58
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: random_number_generator_src_concat
-- Source Path: fec_ber_hw_V2/Random Number Generator/concat
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY random_number_generator_src_concat IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_4_0                         :   IN    std_logic;
        en                                :   IN    std_logic;
        diff                              :   IN    std_logic_vector(32 DOWNTO 0);  -- sfix33
        d_in                              :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        d_out                             :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
        );
END random_number_generator_src_concat;


ARCHITECTURE rtl OF random_number_generator_src_concat IS

  -- Component Declarations
  COMPONENT random_number_generator_src_mask_generator
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          diff                            :   IN    std_logic_vector(32 DOWNTO 0);  -- sfix33
          sel                             :   IN    std_logic;
          mask                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : random_number_generator_src_mask_generator
    USE ENTITY work.random_number_generator_src_mask_generator(rtl);

  -- Signals
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL d_in_unsigned                    : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Constant_out1                    : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay1_out1                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL mask_generator_out1              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL mask_generator_out1_unsigned     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Bitwise_Operator_out1            : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Multiport_Switch_out1            : unsigned(31 DOWNTO 0);  -- uint32

BEGIN
  u_mask_generator : random_number_generator_src_mask_generator
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0,
              diff => diff,  -- sfix33
              sel => en,
              mask => mask_generator_out1  -- uint32
              );

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        Delay_out1 <= en;
      END IF;
    END IF;
  END PROCESS Delay_process;


  d_in_unsigned <= unsigned(d_in);

  Constant_out1 <= to_unsigned(0, 32);

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        Delay1_out1 <= d_in_unsigned;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  mask_generator_out1_unsigned <= unsigned(mask_generator_out1);

  Bitwise_Operator_out1 <= Delay1_out1 AND mask_generator_out1_unsigned;

  
  Multiport_Switch_out1 <= Constant_out1 WHEN Delay_out1 = '0' ELSE
      Bitwise_Operator_out1;

  d_out <= std_logic_vector(Multiport_Switch_out1);

END rtl;

