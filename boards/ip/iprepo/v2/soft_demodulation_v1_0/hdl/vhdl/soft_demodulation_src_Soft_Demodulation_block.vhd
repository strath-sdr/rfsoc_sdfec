-- -------------------------------------------------------------
-- 
-- File Name: hdl_32bits_hmm\hdlsrc\fec_ber_hw_V2\soft_demodulation_src_Soft_Demodulation_block.vhd
-- Created: 2022-10-27 17:56:31
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: soft_demodulation_src_Soft_Demodulation_block
-- Source Path: fec_ber_hw_V2/Soft Demodulation/Soft Demodulation
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.soft_demodulation_src_Soft_Demodulation_pkg.ALL;

ENTITY soft_demodulation_src_Soft_Demodulation_block IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        valid                             :   IN    std_logic;
        real_rsvd                         :   IN    vector_of_std_logic_vector16(0 TO 15);  -- uint16 [16]
        imag                              :   IN    vector_of_std_logic_vector16(0 TO 15);  -- uint16 [16]
        LLR_Scale                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32_En22
        LLR_Values                        :   OUT   vector_of_std_logic_vector8(0 TO 15)  -- uint8 [16]
        );
END soft_demodulation_src_Soft_Demodulation_block;


ARCHITECTURE rtl OF soft_demodulation_src_Soft_Demodulation_block IS

  -- Component Declarations
  COMPONENT soft_demodulation_src_Subsystem3
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1                           :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          Out1                            :   OUT   std_logic_vector(2 DOWNTO 0);  -- sfix3
          Out2                            :   OUT   std_logic_vector(2 DOWNTO 0);  -- sfix3
          Out3                            :   OUT   std_logic_vector(2 DOWNTO 0);  -- sfix3
          Out4                            :   OUT   std_logic_vector(2 DOWNTO 0);  -- sfix3
          Out5                            :   OUT   std_logic_vector(2 DOWNTO 0);  -- sfix3
          Out6                            :   OUT   std_logic_vector(2 DOWNTO 0);  -- sfix3
          Out7                            :   OUT   std_logic_vector(2 DOWNTO 0);  -- sfix3
          Out8                            :   OUT   std_logic_vector(2 DOWNTO 0)  -- sfix3
          );
  END COMPONENT;

  COMPONENT soft_demodulation_src_Subsystem6
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1                           :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          Out1                            :   OUT   std_logic_vector(2 DOWNTO 0);  -- sfix3
          Out2                            :   OUT   std_logic_vector(2 DOWNTO 0);  -- sfix3
          Out3                            :   OUT   std_logic_vector(2 DOWNTO 0);  -- sfix3
          Out4                            :   OUT   std_logic_vector(2 DOWNTO 0);  -- sfix3
          Out5                            :   OUT   std_logic_vector(2 DOWNTO 0);  -- sfix3
          Out6                            :   OUT   std_logic_vector(2 DOWNTO 0);  -- sfix3
          Out7                            :   OUT   std_logic_vector(2 DOWNTO 0);  -- sfix3
          Out8                            :   OUT   std_logic_vector(2 DOWNTO 0)  -- sfix3
          );
  END COMPONENT;

  COMPONENT soft_demodulation_src_Subsystem4
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1                           :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          Out1                            :   OUT   std_logic_vector(2 DOWNTO 0);  -- sfix3
          Out2                            :   OUT   std_logic_vector(2 DOWNTO 0);  -- sfix3
          Out3                            :   OUT   std_logic_vector(2 DOWNTO 0);  -- sfix3
          Out4                            :   OUT   std_logic_vector(2 DOWNTO 0);  -- sfix3
          Out5                            :   OUT   std_logic_vector(2 DOWNTO 0);  -- sfix3
          Out6                            :   OUT   std_logic_vector(2 DOWNTO 0);  -- sfix3
          Out7                            :   OUT   std_logic_vector(2 DOWNTO 0);  -- sfix3
          Out8                            :   OUT   std_logic_vector(2 DOWNTO 0)  -- sfix3
          );
  END COMPONENT;

  COMPONENT soft_demodulation_src_Subsystem5
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1                           :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          Out1                            :   OUT   std_logic_vector(2 DOWNTO 0);  -- sfix3
          Out2                            :   OUT   std_logic_vector(2 DOWNTO 0);  -- sfix3
          Out3                            :   OUT   std_logic_vector(2 DOWNTO 0);  -- sfix3
          Out4                            :   OUT   std_logic_vector(2 DOWNTO 0);  -- sfix3
          Out5                            :   OUT   std_logic_vector(2 DOWNTO 0);  -- sfix3
          Out6                            :   OUT   std_logic_vector(2 DOWNTO 0);  -- sfix3
          Out7                            :   OUT   std_logic_vector(2 DOWNTO 0);  -- sfix3
          Out8                            :   OUT   std_logic_vector(2 DOWNTO 0)  -- sfix3
          );
  END COMPONENT;

  COMPONENT soft_demodulation_src_Subsystem2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          a                               :   IN    vector_of_std_logic_vector35(0 TO 15);  -- sfix35_En22 [16]
          b                               :   IN    vector_of_std_logic_vector35(0 TO 15);  -- sfix35_En22 [16]
          a1                              :   IN    vector_of_std_logic_vector35(0 TO 15);  -- sfix35_En22 [16]
          b1                              :   IN    vector_of_std_logic_vector35(0 TO 15);  -- sfix35_En22 [16]
          a2                              :   IN    vector_of_std_logic_vector35(0 TO 15);  -- sfix35_En22 [16]
          b2                              :   IN    vector_of_std_logic_vector35(0 TO 15);  -- sfix35_En22 [16]
          a3                              :   IN    vector_of_std_logic_vector35(0 TO 15);  -- sfix35_En22 [16]
          b3                              :   IN    vector_of_std_logic_vector35(0 TO 15);  -- sfix35_En22 [16]
          min                             :   OUT   vector_of_std_logic_vector35(0 TO 15)  -- sfix35_En22 [16]
          );
  END COMPONENT;

  COMPONENT soft_demodulation_src_Subsystem1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          a                               :   IN    vector_of_std_logic_vector35(0 TO 15);  -- sfix35_En22 [16]
          b                               :   IN    vector_of_std_logic_vector35(0 TO 15);  -- sfix35_En22 [16]
          a1                              :   IN    vector_of_std_logic_vector35(0 TO 15);  -- sfix35_En22 [16]
          b1                              :   IN    vector_of_std_logic_vector35(0 TO 15);  -- sfix35_En22 [16]
          a2                              :   IN    vector_of_std_logic_vector35(0 TO 15);  -- sfix35_En22 [16]
          b2                              :   IN    vector_of_std_logic_vector35(0 TO 15);  -- sfix35_En22 [16]
          a3                              :   IN    vector_of_std_logic_vector35(0 TO 15);  -- sfix35_En22 [16]
          b3                              :   IN    vector_of_std_logic_vector35(0 TO 15);  -- sfix35_En22 [16]
          min                             :   OUT   vector_of_std_logic_vector35(0 TO 15)  -- sfix35_En22 [16]
          );
  END COMPONENT;

  COMPONENT soft_demodulation_src_symmetric_saturation
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In1                             :   IN    vector_of_std_logic_vector68(0 TO 15);  -- sfix68_En22 [16]
          Out1                            :   OUT   vector_of_std_logic_vector6(0 TO 15)  -- sfix6_En2 [16]
          );
  END COMPONENT;

  COMPONENT soft_demodulation_src_sign_extend
    PORT( u                               :   IN    vector_of_std_logic_vector6(0 TO 15);  -- sfix6_En2 [16]
          y                               :   OUT   vector_of_std_logic_vector8(0 TO 15)  -- uint8 [16]
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : soft_demodulation_src_Subsystem3
    USE ENTITY work.soft_demodulation_src_Subsystem3(rtl);

  FOR ALL : soft_demodulation_src_Subsystem6
    USE ENTITY work.soft_demodulation_src_Subsystem6(rtl);

  FOR ALL : soft_demodulation_src_Subsystem4
    USE ENTITY work.soft_demodulation_src_Subsystem4(rtl);

  FOR ALL : soft_demodulation_src_Subsystem5
    USE ENTITY work.soft_demodulation_src_Subsystem5(rtl);

  FOR ALL : soft_demodulation_src_Subsystem2
    USE ENTITY work.soft_demodulation_src_Subsystem2(rtl);

  FOR ALL : soft_demodulation_src_Subsystem1
    USE ENTITY work.soft_demodulation_src_Subsystem1(rtl);

  FOR ALL : soft_demodulation_src_symmetric_saturation
    USE ENTITY work.soft_demodulation_src_symmetric_saturation(rtl);

  FOR ALL : soft_demodulation_src_sign_extend
    USE ENTITY work.soft_demodulation_src_sign_extend(rtl);

  -- Signals
  SIGNAL imag_unsigned                    : vector_of_unsigned16(0 TO 15);  -- uint16 [16]
  SIGNAL Y                                : vector_of_unsigned16(0 TO 15);  -- uint16 [16]
  SIGNAL Data_Type_Conversion_out1        : vector_of_signed16(0 TO 15);  -- sfix16_En11 [16]
  SIGNAL Data_Type_Conversion_out1_1      : vector_of_signed16(0 TO 15);  -- sfix16_En11 [16]
  SIGNAL valid_1                          : std_logic;
  SIGNAL HDL_Counter_out1                 : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Subsystem3_out1                  : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL Subsystem3_out2                  : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL Subsystem3_out3                  : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL Subsystem3_out4                  : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL Subsystem3_out5                  : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL Subsystem3_out6                  : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL Subsystem3_out7                  : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL Subsystem3_out8                  : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL Subsystem3_out1_signed           : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL Subtract2_v                      : signed(16 DOWNTO 0);  -- sfix17_En11
  SIGNAL Subtract2_sub_cast               : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract2_sub_cast_1             : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract2_sub_cast_2             : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract2_sub_temp               : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract2_out1                   : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract2_out1_1                 : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Product32_out1                   : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Product32_out1_1                 : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL real_unsigned                    : vector_of_unsigned16(0 TO 15);  -- uint16 [16]
  SIGNAL X                                : vector_of_unsigned16(0 TO 15);  -- uint16 [16]
  SIGNAL Data_Type_Conversion1_out1       : vector_of_signed16(0 TO 15);  -- sfix16_En11 [16]
  SIGNAL Data_Type_Conversion1_out1_1     : vector_of_signed16(0 TO 15);  -- sfix16_En11 [16]
  SIGNAL Subsystem6_out1                  : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL Subsystem6_out2                  : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL Subsystem6_out3                  : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL Subsystem6_out4                  : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL Subsystem6_out5                  : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL Subsystem6_out6                  : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL Subsystem6_out7                  : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL Subsystem6_out8                  : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL Subsystem6_out1_signed           : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL Subtract19_v                     : signed(16 DOWNTO 0);  -- sfix17_En11
  SIGNAL Subtract19_sub_cast              : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract19_sub_cast_1            : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract19_sub_cast_2            : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract19_sub_temp              : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract19_out1                  : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract19_out1_1                : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Product27_out1                   : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Subsystem3_out2_signed           : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL Subtract3_v                      : signed(16 DOWNTO 0);  -- sfix17_En11
  SIGNAL Subtract3_sub_cast               : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract3_sub_cast_1             : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract3_sub_cast_2             : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract3_sub_temp               : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract3_out1                   : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract3_out1_1                 : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Product31_out1                   : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Product31_out1_1                 : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Subsystem6_out2_signed           : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL Subtract20_v                     : signed(16 DOWNTO 0);  -- sfix17_En11
  SIGNAL Subtract20_sub_cast              : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract20_sub_cast_1            : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract20_sub_cast_2            : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract20_sub_temp              : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract20_out1                  : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract20_out1_1                : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Product26_out1                   : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Subsystem3_out3_signed           : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL Subtract1_v                      : signed(16 DOWNTO 0);  -- sfix17_En11
  SIGNAL Subtract1_sub_cast               : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract1_sub_cast_1             : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract1_sub_cast_2             : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract1_sub_temp               : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract1_out1                   : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract1_out1_1                 : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Product30_out1                   : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Product30_out1_1                 : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Subsystem6_out3_signed           : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL Subtract21_v                     : signed(16 DOWNTO 0);  -- sfix17_En11
  SIGNAL Subtract21_sub_cast              : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract21_sub_cast_1            : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract21_sub_cast_2            : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract21_sub_temp              : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract21_out1                  : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract21_out1_1                : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Product25_out1                   : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Subsystem3_out4_signed           : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL Subtract4_v                      : signed(16 DOWNTO 0);  -- sfix17_En11
  SIGNAL Subtract4_sub_cast               : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract4_sub_cast_1             : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract4_sub_cast_2             : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract4_sub_temp               : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract4_out1                   : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract4_out1_1                 : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Product29_out1                   : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Product29_out1_1                 : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Subsystem6_out4_signed           : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL Subtract22_v                     : signed(16 DOWNTO 0);  -- sfix17_En11
  SIGNAL Subtract22_sub_cast              : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract22_sub_cast_1            : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract22_sub_cast_2            : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract22_sub_temp              : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract22_out1                  : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract22_out1_1                : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Product24_out1                   : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Subsystem3_out5_signed           : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL Subtract5_v                      : signed(16 DOWNTO 0);  -- sfix17_En11
  SIGNAL Subtract5_sub_cast               : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract5_sub_cast_1             : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract5_sub_cast_2             : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract5_sub_temp               : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract5_out1                   : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract5_out1_1                 : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Product28_out1                   : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Product28_out1_1                 : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Subsystem6_out5_signed           : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL Subtract23_v                     : signed(16 DOWNTO 0);  -- sfix17_En11
  SIGNAL Subtract23_sub_cast              : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract23_sub_cast_1            : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract23_sub_cast_2            : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract23_sub_temp              : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract23_out1                  : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract23_out1_1                : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Product23_out1                   : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Subsystem3_out6_signed           : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL Subtract6_v                      : signed(16 DOWNTO 0);  -- sfix17_En11
  SIGNAL Subtract6_sub_cast               : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract6_sub_cast_1             : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract6_sub_cast_2             : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract6_sub_temp               : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract6_out1                   : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract6_out1_1                 : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Product19_out1                   : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Product19_out1_1                 : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Subsystem6_out6_signed           : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL Subtract24_v                     : signed(16 DOWNTO 0);  -- sfix17_En11
  SIGNAL Subtract24_sub_cast              : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract24_sub_cast_1            : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract24_sub_cast_2            : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract24_sub_temp              : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract24_out1                  : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract24_out1_1                : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Product22_out1                   : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Subsystem3_out7_signed           : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL Subtract7_v                      : signed(16 DOWNTO 0);  -- sfix17_En11
  SIGNAL Subtract7_sub_cast               : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract7_sub_cast_1             : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract7_sub_cast_2             : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract7_sub_temp               : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract7_out1                   : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract7_out1_1                 : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Product18_out1                   : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Product18_out1_1                 : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Subsystem6_out7_signed           : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL Subtract25_v                     : signed(16 DOWNTO 0);  -- sfix17_En11
  SIGNAL Subtract25_sub_cast              : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract25_sub_cast_1            : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract25_sub_cast_2            : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract25_sub_temp              : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract25_out1                  : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract25_out1_1                : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Product21_out1                   : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Subsystem3_out8_signed           : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL Subtract8_v                      : signed(16 DOWNTO 0);  -- sfix17_En11
  SIGNAL Subtract8_sub_cast               : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract8_sub_cast_1             : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract8_sub_cast_2             : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract8_sub_temp               : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract8_out1                   : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract8_out1_1                 : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Product17_out1                   : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Product17_out1_1                 : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Subsystem6_out8_signed           : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL Subtract26_v                     : signed(16 DOWNTO 0);  -- sfix17_En11
  SIGNAL Subtract26_sub_cast              : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract26_sub_cast_1            : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract26_sub_cast_2            : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract26_sub_temp              : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract26_out1                  : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract26_out1_1                : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Product20_out1                   : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Product27_out1_1                 : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Add1_add_cast                    : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL Add1_add_cast_1                  : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL Add1_out1                        : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL Add1_out1_1                      : vector_of_std_logic_vector35(0 TO 15);  -- ufix35 [16]
  SIGNAL Product26_out1_1                 : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Add2_add_cast                    : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL Add2_add_cast_1                  : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL Add2_out1                        : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL Add2_out1_1                      : vector_of_std_logic_vector35(0 TO 15);  -- ufix35 [16]
  SIGNAL Product25_out1_1                 : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Add3_add_cast                    : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL Add3_add_cast_1                  : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL Add3_out1                        : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL Add3_out1_1                      : vector_of_std_logic_vector35(0 TO 15);  -- ufix35 [16]
  SIGNAL Product24_out1_1                 : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Add4_add_cast                    : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL Add4_add_cast_1                  : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL Add4_out1                        : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL Add4_out1_1                      : vector_of_std_logic_vector35(0 TO 15);  -- ufix35 [16]
  SIGNAL Product23_out1_1                 : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Add5_add_cast                    : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL Add5_add_cast_1                  : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL Add5_out1                        : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL Add5_out1_1                      : vector_of_std_logic_vector35(0 TO 15);  -- ufix35 [16]
  SIGNAL Product22_out1_1                 : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Add6_add_cast                    : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL Add6_add_cast_1                  : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL Add6_out1                        : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL Add6_out1_1                      : vector_of_std_logic_vector35(0 TO 15);  -- ufix35 [16]
  SIGNAL Product21_out1_1                 : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Add7_add_cast                    : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL Add7_add_cast_1                  : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL Add7_out1                        : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL Add7_out1_1                      : vector_of_std_logic_vector35(0 TO 15);  -- ufix35 [16]
  SIGNAL Product20_out1_1                 : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Add8_add_cast                    : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL Add8_add_cast_1                  : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL Add8_out1                        : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL Add8_out1_1                      : vector_of_std_logic_vector35(0 TO 15);  -- ufix35 [16]
  SIGNAL Subsystem4_out1                  : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL Subsystem4_out2                  : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL Subsystem4_out3                  : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL Subsystem4_out4                  : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL Subsystem4_out5                  : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL Subsystem4_out6                  : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL Subsystem4_out7                  : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL Subsystem4_out8                  : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL Subsystem4_out1_signed           : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL Subtract9_v                      : signed(16 DOWNTO 0);  -- sfix17_En11
  SIGNAL Subtract9_sub_cast               : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract9_sub_cast_1             : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract9_sub_cast_2             : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract9_sub_temp               : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract9_out1                   : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract9_out1_1                 : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Product8_out1                    : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Product8_out1_1                  : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Subsystem5_out1                  : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL Subsystem5_out2                  : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL Subsystem5_out3                  : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL Subsystem5_out4                  : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL Subsystem5_out5                  : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL Subsystem5_out6                  : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL Subsystem5_out7                  : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL Subsystem5_out8                  : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL Subsystem5_out1_signed           : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL Subtract35_v                     : signed(16 DOWNTO 0);  -- sfix17_En11
  SIGNAL Subtract35_sub_cast              : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract35_sub_cast_1            : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract35_sub_cast_2            : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract35_sub_temp              : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract35_out1                  : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract35_out1_1                : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Product9_out1                    : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Subsystem4_out2_signed           : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL Subtract10_v                     : signed(16 DOWNTO 0);  -- sfix17_En11
  SIGNAL Subtract10_sub_cast              : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract10_sub_cast_1            : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract10_sub_cast_2            : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract10_sub_temp              : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract10_out1                  : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract10_out1_1                : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Product7_out1                    : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Product7_out1_1                  : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Subsystem5_out2_signed           : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL Subtract34_v                     : signed(16 DOWNTO 0);  -- sfix17_En11
  SIGNAL Subtract34_sub_cast              : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract34_sub_cast_1            : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract34_sub_cast_2            : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract34_sub_temp              : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract34_out1                  : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract34_out1_1                : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Product10_out1                   : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Subsystem4_out3_signed           : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL Subtract11_v                     : signed(16 DOWNTO 0);  -- sfix17_En11
  SIGNAL Subtract11_sub_cast              : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract11_sub_cast_1            : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract11_sub_cast_2            : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract11_sub_temp              : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract11_out1                  : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract11_out1_1                : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Product6_out1                    : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Product6_out1_1                  : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Subsystem5_out3_signed           : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL Subtract33_v                     : signed(16 DOWNTO 0);  -- sfix17_En11
  SIGNAL Subtract33_sub_cast              : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract33_sub_cast_1            : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract33_sub_cast_2            : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract33_sub_temp              : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract33_out1                  : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract33_out1_1                : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Product11_out1                   : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Subsystem4_out4_signed           : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL Subtract12_v                     : signed(16 DOWNTO 0);  -- sfix17_En11
  SIGNAL Subtract12_sub_cast              : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract12_sub_cast_1            : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract12_sub_cast_2            : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract12_sub_temp              : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract12_out1                  : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract12_out1_1                : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Product5_out1                    : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Product5_out1_1                  : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Subsystem5_out4_signed           : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL Subtract32_v                     : signed(16 DOWNTO 0);  -- sfix17_En11
  SIGNAL Subtract32_sub_cast              : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract32_sub_cast_1            : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract32_sub_cast_2            : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract32_sub_temp              : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract32_out1                  : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract32_out1_1                : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Product12_out1                   : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Subsystem4_out5_signed           : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL Subtract13_v                     : signed(16 DOWNTO 0);  -- sfix17_En11
  SIGNAL Subtract13_sub_cast              : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract13_sub_cast_1            : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract13_sub_cast_2            : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract13_sub_temp              : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract13_out1                  : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract13_out1_1                : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Product4_out1                    : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Product4_out1_1                  : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Subsystem5_out5_signed           : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL Subtract31_v                     : signed(16 DOWNTO 0);  -- sfix17_En11
  SIGNAL Subtract31_sub_cast              : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract31_sub_cast_1            : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract31_sub_cast_2            : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract31_sub_temp              : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract31_out1                  : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract31_out1_1                : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Product13_out1                   : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Subsystem4_out6_signed           : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL Subtract14_v                     : signed(16 DOWNTO 0);  -- sfix17_En11
  SIGNAL Subtract14_sub_cast              : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract14_sub_cast_1            : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract14_sub_cast_2            : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract14_sub_temp              : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract14_out1                  : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract14_out1_1                : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Product3_out1                    : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Product3_out1_1                  : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Subsystem5_out6_signed           : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL Subtract30_v                     : signed(16 DOWNTO 0);  -- sfix17_En11
  SIGNAL Subtract30_sub_cast              : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract30_sub_cast_1            : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract30_sub_cast_2            : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract30_sub_temp              : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract30_out1                  : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract30_out1_1                : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Product14_out1                   : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Subsystem4_out7_signed           : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL Subtract15_v                     : signed(16 DOWNTO 0);  -- sfix17_En11
  SIGNAL Subtract15_sub_cast              : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract15_sub_cast_1            : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract15_sub_cast_2            : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract15_sub_temp              : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract15_out1                  : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract15_out1_1                : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Product1_out1                    : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Product1_out1_1                  : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Subsystem5_out7_signed           : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL Subtract29_v                     : signed(16 DOWNTO 0);  -- sfix17_En11
  SIGNAL Subtract29_sub_cast              : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract29_sub_cast_1            : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract29_sub_cast_2            : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract29_sub_temp              : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract29_out1                  : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract29_out1_1                : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Product15_out1                   : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Subsystem4_out8_signed           : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL Subtract16_v                     : signed(16 DOWNTO 0);  -- sfix17_En11
  SIGNAL Subtract16_sub_cast              : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract16_sub_cast_1            : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract16_sub_cast_2            : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract16_sub_temp              : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract16_out1                  : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract16_out1_1                : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Product_out1                     : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Product_out1_1                   : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Subsystem5_out8_signed           : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL Subtract27_v                     : signed(16 DOWNTO 0);  -- sfix17_En11
  SIGNAL Subtract27_sub_cast              : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract27_sub_cast_1            : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract27_sub_cast_2            : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract27_sub_temp              : vector_of_signed18(0 TO 15);  -- sfix18_En11 [16]
  SIGNAL Subtract27_out1                  : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Subtract27_out1_1                : vector_of_signed17(0 TO 15);  -- sfix17_En11 [16]
  SIGNAL Product16_out1                   : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Product9_out1_1                  : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Add16_add_cast                   : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL Add16_add_cast_1                 : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL Add16_out1                       : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL Add16_out1_1                     : vector_of_std_logic_vector35(0 TO 15);  -- ufix35 [16]
  SIGNAL Product10_out1_1                 : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Add9_add_cast                    : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL Add9_add_cast_1                  : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL Add9_out1                        : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL Add9_out1_1                      : vector_of_std_logic_vector35(0 TO 15);  -- ufix35 [16]
  SIGNAL Product11_out1_1                 : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Add10_add_cast                   : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL Add10_add_cast_1                 : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL Add10_out1                       : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL Add10_out1_1                     : vector_of_std_logic_vector35(0 TO 15);  -- ufix35 [16]
  SIGNAL Product12_out1_1                 : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Add11_add_cast                   : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL Add11_add_cast_1                 : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL Add11_out1                       : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL Add11_out1_1                     : vector_of_std_logic_vector35(0 TO 15);  -- ufix35 [16]
  SIGNAL Product13_out1_1                 : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Add12_add_cast                   : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL Add12_add_cast_1                 : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL Add12_out1                       : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL Add12_out1_1                     : vector_of_std_logic_vector35(0 TO 15);  -- ufix35 [16]
  SIGNAL Product14_out1_1                 : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Add13_add_cast                   : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL Add13_add_cast_1                 : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL Add13_out1                       : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL Add13_out1_1                     : vector_of_std_logic_vector35(0 TO 15);  -- ufix35 [16]
  SIGNAL Product15_out1_1                 : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Add14_add_cast                   : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL Add14_add_cast_1                 : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL Add14_out1                       : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL Add14_out1_1                     : vector_of_std_logic_vector35(0 TO 15);  -- ufix35 [16]
  SIGNAL Product16_out1_1                 : vector_of_signed34(0 TO 15);  -- sfix34_En22 [16]
  SIGNAL Add15_add_cast                   : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL Add15_add_cast_1                 : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL Add15_out1                       : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL Add15_out1_1                     : vector_of_std_logic_vector35(0 TO 15);  -- ufix35 [16]
  SIGNAL Subsystem2_out1                  : vector_of_std_logic_vector35(0 TO 15);  -- ufix35 [16]
  SIGNAL Subsystem2_out1_signed           : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL Subsystem1_out1                  : vector_of_std_logic_vector35(0 TO 15);  -- ufix35 [16]
  SIGNAL Subsystem1_out1_signed           : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL Subtract18_sub_cast              : vector_of_signed36(0 TO 15);  -- sfix36_En22 [16]
  SIGNAL Subtract18_sub_cast_1            : vector_of_signed36(0 TO 15);  -- sfix36_En22 [16]
  SIGNAL Subtract18_out1                  : vector_of_signed36(0 TO 15);  -- sfix36_En22 [16]
  SIGNAL Subtract18_out1_1                : vector_of_signed36(0 TO 15);  -- sfix36_En22 [16]
  SIGNAL LLR_Scale_unsigned               : unsigned(31 DOWNTO 0);  -- ufix32_En22
  SIGNAL HwModeRegister25_reg             : vector_of_unsigned32(0 TO 12);  -- ufix32 [13]
  SIGNAL LLR_Scale_1                      : unsigned(31 DOWNTO 0);  -- ufix32_En22
  SIGNAL Product2_cast                    : vector_of_signed33(0 TO 15);  -- sfix33_En22 [16]
  SIGNAL Product2_mul_temp                : vector_of_signed69(0 TO 15);  -- sfix69_En44 [16]
  SIGNAL Product2_out1                    : vector_of_signed68(0 TO 15);  -- sfix68_En44 [16]
  SIGNAL Product2_out1_0                  : signed(67 DOWNTO 0);  -- sfix68_En44
  SIGNAL Product2_out1_1                  : signed(67 DOWNTO 0);  -- sfix68_En44
  SIGNAL Product2_out1_2                  : signed(67 DOWNTO 0);  -- sfix68_En44
  SIGNAL Product2_out1_3                  : signed(67 DOWNTO 0);  -- sfix68_En44
  SIGNAL Product2_out1_4                  : signed(67 DOWNTO 0);  -- sfix68_En44
  SIGNAL Product2_out1_5                  : signed(67 DOWNTO 0);  -- sfix68_En44
  SIGNAL Product2_out1_6                  : signed(67 DOWNTO 0);  -- sfix68_En44
  SIGNAL Product2_out1_7                  : signed(67 DOWNTO 0);  -- sfix68_En44
  SIGNAL Product2_out1_8                  : signed(67 DOWNTO 0);  -- sfix68_En44
  SIGNAL Product2_out1_9                  : signed(67 DOWNTO 0);  -- sfix68_En44
  SIGNAL Product2_out1_10                 : signed(67 DOWNTO 0);  -- sfix68_En44
  SIGNAL Product2_out1_11                 : signed(67 DOWNTO 0);  -- sfix68_En44
  SIGNAL Product2_out1_12                 : signed(67 DOWNTO 0);  -- sfix68_En44
  SIGNAL Product2_out1_13                 : signed(67 DOWNTO 0);  -- sfix68_En44
  SIGNAL Product2_out1_14                 : signed(67 DOWNTO 0);  -- sfix68_En44
  SIGNAL Product2_out1_15                 : signed(67 DOWNTO 0);  -- sfix68_En44
  SIGNAL PipelineRegister12_out_1         : signed(67 DOWNTO 0);  -- sfix68_En44
  SIGNAL PipelineRegister12_1_reg         : vector_of_signed68(0 TO 2);  -- sfix68 [3]
  SIGNAL PipelineRegister12_out_2         : signed(67 DOWNTO 0);  -- sfix68_En44
  SIGNAL PipelineRegister12_out_3         : signed(67 DOWNTO 0);  -- sfix68_En44
  SIGNAL PipelineRegister12_out_4         : signed(67 DOWNTO 0);  -- sfix68_En44
  SIGNAL PipelineRegister12_out_5         : signed(67 DOWNTO 0);  -- sfix68_En44
  SIGNAL PipelineRegister12_out_6         : signed(67 DOWNTO 0);  -- sfix68_En44
  SIGNAL PipelineRegister12_out_7         : signed(67 DOWNTO 0);  -- sfix68_En44
  SIGNAL PipelineRegister12_out_8         : signed(67 DOWNTO 0);  -- sfix68_En44
  SIGNAL PipelineRegister12_out_9         : signed(67 DOWNTO 0);  -- sfix68_En44
  SIGNAL PipelineRegister12_out_10        : signed(67 DOWNTO 0);  -- sfix68_En44
  SIGNAL PipelineRegister12_out_11        : signed(67 DOWNTO 0);  -- sfix68_En44
  SIGNAL PipelineRegister12_out_12        : signed(67 DOWNTO 0);  -- sfix68_En44
  SIGNAL PipelineRegister12_out_13        : signed(67 DOWNTO 0);  -- sfix68_En44
  SIGNAL PipelineRegister12_out_14        : signed(67 DOWNTO 0);  -- sfix68_En44
  SIGNAL PipelineRegister12_out_15        : signed(67 DOWNTO 0);  -- sfix68_En44
  SIGNAL PipelineRegister12_out_16        : signed(67 DOWNTO 0);  -- sfix68_En44
  SIGNAL PipelineRegister12_1_reg_1       : vector_of_signed68(0 TO 2);  -- sfix68 [3]
  SIGNAL PipelineRegister12_1_reg_2       : vector_of_signed68(0 TO 2);  -- sfix68 [3]
  SIGNAL PipelineRegister12_1_reg_3       : vector_of_signed68(0 TO 2);  -- sfix68 [3]
  SIGNAL PipelineRegister12_1_reg_4       : vector_of_signed68(0 TO 2);  -- sfix68 [3]
  SIGNAL PipelineRegister12_1_reg_5       : vector_of_signed68(0 TO 2);  -- sfix68 [3]
  SIGNAL PipelineRegister12_1_reg_6       : vector_of_signed68(0 TO 2);  -- sfix68 [3]
  SIGNAL PipelineRegister12_1_reg_7       : vector_of_signed68(0 TO 2);  -- sfix68 [3]
  SIGNAL PipelineRegister12_1_reg_8       : vector_of_signed68(0 TO 2);  -- sfix68 [3]
  SIGNAL PipelineRegister12_1_reg_9       : vector_of_signed68(0 TO 2);  -- sfix68 [3]
  SIGNAL PipelineRegister12_1_reg_10      : vector_of_signed68(0 TO 2);  -- sfix68 [3]
  SIGNAL PipelineRegister12_1_reg_11      : vector_of_signed68(0 TO 2);  -- sfix68 [3]
  SIGNAL PipelineRegister12_1_reg_12      : vector_of_signed68(0 TO 2);  -- sfix68 [3]
  SIGNAL PipelineRegister12_1_reg_13      : vector_of_signed68(0 TO 2);  -- sfix68 [3]
  SIGNAL PipelineRegister12_1_reg_14      : vector_of_signed68(0 TO 2);  -- sfix68 [3]
  SIGNAL PipelineRegister12_1_reg_15      : vector_of_signed68(0 TO 2);  -- sfix68 [3]
  SIGNAL Product2_out1_16                 : vector_of_signed68(0 TO 15);  -- sfix68_En44 [16]
  SIGNAL Product2_out1_17                 : vector_of_signed68(0 TO 15);  -- sfix68_En22 [16]
  SIGNAL Product2_out1_18                 : vector_of_std_logic_vector68(0 TO 15);  -- ufix68 [16]
  SIGNAL symmetric_saturation_out1        : vector_of_std_logic_vector6(0 TO 15);  -- ufix6 [16]
  SIGNAL y_1                              : vector_of_std_logic_vector8(0 TO 15);  -- ufix8 [16]
  SIGNAL y_unsigned                       : vector_of_unsigned8(0 TO 15);  -- uint8 [16]
  SIGNAL y_2                              : vector_of_unsigned8(0 TO 15);  -- uint8 [16]

BEGIN
  -- zeros
  -- 
  -- ones

  u_Subsystem3 : soft_demodulation_src_Subsystem3
    PORT MAP( clk => clk,
              enb => enb,
              enb_1 => std_logic_vector(HDL_Counter_out1),  -- ufix2
              Out1 => Subsystem3_out1,  -- sfix3
              Out2 => Subsystem3_out2,  -- sfix3
              Out3 => Subsystem3_out3,  -- sfix3
              Out4 => Subsystem3_out4,  -- sfix3
              Out5 => Subsystem3_out5,  -- sfix3
              Out6 => Subsystem3_out6,  -- sfix3
              Out7 => Subsystem3_out7,  -- sfix3
              Out8 => Subsystem3_out8  -- sfix3
              );

  u_Subsystem6 : soft_demodulation_src_Subsystem6
    PORT MAP( clk => clk,
              enb => enb,
              enb_1 => std_logic_vector(HDL_Counter_out1),  -- ufix2
              Out1 => Subsystem6_out1,  -- sfix3
              Out2 => Subsystem6_out2,  -- sfix3
              Out3 => Subsystem6_out3,  -- sfix3
              Out4 => Subsystem6_out4,  -- sfix3
              Out5 => Subsystem6_out5,  -- sfix3
              Out6 => Subsystem6_out6,  -- sfix3
              Out7 => Subsystem6_out7,  -- sfix3
              Out8 => Subsystem6_out8  -- sfix3
              );

  u_Subsystem4 : soft_demodulation_src_Subsystem4
    PORT MAP( clk => clk,
              enb => enb,
              enb_1 => std_logic_vector(HDL_Counter_out1),  -- ufix2
              Out1 => Subsystem4_out1,  -- sfix3
              Out2 => Subsystem4_out2,  -- sfix3
              Out3 => Subsystem4_out3,  -- sfix3
              Out4 => Subsystem4_out4,  -- sfix3
              Out5 => Subsystem4_out5,  -- sfix3
              Out6 => Subsystem4_out6,  -- sfix3
              Out7 => Subsystem4_out7,  -- sfix3
              Out8 => Subsystem4_out8  -- sfix3
              );

  u_Subsystem5 : soft_demodulation_src_Subsystem5
    PORT MAP( clk => clk,
              enb => enb,
              enb_1 => std_logic_vector(HDL_Counter_out1),  -- ufix2
              Out1 => Subsystem5_out1,  -- sfix3
              Out2 => Subsystem5_out2,  -- sfix3
              Out3 => Subsystem5_out3,  -- sfix3
              Out4 => Subsystem5_out4,  -- sfix3
              Out5 => Subsystem5_out5,  -- sfix3
              Out6 => Subsystem5_out6,  -- sfix3
              Out7 => Subsystem5_out7,  -- sfix3
              Out8 => Subsystem5_out8  -- sfix3
              );

  u_Subsystem2 : soft_demodulation_src_Subsystem2
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              a => Add1_out1_1,  -- sfix35_En22 [16]
              b => Add2_out1_1,  -- sfix35_En22 [16]
              a1 => Add3_out1_1,  -- sfix35_En22 [16]
              b1 => Add4_out1_1,  -- sfix35_En22 [16]
              a2 => Add5_out1_1,  -- sfix35_En22 [16]
              b2 => Add6_out1_1,  -- sfix35_En22 [16]
              a3 => Add7_out1_1,  -- sfix35_En22 [16]
              b3 => Add8_out1_1,  -- sfix35_En22 [16]
              min => Subsystem2_out1  -- sfix35_En22 [16]
              );

  u_Subsystem1 : soft_demodulation_src_Subsystem1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              a => Add16_out1_1,  -- sfix35_En22 [16]
              b => Add9_out1_1,  -- sfix35_En22 [16]
              a1 => Add10_out1_1,  -- sfix35_En22 [16]
              b1 => Add11_out1_1,  -- sfix35_En22 [16]
              a2 => Add12_out1_1,  -- sfix35_En22 [16]
              b2 => Add13_out1_1,  -- sfix35_En22 [16]
              a3 => Add14_out1_1,  -- sfix35_En22 [16]
              b3 => Add15_out1_1,  -- sfix35_En22 [16]
              min => Subsystem1_out1  -- sfix35_En22 [16]
              );

  u_symmetric_saturation : soft_demodulation_src_symmetric_saturation
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              In1 => Product2_out1_18,  -- sfix68_En22 [16]
              Out1 => symmetric_saturation_out1  -- sfix6_En2 [16]
              );

  u_sign_extend : soft_demodulation_src_sign_extend
    PORT MAP( u => symmetric_saturation_out1,  -- sfix6_En2 [16]
              y => y_1  -- uint8 [16]
              );

  outputgen22: FOR k IN 0 TO 15 GENERATE
    imag_unsigned(k) <= unsigned(imag(k));
  END GENERATE;

  in_2_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Y <= (OTHERS => to_unsigned(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Y <= imag_unsigned;
      END IF;
    END IF;
  END PROCESS in_2_pipe_process;



  Data_Type_Conversion_out1_gen: FOR ii IN 0 TO 15 GENERATE
    Data_Type_Conversion_out1(ii) <= signed(Y(ii));
  END GENERATE Data_Type_Conversion_out1_gen;


  reduced_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Data_Type_Conversion_out1_1 <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Data_Type_Conversion_out1_1 <= Data_Type_Conversion_out1;
      END IF;
    END IF;
  END PROCESS reduced_process;


  in_0_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      valid_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        valid_1 <= valid;
      END IF;
    END IF;
  END PROCESS in_0_pipe_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 3
  HDL_Counter_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter_out1 <= to_unsigned(16#0#, 2);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND valid_1 = '1' THEN
        HDL_Counter_out1 <= HDL_Counter_out1 + to_unsigned(16#1#, 2);
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  Subsystem3_out1_signed <= signed(Subsystem3_out1);

  Subtract2_v <= resize(Subsystem3_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 17);

  Subtract2_out1_gen: FOR t_0 IN 0 TO 15 GENERATE
    Subtract2_sub_cast(t_0) <= resize(Data_Type_Conversion_out1_1(t_0), 17);
    Subtract2_sub_cast_1(t_0) <= resize(Subtract2_sub_cast(t_0), 18);
    Subtract2_sub_cast_2(t_0) <= resize(Subtract2_v, 18);
    Subtract2_sub_temp(t_0) <= Subtract2_sub_cast_1(t_0) - Subtract2_sub_cast_2(t_0);
    
    Subtract2_out1(t_0) <= "01111111111111111" WHEN (Subtract2_sub_temp(t_0)(17) = '0') AND (Subtract2_sub_temp(t_0)(16) /= '0') ELSE
        "10000000000000000" WHEN (Subtract2_sub_temp(t_0)(17) = '1') AND (Subtract2_sub_temp(t_0)(16) /= '1') ELSE
        Subtract2_sub_temp(t_0)(16 DOWNTO 0);
  END GENERATE Subtract2_out1_gen;


  reduced_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Subtract2_out1_1 <= (OTHERS => to_signed(16#00000#, 17));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Subtract2_out1_1 <= Subtract2_out1;
      END IF;
    END IF;
  END PROCESS reduced_1_process;



  Product32_out1_gen: FOR t_01 IN 0 TO 15 GENERATE
    Product32_out1(t_01) <= Subtract2_out1_1(t_01) * Subtract2_out1_1(t_01);
  END GENERATE Product32_out1_gen;


  PipelineRegister26_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product32_out1_1 <= (OTHERS => to_signed(0, 34));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product32_out1_1 <= Product32_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister26_process;


  outputgen21: FOR k IN 0 TO 15 GENERATE
    real_unsigned(k) <= unsigned(real_rsvd(k));
  END GENERATE;

  in_1_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      X <= (OTHERS => to_unsigned(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        X <= real_unsigned;
      END IF;
    END IF;
  END PROCESS in_1_pipe_process;



  Data_Type_Conversion1_out1_gen: FOR ii1 IN 0 TO 15 GENERATE
    Data_Type_Conversion1_out1(ii1) <= signed(X(ii1));
  END GENERATE Data_Type_Conversion1_out1_gen;


  reduced_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Data_Type_Conversion1_out1_1 <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Data_Type_Conversion1_out1_1 <= Data_Type_Conversion1_out1;
      END IF;
    END IF;
  END PROCESS reduced_2_process;


  Subsystem6_out1_signed <= signed(Subsystem6_out1);

  Subtract19_v <= resize(Subsystem6_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 17);

  Subtract19_out1_gen: FOR t_02 IN 0 TO 15 GENERATE
    Subtract19_sub_cast(t_02) <= resize(Data_Type_Conversion1_out1_1(t_02), 17);
    Subtract19_sub_cast_1(t_02) <= resize(Subtract19_sub_cast(t_02), 18);
    Subtract19_sub_cast_2(t_02) <= resize(Subtract19_v, 18);
    Subtract19_sub_temp(t_02) <= Subtract19_sub_cast_1(t_02) - Subtract19_sub_cast_2(t_02);
    
    Subtract19_out1(t_02) <= "01111111111111111" WHEN (Subtract19_sub_temp(t_02)(17) = '0') AND (Subtract19_sub_temp(t_02)(16) /= '0') ELSE
        "10000000000000000" WHEN (Subtract19_sub_temp(t_02)(17) = '1') AND (Subtract19_sub_temp(t_02)(16) /= '1') ELSE
        Subtract19_sub_temp(t_02)(16 DOWNTO 0);
  END GENERATE Subtract19_out1_gen;


  reduced_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Subtract19_out1_1 <= (OTHERS => to_signed(16#00000#, 17));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Subtract19_out1_1 <= Subtract19_out1;
      END IF;
    END IF;
  END PROCESS reduced_3_process;



  Product27_out1_gen: FOR t_03 IN 0 TO 15 GENERATE
    Product27_out1(t_03) <= Subtract19_out1_1(t_03) * Subtract19_out1_1(t_03);
  END GENERATE Product27_out1_gen;


  Subsystem3_out2_signed <= signed(Subsystem3_out2);

  Subtract3_v <= resize(Subsystem3_out2_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 17);

  Subtract3_out1_gen: FOR t_04 IN 0 TO 15 GENERATE
    Subtract3_sub_cast(t_04) <= resize(Data_Type_Conversion_out1_1(t_04), 17);
    Subtract3_sub_cast_1(t_04) <= resize(Subtract3_sub_cast(t_04), 18);
    Subtract3_sub_cast_2(t_04) <= resize(Subtract3_v, 18);
    Subtract3_sub_temp(t_04) <= Subtract3_sub_cast_1(t_04) - Subtract3_sub_cast_2(t_04);
    
    Subtract3_out1(t_04) <= "01111111111111111" WHEN (Subtract3_sub_temp(t_04)(17) = '0') AND (Subtract3_sub_temp(t_04)(16) /= '0') ELSE
        "10000000000000000" WHEN (Subtract3_sub_temp(t_04)(17) = '1') AND (Subtract3_sub_temp(t_04)(16) /= '1') ELSE
        Subtract3_sub_temp(t_04)(16 DOWNTO 0);
  END GENERATE Subtract3_out1_gen;


  reduced_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Subtract3_out1_1 <= (OTHERS => to_signed(16#00000#, 17));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Subtract3_out1_1 <= Subtract3_out1;
      END IF;
    END IF;
  END PROCESS reduced_4_process;



  Product31_out1_gen: FOR t_05 IN 0 TO 15 GENERATE
    Product31_out1(t_05) <= Subtract3_out1_1(t_05) * Subtract3_out1_1(t_05);
  END GENERATE Product31_out1_gen;


  PipelineRegister25_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product31_out1_1 <= (OTHERS => to_signed(0, 34));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product31_out1_1 <= Product31_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister25_process;


  Subsystem6_out2_signed <= signed(Subsystem6_out2);

  Subtract20_v <= resize(Subsystem6_out2_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 17);

  Subtract20_out1_gen: FOR t_06 IN 0 TO 15 GENERATE
    Subtract20_sub_cast(t_06) <= resize(Data_Type_Conversion1_out1_1(t_06), 17);
    Subtract20_sub_cast_1(t_06) <= resize(Subtract20_sub_cast(t_06), 18);
    Subtract20_sub_cast_2(t_06) <= resize(Subtract20_v, 18);
    Subtract20_sub_temp(t_06) <= Subtract20_sub_cast_1(t_06) - Subtract20_sub_cast_2(t_06);
    
    Subtract20_out1(t_06) <= "01111111111111111" WHEN (Subtract20_sub_temp(t_06)(17) = '0') AND (Subtract20_sub_temp(t_06)(16) /= '0') ELSE
        "10000000000000000" WHEN (Subtract20_sub_temp(t_06)(17) = '1') AND (Subtract20_sub_temp(t_06)(16) /= '1') ELSE
        Subtract20_sub_temp(t_06)(16 DOWNTO 0);
  END GENERATE Subtract20_out1_gen;


  reduced_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Subtract20_out1_1 <= (OTHERS => to_signed(16#00000#, 17));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Subtract20_out1_1 <= Subtract20_out1;
      END IF;
    END IF;
  END PROCESS reduced_5_process;



  Product26_out1_gen: FOR t_07 IN 0 TO 15 GENERATE
    Product26_out1(t_07) <= Subtract20_out1_1(t_07) * Subtract20_out1_1(t_07);
  END GENERATE Product26_out1_gen;


  Subsystem3_out3_signed <= signed(Subsystem3_out3);

  Subtract1_v <= resize(Subsystem3_out3_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 17);

  Subtract1_out1_gen: FOR t_08 IN 0 TO 15 GENERATE
    Subtract1_sub_cast(t_08) <= resize(Data_Type_Conversion_out1_1(t_08), 17);
    Subtract1_sub_cast_1(t_08) <= resize(Subtract1_sub_cast(t_08), 18);
    Subtract1_sub_cast_2(t_08) <= resize(Subtract1_v, 18);
    Subtract1_sub_temp(t_08) <= Subtract1_sub_cast_1(t_08) - Subtract1_sub_cast_2(t_08);
    
    Subtract1_out1(t_08) <= "01111111111111111" WHEN (Subtract1_sub_temp(t_08)(17) = '0') AND (Subtract1_sub_temp(t_08)(16) /= '0') ELSE
        "10000000000000000" WHEN (Subtract1_sub_temp(t_08)(17) = '1') AND (Subtract1_sub_temp(t_08)(16) /= '1') ELSE
        Subtract1_sub_temp(t_08)(16 DOWNTO 0);
  END GENERATE Subtract1_out1_gen;


  reduced_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Subtract1_out1_1 <= (OTHERS => to_signed(16#00000#, 17));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Subtract1_out1_1 <= Subtract1_out1;
      END IF;
    END IF;
  END PROCESS reduced_6_process;



  Product30_out1_gen: FOR t_09 IN 0 TO 15 GENERATE
    Product30_out1(t_09) <= Subtract1_out1_1(t_09) * Subtract1_out1_1(t_09);
  END GENERATE Product30_out1_gen;


  PipelineRegister24_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product30_out1_1 <= (OTHERS => to_signed(0, 34));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product30_out1_1 <= Product30_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister24_process;


  Subsystem6_out3_signed <= signed(Subsystem6_out3);

  Subtract21_v <= resize(Subsystem6_out3_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 17);

  Subtract21_out1_gen: FOR t_010 IN 0 TO 15 GENERATE
    Subtract21_sub_cast(t_010) <= resize(Data_Type_Conversion1_out1_1(t_010), 17);
    Subtract21_sub_cast_1(t_010) <= resize(Subtract21_sub_cast(t_010), 18);
    Subtract21_sub_cast_2(t_010) <= resize(Subtract21_v, 18);
    Subtract21_sub_temp(t_010) <= Subtract21_sub_cast_1(t_010) - Subtract21_sub_cast_2(t_010);
    
    Subtract21_out1(t_010) <= "01111111111111111" WHEN (Subtract21_sub_temp(t_010)(17) = '0') AND (Subtract21_sub_temp(t_010)(16) /= '0') ELSE
        "10000000000000000" WHEN (Subtract21_sub_temp(t_010)(17) = '1') AND (Subtract21_sub_temp(t_010)(16) /= '1') ELSE
        Subtract21_sub_temp(t_010)(16 DOWNTO 0);
  END GENERATE Subtract21_out1_gen;


  reduced_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Subtract21_out1_1 <= (OTHERS => to_signed(16#00000#, 17));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Subtract21_out1_1 <= Subtract21_out1;
      END IF;
    END IF;
  END PROCESS reduced_7_process;



  Product25_out1_gen: FOR t_011 IN 0 TO 15 GENERATE
    Product25_out1(t_011) <= Subtract21_out1_1(t_011) * Subtract21_out1_1(t_011);
  END GENERATE Product25_out1_gen;


  Subsystem3_out4_signed <= signed(Subsystem3_out4);

  Subtract4_v <= resize(Subsystem3_out4_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 17);

  Subtract4_out1_gen: FOR t_012 IN 0 TO 15 GENERATE
    Subtract4_sub_cast(t_012) <= resize(Data_Type_Conversion_out1_1(t_012), 17);
    Subtract4_sub_cast_1(t_012) <= resize(Subtract4_sub_cast(t_012), 18);
    Subtract4_sub_cast_2(t_012) <= resize(Subtract4_v, 18);
    Subtract4_sub_temp(t_012) <= Subtract4_sub_cast_1(t_012) - Subtract4_sub_cast_2(t_012);
    
    Subtract4_out1(t_012) <= "01111111111111111" WHEN (Subtract4_sub_temp(t_012)(17) = '0') AND (Subtract4_sub_temp(t_012)(16) /= '0') ELSE
        "10000000000000000" WHEN (Subtract4_sub_temp(t_012)(17) = '1') AND (Subtract4_sub_temp(t_012)(16) /= '1') ELSE
        Subtract4_sub_temp(t_012)(16 DOWNTO 0);
  END GENERATE Subtract4_out1_gen;


  reduced_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Subtract4_out1_1 <= (OTHERS => to_signed(16#00000#, 17));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Subtract4_out1_1 <= Subtract4_out1;
      END IF;
    END IF;
  END PROCESS reduced_8_process;



  Product29_out1_gen: FOR t_013 IN 0 TO 15 GENERATE
    Product29_out1(t_013) <= Subtract4_out1_1(t_013) * Subtract4_out1_1(t_013);
  END GENERATE Product29_out1_gen;


  PipelineRegister22_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product29_out1_1 <= (OTHERS => to_signed(0, 34));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product29_out1_1 <= Product29_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister22_process;


  Subsystem6_out4_signed <= signed(Subsystem6_out4);

  Subtract22_v <= resize(Subsystem6_out4_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 17);

  Subtract22_out1_gen: FOR t_014 IN 0 TO 15 GENERATE
    Subtract22_sub_cast(t_014) <= resize(Data_Type_Conversion1_out1_1(t_014), 17);
    Subtract22_sub_cast_1(t_014) <= resize(Subtract22_sub_cast(t_014), 18);
    Subtract22_sub_cast_2(t_014) <= resize(Subtract22_v, 18);
    Subtract22_sub_temp(t_014) <= Subtract22_sub_cast_1(t_014) - Subtract22_sub_cast_2(t_014);
    
    Subtract22_out1(t_014) <= "01111111111111111" WHEN (Subtract22_sub_temp(t_014)(17) = '0') AND (Subtract22_sub_temp(t_014)(16) /= '0') ELSE
        "10000000000000000" WHEN (Subtract22_sub_temp(t_014)(17) = '1') AND (Subtract22_sub_temp(t_014)(16) /= '1') ELSE
        Subtract22_sub_temp(t_014)(16 DOWNTO 0);
  END GENERATE Subtract22_out1_gen;


  reduced_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Subtract22_out1_1 <= (OTHERS => to_signed(16#00000#, 17));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Subtract22_out1_1 <= Subtract22_out1;
      END IF;
    END IF;
  END PROCESS reduced_9_process;



  Product24_out1_gen: FOR t_015 IN 0 TO 15 GENERATE
    Product24_out1(t_015) <= Subtract22_out1_1(t_015) * Subtract22_out1_1(t_015);
  END GENERATE Product24_out1_gen;


  Subsystem3_out5_signed <= signed(Subsystem3_out5);

  Subtract5_v <= resize(Subsystem3_out5_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 17);

  Subtract5_out1_gen: FOR t_016 IN 0 TO 15 GENERATE
    Subtract5_sub_cast(t_016) <= resize(Data_Type_Conversion_out1_1(t_016), 17);
    Subtract5_sub_cast_1(t_016) <= resize(Subtract5_sub_cast(t_016), 18);
    Subtract5_sub_cast_2(t_016) <= resize(Subtract5_v, 18);
    Subtract5_sub_temp(t_016) <= Subtract5_sub_cast_1(t_016) - Subtract5_sub_cast_2(t_016);
    
    Subtract5_out1(t_016) <= "01111111111111111" WHEN (Subtract5_sub_temp(t_016)(17) = '0') AND (Subtract5_sub_temp(t_016)(16) /= '0') ELSE
        "10000000000000000" WHEN (Subtract5_sub_temp(t_016)(17) = '1') AND (Subtract5_sub_temp(t_016)(16) /= '1') ELSE
        Subtract5_sub_temp(t_016)(16 DOWNTO 0);
  END GENERATE Subtract5_out1_gen;


  reduced_10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Subtract5_out1_1 <= (OTHERS => to_signed(16#00000#, 17));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Subtract5_out1_1 <= Subtract5_out1;
      END IF;
    END IF;
  END PROCESS reduced_10_process;



  Product28_out1_gen: FOR t_017 IN 0 TO 15 GENERATE
    Product28_out1(t_017) <= Subtract5_out1_1(t_017) * Subtract5_out1_1(t_017);
  END GENERATE Product28_out1_gen;


  PipelineRegister21_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product28_out1_1 <= (OTHERS => to_signed(0, 34));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product28_out1_1 <= Product28_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister21_process;


  Subsystem6_out5_signed <= signed(Subsystem6_out5);

  Subtract23_v <= resize(Subsystem6_out5_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 17);

  Subtract23_out1_gen: FOR t_018 IN 0 TO 15 GENERATE
    Subtract23_sub_cast(t_018) <= resize(Data_Type_Conversion1_out1_1(t_018), 17);
    Subtract23_sub_cast_1(t_018) <= resize(Subtract23_sub_cast(t_018), 18);
    Subtract23_sub_cast_2(t_018) <= resize(Subtract23_v, 18);
    Subtract23_sub_temp(t_018) <= Subtract23_sub_cast_1(t_018) - Subtract23_sub_cast_2(t_018);
    
    Subtract23_out1(t_018) <= "01111111111111111" WHEN (Subtract23_sub_temp(t_018)(17) = '0') AND (Subtract23_sub_temp(t_018)(16) /= '0') ELSE
        "10000000000000000" WHEN (Subtract23_sub_temp(t_018)(17) = '1') AND (Subtract23_sub_temp(t_018)(16) /= '1') ELSE
        Subtract23_sub_temp(t_018)(16 DOWNTO 0);
  END GENERATE Subtract23_out1_gen;


  reduced_11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Subtract23_out1_1 <= (OTHERS => to_signed(16#00000#, 17));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Subtract23_out1_1 <= Subtract23_out1;
      END IF;
    END IF;
  END PROCESS reduced_11_process;



  Product23_out1_gen: FOR t_019 IN 0 TO 15 GENERATE
    Product23_out1(t_019) <= Subtract23_out1_1(t_019) * Subtract23_out1_1(t_019);
  END GENERATE Product23_out1_gen;


  Subsystem3_out6_signed <= signed(Subsystem3_out6);

  Subtract6_v <= resize(Subsystem3_out6_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 17);

  Subtract6_out1_gen: FOR t_020 IN 0 TO 15 GENERATE
    Subtract6_sub_cast(t_020) <= resize(Data_Type_Conversion_out1_1(t_020), 17);
    Subtract6_sub_cast_1(t_020) <= resize(Subtract6_sub_cast(t_020), 18);
    Subtract6_sub_cast_2(t_020) <= resize(Subtract6_v, 18);
    Subtract6_sub_temp(t_020) <= Subtract6_sub_cast_1(t_020) - Subtract6_sub_cast_2(t_020);
    
    Subtract6_out1(t_020) <= "01111111111111111" WHEN (Subtract6_sub_temp(t_020)(17) = '0') AND (Subtract6_sub_temp(t_020)(16) /= '0') ELSE
        "10000000000000000" WHEN (Subtract6_sub_temp(t_020)(17) = '1') AND (Subtract6_sub_temp(t_020)(16) /= '1') ELSE
        Subtract6_sub_temp(t_020)(16 DOWNTO 0);
  END GENERATE Subtract6_out1_gen;


  reduced_12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Subtract6_out1_1 <= (OTHERS => to_signed(16#00000#, 17));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Subtract6_out1_1 <= Subtract6_out1;
      END IF;
    END IF;
  END PROCESS reduced_12_process;



  Product19_out1_gen: FOR t_021 IN 0 TO 15 GENERATE
    Product19_out1(t_021) <= Subtract6_out1_1(t_021) * Subtract6_out1_1(t_021);
  END GENERATE Product19_out1_gen;


  PipelineRegister11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product19_out1_1 <= (OTHERS => to_signed(0, 34));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product19_out1_1 <= Product19_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister11_process;


  Subsystem6_out6_signed <= signed(Subsystem6_out6);

  Subtract24_v <= resize(Subsystem6_out6_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 17);

  Subtract24_out1_gen: FOR t_022 IN 0 TO 15 GENERATE
    Subtract24_sub_cast(t_022) <= resize(Data_Type_Conversion1_out1_1(t_022), 17);
    Subtract24_sub_cast_1(t_022) <= resize(Subtract24_sub_cast(t_022), 18);
    Subtract24_sub_cast_2(t_022) <= resize(Subtract24_v, 18);
    Subtract24_sub_temp(t_022) <= Subtract24_sub_cast_1(t_022) - Subtract24_sub_cast_2(t_022);
    
    Subtract24_out1(t_022) <= "01111111111111111" WHEN (Subtract24_sub_temp(t_022)(17) = '0') AND (Subtract24_sub_temp(t_022)(16) /= '0') ELSE
        "10000000000000000" WHEN (Subtract24_sub_temp(t_022)(17) = '1') AND (Subtract24_sub_temp(t_022)(16) /= '1') ELSE
        Subtract24_sub_temp(t_022)(16 DOWNTO 0);
  END GENERATE Subtract24_out1_gen;


  reduced_13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Subtract24_out1_1 <= (OTHERS => to_signed(16#00000#, 17));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Subtract24_out1_1 <= Subtract24_out1;
      END IF;
    END IF;
  END PROCESS reduced_13_process;



  Product22_out1_gen: FOR t_023 IN 0 TO 15 GENERATE
    Product22_out1(t_023) <= Subtract24_out1_1(t_023) * Subtract24_out1_1(t_023);
  END GENERATE Product22_out1_gen;


  Subsystem3_out7_signed <= signed(Subsystem3_out7);

  Subtract7_v <= resize(Subsystem3_out7_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 17);

  Subtract7_out1_gen: FOR t_024 IN 0 TO 15 GENERATE
    Subtract7_sub_cast(t_024) <= resize(Data_Type_Conversion_out1_1(t_024), 17);
    Subtract7_sub_cast_1(t_024) <= resize(Subtract7_sub_cast(t_024), 18);
    Subtract7_sub_cast_2(t_024) <= resize(Subtract7_v, 18);
    Subtract7_sub_temp(t_024) <= Subtract7_sub_cast_1(t_024) - Subtract7_sub_cast_2(t_024);
    
    Subtract7_out1(t_024) <= "01111111111111111" WHEN (Subtract7_sub_temp(t_024)(17) = '0') AND (Subtract7_sub_temp(t_024)(16) /= '0') ELSE
        "10000000000000000" WHEN (Subtract7_sub_temp(t_024)(17) = '1') AND (Subtract7_sub_temp(t_024)(16) /= '1') ELSE
        Subtract7_sub_temp(t_024)(16 DOWNTO 0);
  END GENERATE Subtract7_out1_gen;


  reduced_14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Subtract7_out1_1 <= (OTHERS => to_signed(16#00000#, 17));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Subtract7_out1_1 <= Subtract7_out1;
      END IF;
    END IF;
  END PROCESS reduced_14_process;



  Product18_out1_gen: FOR t_025 IN 0 TO 15 GENERATE
    Product18_out1(t_025) <= Subtract7_out1_1(t_025) * Subtract7_out1_1(t_025);
  END GENERATE Product18_out1_gen;


  PipelineRegister10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product18_out1_1 <= (OTHERS => to_signed(0, 34));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product18_out1_1 <= Product18_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister10_process;


  Subsystem6_out7_signed <= signed(Subsystem6_out7);

  Subtract25_v <= resize(Subsystem6_out7_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 17);

  Subtract25_out1_gen: FOR t_026 IN 0 TO 15 GENERATE
    Subtract25_sub_cast(t_026) <= resize(Data_Type_Conversion1_out1_1(t_026), 17);
    Subtract25_sub_cast_1(t_026) <= resize(Subtract25_sub_cast(t_026), 18);
    Subtract25_sub_cast_2(t_026) <= resize(Subtract25_v, 18);
    Subtract25_sub_temp(t_026) <= Subtract25_sub_cast_1(t_026) - Subtract25_sub_cast_2(t_026);
    
    Subtract25_out1(t_026) <= "01111111111111111" WHEN (Subtract25_sub_temp(t_026)(17) = '0') AND (Subtract25_sub_temp(t_026)(16) /= '0') ELSE
        "10000000000000000" WHEN (Subtract25_sub_temp(t_026)(17) = '1') AND (Subtract25_sub_temp(t_026)(16) /= '1') ELSE
        Subtract25_sub_temp(t_026)(16 DOWNTO 0);
  END GENERATE Subtract25_out1_gen;


  reduced_15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Subtract25_out1_1 <= (OTHERS => to_signed(16#00000#, 17));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Subtract25_out1_1 <= Subtract25_out1;
      END IF;
    END IF;
  END PROCESS reduced_15_process;



  Product21_out1_gen: FOR t_027 IN 0 TO 15 GENERATE
    Product21_out1(t_027) <= Subtract25_out1_1(t_027) * Subtract25_out1_1(t_027);
  END GENERATE Product21_out1_gen;


  Subsystem3_out8_signed <= signed(Subsystem3_out8);

  Subtract8_v <= resize(Subsystem3_out8_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 17);

  Subtract8_out1_gen: FOR t_028 IN 0 TO 15 GENERATE
    Subtract8_sub_cast(t_028) <= resize(Data_Type_Conversion_out1_1(t_028), 17);
    Subtract8_sub_cast_1(t_028) <= resize(Subtract8_sub_cast(t_028), 18);
    Subtract8_sub_cast_2(t_028) <= resize(Subtract8_v, 18);
    Subtract8_sub_temp(t_028) <= Subtract8_sub_cast_1(t_028) - Subtract8_sub_cast_2(t_028);
    
    Subtract8_out1(t_028) <= "01111111111111111" WHEN (Subtract8_sub_temp(t_028)(17) = '0') AND (Subtract8_sub_temp(t_028)(16) /= '0') ELSE
        "10000000000000000" WHEN (Subtract8_sub_temp(t_028)(17) = '1') AND (Subtract8_sub_temp(t_028)(16) /= '1') ELSE
        Subtract8_sub_temp(t_028)(16 DOWNTO 0);
  END GENERATE Subtract8_out1_gen;


  reduced_16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Subtract8_out1_1 <= (OTHERS => to_signed(16#00000#, 17));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Subtract8_out1_1 <= Subtract8_out1;
      END IF;
    END IF;
  END PROCESS reduced_16_process;



  Product17_out1_gen: FOR t_029 IN 0 TO 15 GENERATE
    Product17_out1(t_029) <= Subtract8_out1_1(t_029) * Subtract8_out1_1(t_029);
  END GENERATE Product17_out1_gen;


  PipelineRegister9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product17_out1_1 <= (OTHERS => to_signed(0, 34));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product17_out1_1 <= Product17_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister9_process;


  Subsystem6_out8_signed <= signed(Subsystem6_out8);

  Subtract26_v <= resize(Subsystem6_out8_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 17);

  Subtract26_out1_gen: FOR t_030 IN 0 TO 15 GENERATE
    Subtract26_sub_cast(t_030) <= resize(Data_Type_Conversion1_out1_1(t_030), 17);
    Subtract26_sub_cast_1(t_030) <= resize(Subtract26_sub_cast(t_030), 18);
    Subtract26_sub_cast_2(t_030) <= resize(Subtract26_v, 18);
    Subtract26_sub_temp(t_030) <= Subtract26_sub_cast_1(t_030) - Subtract26_sub_cast_2(t_030);
    
    Subtract26_out1(t_030) <= "01111111111111111" WHEN (Subtract26_sub_temp(t_030)(17) = '0') AND (Subtract26_sub_temp(t_030)(16) /= '0') ELSE
        "10000000000000000" WHEN (Subtract26_sub_temp(t_030)(17) = '1') AND (Subtract26_sub_temp(t_030)(16) /= '1') ELSE
        Subtract26_sub_temp(t_030)(16 DOWNTO 0);
  END GENERATE Subtract26_out1_gen;


  reduced_17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Subtract26_out1_1 <= (OTHERS => to_signed(16#00000#, 17));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Subtract26_out1_1 <= Subtract26_out1;
      END IF;
    END IF;
  END PROCESS reduced_17_process;



  Product20_out1_gen: FOR t_031 IN 0 TO 15 GENERATE
    Product20_out1(t_031) <= Subtract26_out1_1(t_031) * Subtract26_out1_1(t_031);
  END GENERATE Product20_out1_gen;


  PipelineRegister20_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product27_out1_1 <= (OTHERS => to_signed(0, 34));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product27_out1_1 <= Product27_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister20_process;



  Add1_out1_gen: FOR t_032 IN 0 TO 15 GENERATE
    Add1_add_cast(t_032) <= resize(Product32_out1_1(t_032), 35);
    Add1_add_cast_1(t_032) <= resize(Product27_out1_1(t_032), 35);
    Add1_out1(t_032) <= Add1_add_cast(t_032) + Add1_add_cast_1(t_032);
  END GENERATE Add1_out1_gen;


  outputgen20: FOR k IN 0 TO 15 GENERATE
    Add1_out1_1(k) <= std_logic_vector(Add1_out1(k));
  END GENERATE;

  PipelineRegister19_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product26_out1_1 <= (OTHERS => to_signed(0, 34));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product26_out1_1 <= Product26_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister19_process;



  Add2_out1_gen: FOR t_033 IN 0 TO 15 GENERATE
    Add2_add_cast(t_033) <= resize(Product31_out1_1(t_033), 35);
    Add2_add_cast_1(t_033) <= resize(Product26_out1_1(t_033), 35);
    Add2_out1(t_033) <= Add2_add_cast(t_033) + Add2_add_cast_1(t_033);
  END GENERATE Add2_out1_gen;


  outputgen19: FOR k IN 0 TO 15 GENERATE
    Add2_out1_1(k) <= std_logic_vector(Add2_out1(k));
  END GENERATE;

  PipelineRegister18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product25_out1_1 <= (OTHERS => to_signed(0, 34));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product25_out1_1 <= Product25_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister18_process;



  Add3_out1_gen: FOR t_034 IN 0 TO 15 GENERATE
    Add3_add_cast(t_034) <= resize(Product30_out1_1(t_034), 35);
    Add3_add_cast_1(t_034) <= resize(Product25_out1_1(t_034), 35);
    Add3_out1(t_034) <= Add3_add_cast(t_034) + Add3_add_cast_1(t_034);
  END GENERATE Add3_out1_gen;


  outputgen18: FOR k IN 0 TO 15 GENERATE
    Add3_out1_1(k) <= std_logic_vector(Add3_out1(k));
  END GENERATE;

  PipelineRegister17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product24_out1_1 <= (OTHERS => to_signed(0, 34));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product24_out1_1 <= Product24_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister17_process;



  Add4_out1_gen: FOR t_035 IN 0 TO 15 GENERATE
    Add4_add_cast(t_035) <= resize(Product29_out1_1(t_035), 35);
    Add4_add_cast_1(t_035) <= resize(Product24_out1_1(t_035), 35);
    Add4_out1(t_035) <= Add4_add_cast(t_035) + Add4_add_cast_1(t_035);
  END GENERATE Add4_out1_gen;


  outputgen17: FOR k IN 0 TO 15 GENERATE
    Add4_out1_1(k) <= std_logic_vector(Add4_out1(k));
  END GENERATE;

  PipelineRegister16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product23_out1_1 <= (OTHERS => to_signed(0, 34));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product23_out1_1 <= Product23_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister16_process;



  Add5_out1_gen: FOR t_036 IN 0 TO 15 GENERATE
    Add5_add_cast(t_036) <= resize(Product28_out1_1(t_036), 35);
    Add5_add_cast_1(t_036) <= resize(Product23_out1_1(t_036), 35);
    Add5_out1(t_036) <= Add5_add_cast(t_036) + Add5_add_cast_1(t_036);
  END GENERATE Add5_out1_gen;


  outputgen16: FOR k IN 0 TO 15 GENERATE
    Add5_out1_1(k) <= std_logic_vector(Add5_out1(k));
  END GENERATE;

  PipelineRegister15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product22_out1_1 <= (OTHERS => to_signed(0, 34));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product22_out1_1 <= Product22_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister15_process;



  Add6_out1_gen: FOR t_037 IN 0 TO 15 GENERATE
    Add6_add_cast(t_037) <= resize(Product19_out1_1(t_037), 35);
    Add6_add_cast_1(t_037) <= resize(Product22_out1_1(t_037), 35);
    Add6_out1(t_037) <= Add6_add_cast(t_037) + Add6_add_cast_1(t_037);
  END GENERATE Add6_out1_gen;


  outputgen15: FOR k IN 0 TO 15 GENERATE
    Add6_out1_1(k) <= std_logic_vector(Add6_out1(k));
  END GENERATE;

  PipelineRegister14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product21_out1_1 <= (OTHERS => to_signed(0, 34));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product21_out1_1 <= Product21_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister14_process;



  Add7_out1_gen: FOR t_038 IN 0 TO 15 GENERATE
    Add7_add_cast(t_038) <= resize(Product18_out1_1(t_038), 35);
    Add7_add_cast_1(t_038) <= resize(Product21_out1_1(t_038), 35);
    Add7_out1(t_038) <= Add7_add_cast(t_038) + Add7_add_cast_1(t_038);
  END GENERATE Add7_out1_gen;


  outputgen14: FOR k IN 0 TO 15 GENERATE
    Add7_out1_1(k) <= std_logic_vector(Add7_out1(k));
  END GENERATE;

  PipelineRegister13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product20_out1_1 <= (OTHERS => to_signed(0, 34));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product20_out1_1 <= Product20_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister13_process;



  Add8_out1_gen: FOR t_039 IN 0 TO 15 GENERATE
    Add8_add_cast(t_039) <= resize(Product17_out1_1(t_039), 35);
    Add8_add_cast_1(t_039) <= resize(Product20_out1_1(t_039), 35);
    Add8_out1(t_039) <= Add8_add_cast(t_039) + Add8_add_cast_1(t_039);
  END GENERATE Add8_out1_gen;


  outputgen13: FOR k IN 0 TO 15 GENERATE
    Add8_out1_1(k) <= std_logic_vector(Add8_out1(k));
  END GENERATE;

  Subsystem4_out1_signed <= signed(Subsystem4_out1);

  Subtract9_v <= resize(Subsystem4_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 17);

  Subtract9_out1_gen: FOR t_040 IN 0 TO 15 GENERATE
    Subtract9_sub_cast(t_040) <= resize(Data_Type_Conversion_out1_1(t_040), 17);
    Subtract9_sub_cast_1(t_040) <= resize(Subtract9_sub_cast(t_040), 18);
    Subtract9_sub_cast_2(t_040) <= resize(Subtract9_v, 18);
    Subtract9_sub_temp(t_040) <= Subtract9_sub_cast_1(t_040) - Subtract9_sub_cast_2(t_040);
    
    Subtract9_out1(t_040) <= "01111111111111111" WHEN (Subtract9_sub_temp(t_040)(17) = '0') AND (Subtract9_sub_temp(t_040)(16) /= '0') ELSE
        "10000000000000000" WHEN (Subtract9_sub_temp(t_040)(17) = '1') AND (Subtract9_sub_temp(t_040)(16) /= '1') ELSE
        Subtract9_sub_temp(t_040)(16 DOWNTO 0);
  END GENERATE Subtract9_out1_gen;


  reduced_18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Subtract9_out1_1 <= (OTHERS => to_signed(16#00000#, 17));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Subtract9_out1_1 <= Subtract9_out1;
      END IF;
    END IF;
  END PROCESS reduced_18_process;



  Product8_out1_gen: FOR t_041 IN 0 TO 15 GENERATE
    Product8_out1(t_041) <= Subtract9_out1_1(t_041) * Subtract9_out1_1(t_041);
  END GENERATE Product8_out1_gen;


  PipelineRegister31_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product8_out1_1 <= (OTHERS => to_signed(0, 34));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product8_out1_1 <= Product8_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister31_process;


  Subsystem5_out1_signed <= signed(Subsystem5_out1);

  Subtract35_v <= resize(Subsystem5_out1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 17);

  Subtract35_out1_gen: FOR t_042 IN 0 TO 15 GENERATE
    Subtract35_sub_cast(t_042) <= resize(Data_Type_Conversion1_out1_1(t_042), 17);
    Subtract35_sub_cast_1(t_042) <= resize(Subtract35_sub_cast(t_042), 18);
    Subtract35_sub_cast_2(t_042) <= resize(Subtract35_v, 18);
    Subtract35_sub_temp(t_042) <= Subtract35_sub_cast_1(t_042) - Subtract35_sub_cast_2(t_042);
    
    Subtract35_out1(t_042) <= "01111111111111111" WHEN (Subtract35_sub_temp(t_042)(17) = '0') AND (Subtract35_sub_temp(t_042)(16) /= '0') ELSE
        "10000000000000000" WHEN (Subtract35_sub_temp(t_042)(17) = '1') AND (Subtract35_sub_temp(t_042)(16) /= '1') ELSE
        Subtract35_sub_temp(t_042)(16 DOWNTO 0);
  END GENERATE Subtract35_out1_gen;


  reduced_19_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Subtract35_out1_1 <= (OTHERS => to_signed(16#00000#, 17));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Subtract35_out1_1 <= Subtract35_out1;
      END IF;
    END IF;
  END PROCESS reduced_19_process;



  Product9_out1_gen: FOR t_043 IN 0 TO 15 GENERATE
    Product9_out1(t_043) <= Subtract35_out1_1(t_043) * Subtract35_out1_1(t_043);
  END GENERATE Product9_out1_gen;


  Subsystem4_out2_signed <= signed(Subsystem4_out2);

  Subtract10_v <= resize(Subsystem4_out2_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 17);

  Subtract10_out1_gen: FOR t_044 IN 0 TO 15 GENERATE
    Subtract10_sub_cast(t_044) <= resize(Data_Type_Conversion_out1_1(t_044), 17);
    Subtract10_sub_cast_1(t_044) <= resize(Subtract10_sub_cast(t_044), 18);
    Subtract10_sub_cast_2(t_044) <= resize(Subtract10_v, 18);
    Subtract10_sub_temp(t_044) <= Subtract10_sub_cast_1(t_044) - Subtract10_sub_cast_2(t_044);
    
    Subtract10_out1(t_044) <= "01111111111111111" WHEN (Subtract10_sub_temp(t_044)(17) = '0') AND (Subtract10_sub_temp(t_044)(16) /= '0') ELSE
        "10000000000000000" WHEN (Subtract10_sub_temp(t_044)(17) = '1') AND (Subtract10_sub_temp(t_044)(16) /= '1') ELSE
        Subtract10_sub_temp(t_044)(16 DOWNTO 0);
  END GENERATE Subtract10_out1_gen;


  reduced_20_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Subtract10_out1_1 <= (OTHERS => to_signed(16#00000#, 17));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Subtract10_out1_1 <= Subtract10_out1;
      END IF;
    END IF;
  END PROCESS reduced_20_process;



  Product7_out1_gen: FOR t_045 IN 0 TO 15 GENERATE
    Product7_out1(t_045) <= Subtract10_out1_1(t_045) * Subtract10_out1_1(t_045);
  END GENERATE Product7_out1_gen;


  PipelineRegister30_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product7_out1_1 <= (OTHERS => to_signed(0, 34));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product7_out1_1 <= Product7_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister30_process;


  Subsystem5_out2_signed <= signed(Subsystem5_out2);

  Subtract34_v <= resize(Subsystem5_out2_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 17);

  Subtract34_out1_gen: FOR t_046 IN 0 TO 15 GENERATE
    Subtract34_sub_cast(t_046) <= resize(Data_Type_Conversion1_out1_1(t_046), 17);
    Subtract34_sub_cast_1(t_046) <= resize(Subtract34_sub_cast(t_046), 18);
    Subtract34_sub_cast_2(t_046) <= resize(Subtract34_v, 18);
    Subtract34_sub_temp(t_046) <= Subtract34_sub_cast_1(t_046) - Subtract34_sub_cast_2(t_046);
    
    Subtract34_out1(t_046) <= "01111111111111111" WHEN (Subtract34_sub_temp(t_046)(17) = '0') AND (Subtract34_sub_temp(t_046)(16) /= '0') ELSE
        "10000000000000000" WHEN (Subtract34_sub_temp(t_046)(17) = '1') AND (Subtract34_sub_temp(t_046)(16) /= '1') ELSE
        Subtract34_sub_temp(t_046)(16 DOWNTO 0);
  END GENERATE Subtract34_out1_gen;


  reduced_21_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Subtract34_out1_1 <= (OTHERS => to_signed(16#00000#, 17));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Subtract34_out1_1 <= Subtract34_out1;
      END IF;
    END IF;
  END PROCESS reduced_21_process;



  Product10_out1_gen: FOR t_047 IN 0 TO 15 GENERATE
    Product10_out1(t_047) <= Subtract34_out1_1(t_047) * Subtract34_out1_1(t_047);
  END GENERATE Product10_out1_gen;


  Subsystem4_out3_signed <= signed(Subsystem4_out3);

  Subtract11_v <= resize(Subsystem4_out3_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 17);

  Subtract11_out1_gen: FOR t_048 IN 0 TO 15 GENERATE
    Subtract11_sub_cast(t_048) <= resize(Data_Type_Conversion_out1_1(t_048), 17);
    Subtract11_sub_cast_1(t_048) <= resize(Subtract11_sub_cast(t_048), 18);
    Subtract11_sub_cast_2(t_048) <= resize(Subtract11_v, 18);
    Subtract11_sub_temp(t_048) <= Subtract11_sub_cast_1(t_048) - Subtract11_sub_cast_2(t_048);
    
    Subtract11_out1(t_048) <= "01111111111111111" WHEN (Subtract11_sub_temp(t_048)(17) = '0') AND (Subtract11_sub_temp(t_048)(16) /= '0') ELSE
        "10000000000000000" WHEN (Subtract11_sub_temp(t_048)(17) = '1') AND (Subtract11_sub_temp(t_048)(16) /= '1') ELSE
        Subtract11_sub_temp(t_048)(16 DOWNTO 0);
  END GENERATE Subtract11_out1_gen;


  reduced_22_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Subtract11_out1_1 <= (OTHERS => to_signed(16#00000#, 17));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Subtract11_out1_1 <= Subtract11_out1;
      END IF;
    END IF;
  END PROCESS reduced_22_process;



  Product6_out1_gen: FOR t_049 IN 0 TO 15 GENERATE
    Product6_out1(t_049) <= Subtract11_out1_1(t_049) * Subtract11_out1_1(t_049);
  END GENERATE Product6_out1_gen;


  PipelineRegister29_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product6_out1_1 <= (OTHERS => to_signed(0, 34));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product6_out1_1 <= Product6_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister29_process;


  Subsystem5_out3_signed <= signed(Subsystem5_out3);

  Subtract33_v <= resize(Subsystem5_out3_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 17);

  Subtract33_out1_gen: FOR t_050 IN 0 TO 15 GENERATE
    Subtract33_sub_cast(t_050) <= resize(Data_Type_Conversion1_out1_1(t_050), 17);
    Subtract33_sub_cast_1(t_050) <= resize(Subtract33_sub_cast(t_050), 18);
    Subtract33_sub_cast_2(t_050) <= resize(Subtract33_v, 18);
    Subtract33_sub_temp(t_050) <= Subtract33_sub_cast_1(t_050) - Subtract33_sub_cast_2(t_050);
    
    Subtract33_out1(t_050) <= "01111111111111111" WHEN (Subtract33_sub_temp(t_050)(17) = '0') AND (Subtract33_sub_temp(t_050)(16) /= '0') ELSE
        "10000000000000000" WHEN (Subtract33_sub_temp(t_050)(17) = '1') AND (Subtract33_sub_temp(t_050)(16) /= '1') ELSE
        Subtract33_sub_temp(t_050)(16 DOWNTO 0);
  END GENERATE Subtract33_out1_gen;


  reduced_23_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Subtract33_out1_1 <= (OTHERS => to_signed(16#00000#, 17));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Subtract33_out1_1 <= Subtract33_out1;
      END IF;
    END IF;
  END PROCESS reduced_23_process;



  Product11_out1_gen: FOR t_051 IN 0 TO 15 GENERATE
    Product11_out1(t_051) <= Subtract33_out1_1(t_051) * Subtract33_out1_1(t_051);
  END GENERATE Product11_out1_gen;


  Subsystem4_out4_signed <= signed(Subsystem4_out4);

  Subtract12_v <= resize(Subsystem4_out4_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 17);

  Subtract12_out1_gen: FOR t_052 IN 0 TO 15 GENERATE
    Subtract12_sub_cast(t_052) <= resize(Data_Type_Conversion_out1_1(t_052), 17);
    Subtract12_sub_cast_1(t_052) <= resize(Subtract12_sub_cast(t_052), 18);
    Subtract12_sub_cast_2(t_052) <= resize(Subtract12_v, 18);
    Subtract12_sub_temp(t_052) <= Subtract12_sub_cast_1(t_052) - Subtract12_sub_cast_2(t_052);
    
    Subtract12_out1(t_052) <= "01111111111111111" WHEN (Subtract12_sub_temp(t_052)(17) = '0') AND (Subtract12_sub_temp(t_052)(16) /= '0') ELSE
        "10000000000000000" WHEN (Subtract12_sub_temp(t_052)(17) = '1') AND (Subtract12_sub_temp(t_052)(16) /= '1') ELSE
        Subtract12_sub_temp(t_052)(16 DOWNTO 0);
  END GENERATE Subtract12_out1_gen;


  reduced_24_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Subtract12_out1_1 <= (OTHERS => to_signed(16#00000#, 17));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Subtract12_out1_1 <= Subtract12_out1;
      END IF;
    END IF;
  END PROCESS reduced_24_process;



  Product5_out1_gen: FOR t_053 IN 0 TO 15 GENERATE
    Product5_out1(t_053) <= Subtract12_out1_1(t_053) * Subtract12_out1_1(t_053);
  END GENERATE Product5_out1_gen;


  PipelineRegister28_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product5_out1_1 <= (OTHERS => to_signed(0, 34));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product5_out1_1 <= Product5_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister28_process;


  Subsystem5_out4_signed <= signed(Subsystem5_out4);

  Subtract32_v <= resize(Subsystem5_out4_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 17);

  Subtract32_out1_gen: FOR t_054 IN 0 TO 15 GENERATE
    Subtract32_sub_cast(t_054) <= resize(Data_Type_Conversion1_out1_1(t_054), 17);
    Subtract32_sub_cast_1(t_054) <= resize(Subtract32_sub_cast(t_054), 18);
    Subtract32_sub_cast_2(t_054) <= resize(Subtract32_v, 18);
    Subtract32_sub_temp(t_054) <= Subtract32_sub_cast_1(t_054) - Subtract32_sub_cast_2(t_054);
    
    Subtract32_out1(t_054) <= "01111111111111111" WHEN (Subtract32_sub_temp(t_054)(17) = '0') AND (Subtract32_sub_temp(t_054)(16) /= '0') ELSE
        "10000000000000000" WHEN (Subtract32_sub_temp(t_054)(17) = '1') AND (Subtract32_sub_temp(t_054)(16) /= '1') ELSE
        Subtract32_sub_temp(t_054)(16 DOWNTO 0);
  END GENERATE Subtract32_out1_gen;


  reduced_25_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Subtract32_out1_1 <= (OTHERS => to_signed(16#00000#, 17));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Subtract32_out1_1 <= Subtract32_out1;
      END IF;
    END IF;
  END PROCESS reduced_25_process;



  Product12_out1_gen: FOR t_055 IN 0 TO 15 GENERATE
    Product12_out1(t_055) <= Subtract32_out1_1(t_055) * Subtract32_out1_1(t_055);
  END GENERATE Product12_out1_gen;


  Subsystem4_out5_signed <= signed(Subsystem4_out5);

  Subtract13_v <= resize(Subsystem4_out5_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 17);

  Subtract13_out1_gen: FOR t_056 IN 0 TO 15 GENERATE
    Subtract13_sub_cast(t_056) <= resize(Data_Type_Conversion_out1_1(t_056), 17);
    Subtract13_sub_cast_1(t_056) <= resize(Subtract13_sub_cast(t_056), 18);
    Subtract13_sub_cast_2(t_056) <= resize(Subtract13_v, 18);
    Subtract13_sub_temp(t_056) <= Subtract13_sub_cast_1(t_056) - Subtract13_sub_cast_2(t_056);
    
    Subtract13_out1(t_056) <= "01111111111111111" WHEN (Subtract13_sub_temp(t_056)(17) = '0') AND (Subtract13_sub_temp(t_056)(16) /= '0') ELSE
        "10000000000000000" WHEN (Subtract13_sub_temp(t_056)(17) = '1') AND (Subtract13_sub_temp(t_056)(16) /= '1') ELSE
        Subtract13_sub_temp(t_056)(16 DOWNTO 0);
  END GENERATE Subtract13_out1_gen;


  reduced_26_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Subtract13_out1_1 <= (OTHERS => to_signed(16#00000#, 17));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Subtract13_out1_1 <= Subtract13_out1;
      END IF;
    END IF;
  END PROCESS reduced_26_process;



  Product4_out1_gen: FOR t_057 IN 0 TO 15 GENERATE
    Product4_out1(t_057) <= Subtract13_out1_1(t_057) * Subtract13_out1_1(t_057);
  END GENERATE Product4_out1_gen;


  PipelineRegister27_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product4_out1_1 <= (OTHERS => to_signed(0, 34));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product4_out1_1 <= Product4_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister27_process;


  Subsystem5_out5_signed <= signed(Subsystem5_out5);

  Subtract31_v <= resize(Subsystem5_out5_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 17);

  Subtract31_out1_gen: FOR t_058 IN 0 TO 15 GENERATE
    Subtract31_sub_cast(t_058) <= resize(Data_Type_Conversion1_out1_1(t_058), 17);
    Subtract31_sub_cast_1(t_058) <= resize(Subtract31_sub_cast(t_058), 18);
    Subtract31_sub_cast_2(t_058) <= resize(Subtract31_v, 18);
    Subtract31_sub_temp(t_058) <= Subtract31_sub_cast_1(t_058) - Subtract31_sub_cast_2(t_058);
    
    Subtract31_out1(t_058) <= "01111111111111111" WHEN (Subtract31_sub_temp(t_058)(17) = '0') AND (Subtract31_sub_temp(t_058)(16) /= '0') ELSE
        "10000000000000000" WHEN (Subtract31_sub_temp(t_058)(17) = '1') AND (Subtract31_sub_temp(t_058)(16) /= '1') ELSE
        Subtract31_sub_temp(t_058)(16 DOWNTO 0);
  END GENERATE Subtract31_out1_gen;


  reduced_27_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Subtract31_out1_1 <= (OTHERS => to_signed(16#00000#, 17));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Subtract31_out1_1 <= Subtract31_out1;
      END IF;
    END IF;
  END PROCESS reduced_27_process;



  Product13_out1_gen: FOR t_059 IN 0 TO 15 GENERATE
    Product13_out1(t_059) <= Subtract31_out1_1(t_059) * Subtract31_out1_1(t_059);
  END GENERATE Product13_out1_gen;


  Subsystem4_out6_signed <= signed(Subsystem4_out6);

  Subtract14_v <= resize(Subsystem4_out6_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 17);

  Subtract14_out1_gen: FOR t_060 IN 0 TO 15 GENERATE
    Subtract14_sub_cast(t_060) <= resize(Data_Type_Conversion_out1_1(t_060), 17);
    Subtract14_sub_cast_1(t_060) <= resize(Subtract14_sub_cast(t_060), 18);
    Subtract14_sub_cast_2(t_060) <= resize(Subtract14_v, 18);
    Subtract14_sub_temp(t_060) <= Subtract14_sub_cast_1(t_060) - Subtract14_sub_cast_2(t_060);
    
    Subtract14_out1(t_060) <= "01111111111111111" WHEN (Subtract14_sub_temp(t_060)(17) = '0') AND (Subtract14_sub_temp(t_060)(16) /= '0') ELSE
        "10000000000000000" WHEN (Subtract14_sub_temp(t_060)(17) = '1') AND (Subtract14_sub_temp(t_060)(16) /= '1') ELSE
        Subtract14_sub_temp(t_060)(16 DOWNTO 0);
  END GENERATE Subtract14_out1_gen;


  reduced_28_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Subtract14_out1_1 <= (OTHERS => to_signed(16#00000#, 17));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Subtract14_out1_1 <= Subtract14_out1;
      END IF;
    END IF;
  END PROCESS reduced_28_process;



  Product3_out1_gen: FOR t_061 IN 0 TO 15 GENERATE
    Product3_out1(t_061) <= Subtract14_out1_1(t_061) * Subtract14_out1_1(t_061);
  END GENERATE Product3_out1_gen;


  PipelineRegister23_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product3_out1_1 <= (OTHERS => to_signed(0, 34));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product3_out1_1 <= Product3_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister23_process;


  Subsystem5_out6_signed <= signed(Subsystem5_out6);

  Subtract30_v <= resize(Subsystem5_out6_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 17);

  Subtract30_out1_gen: FOR t_062 IN 0 TO 15 GENERATE
    Subtract30_sub_cast(t_062) <= resize(Data_Type_Conversion1_out1_1(t_062), 17);
    Subtract30_sub_cast_1(t_062) <= resize(Subtract30_sub_cast(t_062), 18);
    Subtract30_sub_cast_2(t_062) <= resize(Subtract30_v, 18);
    Subtract30_sub_temp(t_062) <= Subtract30_sub_cast_1(t_062) - Subtract30_sub_cast_2(t_062);
    
    Subtract30_out1(t_062) <= "01111111111111111" WHEN (Subtract30_sub_temp(t_062)(17) = '0') AND (Subtract30_sub_temp(t_062)(16) /= '0') ELSE
        "10000000000000000" WHEN (Subtract30_sub_temp(t_062)(17) = '1') AND (Subtract30_sub_temp(t_062)(16) /= '1') ELSE
        Subtract30_sub_temp(t_062)(16 DOWNTO 0);
  END GENERATE Subtract30_out1_gen;


  reduced_29_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Subtract30_out1_1 <= (OTHERS => to_signed(16#00000#, 17));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Subtract30_out1_1 <= Subtract30_out1;
      END IF;
    END IF;
  END PROCESS reduced_29_process;



  Product14_out1_gen: FOR t_063 IN 0 TO 15 GENERATE
    Product14_out1(t_063) <= Subtract30_out1_1(t_063) * Subtract30_out1_1(t_063);
  END GENERATE Product14_out1_gen;


  Subsystem4_out7_signed <= signed(Subsystem4_out7);

  Subtract15_v <= resize(Subsystem4_out7_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 17);

  Subtract15_out1_gen: FOR t_064 IN 0 TO 15 GENERATE
    Subtract15_sub_cast(t_064) <= resize(Data_Type_Conversion_out1_1(t_064), 17);
    Subtract15_sub_cast_1(t_064) <= resize(Subtract15_sub_cast(t_064), 18);
    Subtract15_sub_cast_2(t_064) <= resize(Subtract15_v, 18);
    Subtract15_sub_temp(t_064) <= Subtract15_sub_cast_1(t_064) - Subtract15_sub_cast_2(t_064);
    
    Subtract15_out1(t_064) <= "01111111111111111" WHEN (Subtract15_sub_temp(t_064)(17) = '0') AND (Subtract15_sub_temp(t_064)(16) /= '0') ELSE
        "10000000000000000" WHEN (Subtract15_sub_temp(t_064)(17) = '1') AND (Subtract15_sub_temp(t_064)(16) /= '1') ELSE
        Subtract15_sub_temp(t_064)(16 DOWNTO 0);
  END GENERATE Subtract15_out1_gen;


  reduced_30_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Subtract15_out1_1 <= (OTHERS => to_signed(16#00000#, 17));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Subtract15_out1_1 <= Subtract15_out1;
      END IF;
    END IF;
  END PROCESS reduced_30_process;



  Product1_out1_gen: FOR t_065 IN 0 TO 15 GENERATE
    Product1_out1(t_065) <= Subtract15_out1_1(t_065) * Subtract15_out1_1(t_065);
  END GENERATE Product1_out1_gen;


  PipelineRegister1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product1_out1_1 <= (OTHERS => to_signed(0, 34));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product1_out1_1 <= Product1_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister1_process;


  Subsystem5_out7_signed <= signed(Subsystem5_out7);

  Subtract29_v <= resize(Subsystem5_out7_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 17);

  Subtract29_out1_gen: FOR t_066 IN 0 TO 15 GENERATE
    Subtract29_sub_cast(t_066) <= resize(Data_Type_Conversion1_out1_1(t_066), 17);
    Subtract29_sub_cast_1(t_066) <= resize(Subtract29_sub_cast(t_066), 18);
    Subtract29_sub_cast_2(t_066) <= resize(Subtract29_v, 18);
    Subtract29_sub_temp(t_066) <= Subtract29_sub_cast_1(t_066) - Subtract29_sub_cast_2(t_066);
    
    Subtract29_out1(t_066) <= "01111111111111111" WHEN (Subtract29_sub_temp(t_066)(17) = '0') AND (Subtract29_sub_temp(t_066)(16) /= '0') ELSE
        "10000000000000000" WHEN (Subtract29_sub_temp(t_066)(17) = '1') AND (Subtract29_sub_temp(t_066)(16) /= '1') ELSE
        Subtract29_sub_temp(t_066)(16 DOWNTO 0);
  END GENERATE Subtract29_out1_gen;


  reduced_31_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Subtract29_out1_1 <= (OTHERS => to_signed(16#00000#, 17));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Subtract29_out1_1 <= Subtract29_out1;
      END IF;
    END IF;
  END PROCESS reduced_31_process;



  Product15_out1_gen: FOR t_067 IN 0 TO 15 GENERATE
    Product15_out1(t_067) <= Subtract29_out1_1(t_067) * Subtract29_out1_1(t_067);
  END GENERATE Product15_out1_gen;


  Subsystem4_out8_signed <= signed(Subsystem4_out8);

  Subtract16_v <= resize(Subsystem4_out8_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 17);

  Subtract16_out1_gen: FOR t_068 IN 0 TO 15 GENERATE
    Subtract16_sub_cast(t_068) <= resize(Data_Type_Conversion_out1_1(t_068), 17);
    Subtract16_sub_cast_1(t_068) <= resize(Subtract16_sub_cast(t_068), 18);
    Subtract16_sub_cast_2(t_068) <= resize(Subtract16_v, 18);
    Subtract16_sub_temp(t_068) <= Subtract16_sub_cast_1(t_068) - Subtract16_sub_cast_2(t_068);
    
    Subtract16_out1(t_068) <= "01111111111111111" WHEN (Subtract16_sub_temp(t_068)(17) = '0') AND (Subtract16_sub_temp(t_068)(16) /= '0') ELSE
        "10000000000000000" WHEN (Subtract16_sub_temp(t_068)(17) = '1') AND (Subtract16_sub_temp(t_068)(16) /= '1') ELSE
        Subtract16_sub_temp(t_068)(16 DOWNTO 0);
  END GENERATE Subtract16_out1_gen;


  reduced_32_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Subtract16_out1_1 <= (OTHERS => to_signed(16#00000#, 17));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Subtract16_out1_1 <= Subtract16_out1;
      END IF;
    END IF;
  END PROCESS reduced_32_process;



  Product_out1_gen: FOR t_069 IN 0 TO 15 GENERATE
    Product_out1(t_069) <= Subtract16_out1_1(t_069) * Subtract16_out1_1(t_069);
  END GENERATE Product_out1_gen;


  PipelineRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product_out1_1 <= (OTHERS => to_signed(0, 34));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product_out1_1 <= Product_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  Subsystem5_out8_signed <= signed(Subsystem5_out8);

  Subtract27_v <= resize(Subsystem5_out8_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 17);

  Subtract27_out1_gen: FOR t_070 IN 0 TO 15 GENERATE
    Subtract27_sub_cast(t_070) <= resize(Data_Type_Conversion1_out1_1(t_070), 17);
    Subtract27_sub_cast_1(t_070) <= resize(Subtract27_sub_cast(t_070), 18);
    Subtract27_sub_cast_2(t_070) <= resize(Subtract27_v, 18);
    Subtract27_sub_temp(t_070) <= Subtract27_sub_cast_1(t_070) - Subtract27_sub_cast_2(t_070);
    
    Subtract27_out1(t_070) <= "01111111111111111" WHEN (Subtract27_sub_temp(t_070)(17) = '0') AND (Subtract27_sub_temp(t_070)(16) /= '0') ELSE
        "10000000000000000" WHEN (Subtract27_sub_temp(t_070)(17) = '1') AND (Subtract27_sub_temp(t_070)(16) /= '1') ELSE
        Subtract27_sub_temp(t_070)(16 DOWNTO 0);
  END GENERATE Subtract27_out1_gen;


  reduced_33_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Subtract27_out1_1 <= (OTHERS => to_signed(16#00000#, 17));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Subtract27_out1_1 <= Subtract27_out1;
      END IF;
    END IF;
  END PROCESS reduced_33_process;



  Product16_out1_gen: FOR t_071 IN 0 TO 15 GENERATE
    Product16_out1(t_071) <= Subtract27_out1_1(t_071) * Subtract27_out1_1(t_071);
  END GENERATE Product16_out1_gen;


  PipelineRegister32_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product9_out1_1 <= (OTHERS => to_signed(0, 34));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product9_out1_1 <= Product9_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister32_process;



  Add16_out1_gen: FOR t_072 IN 0 TO 15 GENERATE
    Add16_add_cast(t_072) <= resize(Product8_out1_1(t_072), 35);
    Add16_add_cast_1(t_072) <= resize(Product9_out1_1(t_072), 35);
    Add16_out1(t_072) <= Add16_add_cast(t_072) + Add16_add_cast_1(t_072);
  END GENERATE Add16_out1_gen;


  outputgen12: FOR k IN 0 TO 15 GENERATE
    Add16_out1_1(k) <= std_logic_vector(Add16_out1(k));
  END GENERATE;

  PipelineRegister2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product10_out1_1 <= (OTHERS => to_signed(0, 34));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product10_out1_1 <= Product10_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister2_process;



  Add9_out1_gen: FOR t_073 IN 0 TO 15 GENERATE
    Add9_add_cast(t_073) <= resize(Product7_out1_1(t_073), 35);
    Add9_add_cast_1(t_073) <= resize(Product10_out1_1(t_073), 35);
    Add9_out1(t_073) <= Add9_add_cast(t_073) + Add9_add_cast_1(t_073);
  END GENERATE Add9_out1_gen;


  outputgen11: FOR k IN 0 TO 15 GENERATE
    Add9_out1_1(k) <= std_logic_vector(Add9_out1(k));
  END GENERATE;

  PipelineRegister3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product11_out1_1 <= (OTHERS => to_signed(0, 34));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product11_out1_1 <= Product11_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister3_process;



  Add10_out1_gen: FOR t_074 IN 0 TO 15 GENERATE
    Add10_add_cast(t_074) <= resize(Product6_out1_1(t_074), 35);
    Add10_add_cast_1(t_074) <= resize(Product11_out1_1(t_074), 35);
    Add10_out1(t_074) <= Add10_add_cast(t_074) + Add10_add_cast_1(t_074);
  END GENERATE Add10_out1_gen;


  outputgen10: FOR k IN 0 TO 15 GENERATE
    Add10_out1_1(k) <= std_logic_vector(Add10_out1(k));
  END GENERATE;

  PipelineRegister4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product12_out1_1 <= (OTHERS => to_signed(0, 34));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product12_out1_1 <= Product12_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister4_process;



  Add11_out1_gen: FOR t_075 IN 0 TO 15 GENERATE
    Add11_add_cast(t_075) <= resize(Product5_out1_1(t_075), 35);
    Add11_add_cast_1(t_075) <= resize(Product12_out1_1(t_075), 35);
    Add11_out1(t_075) <= Add11_add_cast(t_075) + Add11_add_cast_1(t_075);
  END GENERATE Add11_out1_gen;


  outputgen9: FOR k IN 0 TO 15 GENERATE
    Add11_out1_1(k) <= std_logic_vector(Add11_out1(k));
  END GENERATE;

  PipelineRegister5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product13_out1_1 <= (OTHERS => to_signed(0, 34));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product13_out1_1 <= Product13_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister5_process;



  Add12_out1_gen: FOR t_076 IN 0 TO 15 GENERATE
    Add12_add_cast(t_076) <= resize(Product4_out1_1(t_076), 35);
    Add12_add_cast_1(t_076) <= resize(Product13_out1_1(t_076), 35);
    Add12_out1(t_076) <= Add12_add_cast(t_076) + Add12_add_cast_1(t_076);
  END GENERATE Add12_out1_gen;


  outputgen8: FOR k IN 0 TO 15 GENERATE
    Add12_out1_1(k) <= std_logic_vector(Add12_out1(k));
  END GENERATE;

  PipelineRegister6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product14_out1_1 <= (OTHERS => to_signed(0, 34));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product14_out1_1 <= Product14_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister6_process;



  Add13_out1_gen: FOR t_077 IN 0 TO 15 GENERATE
    Add13_add_cast(t_077) <= resize(Product3_out1_1(t_077), 35);
    Add13_add_cast_1(t_077) <= resize(Product14_out1_1(t_077), 35);
    Add13_out1(t_077) <= Add13_add_cast(t_077) + Add13_add_cast_1(t_077);
  END GENERATE Add13_out1_gen;


  outputgen7: FOR k IN 0 TO 15 GENERATE
    Add13_out1_1(k) <= std_logic_vector(Add13_out1(k));
  END GENERATE;

  PipelineRegister7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product15_out1_1 <= (OTHERS => to_signed(0, 34));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product15_out1_1 <= Product15_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister7_process;



  Add14_out1_gen: FOR t_078 IN 0 TO 15 GENERATE
    Add14_add_cast(t_078) <= resize(Product1_out1_1(t_078), 35);
    Add14_add_cast_1(t_078) <= resize(Product15_out1_1(t_078), 35);
    Add14_out1(t_078) <= Add14_add_cast(t_078) + Add14_add_cast_1(t_078);
  END GENERATE Add14_out1_gen;


  outputgen6: FOR k IN 0 TO 15 GENERATE
    Add14_out1_1(k) <= std_logic_vector(Add14_out1(k));
  END GENERATE;

  PipelineRegister8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product16_out1_1 <= (OTHERS => to_signed(0, 34));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product16_out1_1 <= Product16_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister8_process;



  Add15_out1_gen: FOR t_079 IN 0 TO 15 GENERATE
    Add15_add_cast(t_079) <= resize(Product_out1_1(t_079), 35);
    Add15_add_cast_1(t_079) <= resize(Product16_out1_1(t_079), 35);
    Add15_out1(t_079) <= Add15_add_cast(t_079) + Add15_add_cast_1(t_079);
  END GENERATE Add15_out1_gen;


  outputgen5: FOR k IN 0 TO 15 GENERATE
    Add15_out1_1(k) <= std_logic_vector(Add15_out1(k));
  END GENERATE;

  outputgen4: FOR k IN 0 TO 15 GENERATE
    Subsystem2_out1_signed(k) <= signed(Subsystem2_out1(k));
  END GENERATE;

  outputgen3: FOR k IN 0 TO 15 GENERATE
    Subsystem1_out1_signed(k) <= signed(Subsystem1_out1(k));
  END GENERATE;


  Subtract18_out1_gen: FOR t_080 IN 0 TO 15 GENERATE
    Subtract18_sub_cast(t_080) <= resize(Subsystem2_out1_signed(t_080), 36);
    Subtract18_sub_cast_1(t_080) <= resize(Subsystem1_out1_signed(t_080), 36);
    Subtract18_out1(t_080) <= Subtract18_sub_cast(t_080) - Subtract18_sub_cast_1(t_080);
  END GENERATE Subtract18_out1_gen;


  HwModeRegister24_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Subtract18_out1_1 <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Subtract18_out1_1 <= Subtract18_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister24_process;


  LLR_Scale_unsigned <= unsigned(LLR_Scale);

  HwModeRegister25_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister25_reg <= (OTHERS => to_unsigned(0, 32));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister25_reg(0) <= LLR_Scale_unsigned;
        HwModeRegister25_reg(1 TO 12) <= HwModeRegister25_reg(0 TO 11);
      END IF;
    END IF;
  END PROCESS HwModeRegister25_process;

  LLR_Scale_1 <= HwModeRegister25_reg(12);


  Product2_out1_gen: FOR t_081 IN 0 TO 15 GENERATE
    Product2_cast(t_081) <= signed(resize(LLR_Scale_1, 33));
    Product2_mul_temp(t_081) <= Subtract18_out1_1(t_081) * Product2_cast(t_081);
    Product2_out1(t_081) <= Product2_mul_temp(t_081)(67 DOWNTO 0);
  END GENERATE Product2_out1_gen;


  Product2_out1_0 <= Product2_out1(0);

  PipelineRegister12_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      PipelineRegister12_1_reg <= (OTHERS => to_signed(0, 68));
      PipelineRegister12_1_reg_1 <= (OTHERS => to_signed(0, 68));
      PipelineRegister12_1_reg_2 <= (OTHERS => to_signed(0, 68));
      PipelineRegister12_1_reg_3 <= (OTHERS => to_signed(0, 68));
      PipelineRegister12_1_reg_4 <= (OTHERS => to_signed(0, 68));
      PipelineRegister12_1_reg_5 <= (OTHERS => to_signed(0, 68));
      PipelineRegister12_1_reg_6 <= (OTHERS => to_signed(0, 68));
      PipelineRegister12_1_reg_7 <= (OTHERS => to_signed(0, 68));
      PipelineRegister12_1_reg_8 <= (OTHERS => to_signed(0, 68));
      PipelineRegister12_1_reg_9 <= (OTHERS => to_signed(0, 68));
      PipelineRegister12_1_reg_10 <= (OTHERS => to_signed(0, 68));
      PipelineRegister12_1_reg_11 <= (OTHERS => to_signed(0, 68));
      PipelineRegister12_1_reg_12 <= (OTHERS => to_signed(0, 68));
      PipelineRegister12_1_reg_13 <= (OTHERS => to_signed(0, 68));
      PipelineRegister12_1_reg_14 <= (OTHERS => to_signed(0, 68));
      PipelineRegister12_1_reg_15 <= (OTHERS => to_signed(0, 68));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        PipelineRegister12_1_reg(0) <= Product2_out1_0;
        PipelineRegister12_1_reg(1 TO 2) <= PipelineRegister12_1_reg(0 TO 1);
        PipelineRegister12_1_reg_1(0) <= Product2_out1_1;
        PipelineRegister12_1_reg_1(1 TO 2) <= PipelineRegister12_1_reg_1(0 TO 1);
        PipelineRegister12_1_reg_2(0) <= Product2_out1_2;
        PipelineRegister12_1_reg_2(1 TO 2) <= PipelineRegister12_1_reg_2(0 TO 1);
        PipelineRegister12_1_reg_3(0) <= Product2_out1_3;
        PipelineRegister12_1_reg_3(1 TO 2) <= PipelineRegister12_1_reg_3(0 TO 1);
        PipelineRegister12_1_reg_4(0) <= Product2_out1_4;
        PipelineRegister12_1_reg_4(1 TO 2) <= PipelineRegister12_1_reg_4(0 TO 1);
        PipelineRegister12_1_reg_5(0) <= Product2_out1_5;
        PipelineRegister12_1_reg_5(1 TO 2) <= PipelineRegister12_1_reg_5(0 TO 1);
        PipelineRegister12_1_reg_6(0) <= Product2_out1_6;
        PipelineRegister12_1_reg_6(1 TO 2) <= PipelineRegister12_1_reg_6(0 TO 1);
        PipelineRegister12_1_reg_7(0) <= Product2_out1_7;
        PipelineRegister12_1_reg_7(1 TO 2) <= PipelineRegister12_1_reg_7(0 TO 1);
        PipelineRegister12_1_reg_8(0) <= Product2_out1_8;
        PipelineRegister12_1_reg_8(1 TO 2) <= PipelineRegister12_1_reg_8(0 TO 1);
        PipelineRegister12_1_reg_9(0) <= Product2_out1_9;
        PipelineRegister12_1_reg_9(1 TO 2) <= PipelineRegister12_1_reg_9(0 TO 1);
        PipelineRegister12_1_reg_10(0) <= Product2_out1_10;
        PipelineRegister12_1_reg_10(1 TO 2) <= PipelineRegister12_1_reg_10(0 TO 1);
        PipelineRegister12_1_reg_11(0) <= Product2_out1_11;
        PipelineRegister12_1_reg_11(1 TO 2) <= PipelineRegister12_1_reg_11(0 TO 1);
        PipelineRegister12_1_reg_12(0) <= Product2_out1_12;
        PipelineRegister12_1_reg_12(1 TO 2) <= PipelineRegister12_1_reg_12(0 TO 1);
        PipelineRegister12_1_reg_13(0) <= Product2_out1_13;
        PipelineRegister12_1_reg_13(1 TO 2) <= PipelineRegister12_1_reg_13(0 TO 1);
        PipelineRegister12_1_reg_14(0) <= Product2_out1_14;
        PipelineRegister12_1_reg_14(1 TO 2) <= PipelineRegister12_1_reg_14(0 TO 1);
        PipelineRegister12_1_reg_15(0) <= Product2_out1_15;
        PipelineRegister12_1_reg_15(1 TO 2) <= PipelineRegister12_1_reg_15(0 TO 1);
      END IF;
    END IF;
  END PROCESS PipelineRegister12_1_process;

  PipelineRegister12_out_1 <= PipelineRegister12_1_reg(2);
  PipelineRegister12_out_2 <= PipelineRegister12_1_reg_1(2);
  PipelineRegister12_out_3 <= PipelineRegister12_1_reg_2(2);
  PipelineRegister12_out_4 <= PipelineRegister12_1_reg_3(2);
  PipelineRegister12_out_5 <= PipelineRegister12_1_reg_4(2);
  PipelineRegister12_out_6 <= PipelineRegister12_1_reg_5(2);
  PipelineRegister12_out_7 <= PipelineRegister12_1_reg_6(2);
  PipelineRegister12_out_8 <= PipelineRegister12_1_reg_7(2);
  PipelineRegister12_out_9 <= PipelineRegister12_1_reg_8(2);
  PipelineRegister12_out_10 <= PipelineRegister12_1_reg_9(2);
  PipelineRegister12_out_11 <= PipelineRegister12_1_reg_10(2);
  PipelineRegister12_out_12 <= PipelineRegister12_1_reg_11(2);
  PipelineRegister12_out_13 <= PipelineRegister12_1_reg_12(2);
  PipelineRegister12_out_14 <= PipelineRegister12_1_reg_13(2);
  PipelineRegister12_out_15 <= PipelineRegister12_1_reg_14(2);
  PipelineRegister12_out_16 <= PipelineRegister12_1_reg_15(2);

  Product2_out1_1 <= Product2_out1(1);

  Product2_out1_2 <= Product2_out1(2);

  Product2_out1_3 <= Product2_out1(3);

  Product2_out1_4 <= Product2_out1(4);

  Product2_out1_5 <= Product2_out1(5);

  Product2_out1_6 <= Product2_out1(6);

  Product2_out1_7 <= Product2_out1(7);

  Product2_out1_8 <= Product2_out1(8);

  Product2_out1_9 <= Product2_out1(9);

  Product2_out1_10 <= Product2_out1(10);

  Product2_out1_11 <= Product2_out1(11);

  Product2_out1_12 <= Product2_out1(12);

  Product2_out1_13 <= Product2_out1(13);

  Product2_out1_14 <= Product2_out1(14);

  Product2_out1_15 <= Product2_out1(15);

  Product2_out1_16(0) <= PipelineRegister12_out_1;
  Product2_out1_16(1) <= PipelineRegister12_out_2;
  Product2_out1_16(2) <= PipelineRegister12_out_3;
  Product2_out1_16(3) <= PipelineRegister12_out_4;
  Product2_out1_16(4) <= PipelineRegister12_out_5;
  Product2_out1_16(5) <= PipelineRegister12_out_6;
  Product2_out1_16(6) <= PipelineRegister12_out_7;
  Product2_out1_16(7) <= PipelineRegister12_out_8;
  Product2_out1_16(8) <= PipelineRegister12_out_9;
  Product2_out1_16(9) <= PipelineRegister12_out_10;
  Product2_out1_16(10) <= PipelineRegister12_out_11;
  Product2_out1_16(11) <= PipelineRegister12_out_12;
  Product2_out1_16(12) <= PipelineRegister12_out_13;
  Product2_out1_16(13) <= PipelineRegister12_out_14;
  Product2_out1_16(14) <= PipelineRegister12_out_15;
  Product2_out1_16(15) <= PipelineRegister12_out_16;


  Product2_out1_17_gen: FOR ii2 IN 0 TO 15 GENERATE
    Product2_out1_17(ii2) <= (resize(Product2_out1_16(ii2)(67 DOWNTO 22), 68)) + ('0' & (Product2_out1_16(ii2)(21) AND (( NOT Product2_out1_16(ii2)(67)) OR (Product2_out1_16(ii2)(20) OR Product2_out1_16(ii2)(19) OR Product2_out1_16(ii2)(18) OR Product2_out1_16(ii2)(17) OR Product2_out1_16(ii2)(16) OR Product2_out1_16(ii2)(15) OR Product2_out1_16(ii2)(14) OR Product2_out1_16(ii2)(13) OR Product2_out1_16(ii2)(12) OR Product2_out1_16(ii2)(11) OR Product2_out1_16(ii2)(10) OR Product2_out1_16(ii2)(9) OR Product2_out1_16(ii2)(8) OR Product2_out1_16(ii2)(7) OR Product2_out1_16(ii2)(6) OR Product2_out1_16(ii2)(5) OR Product2_out1_16(ii2)(4) OR Product2_out1_16(ii2)(3) OR Product2_out1_16(ii2)(2) OR Product2_out1_16(ii2)(1) OR Product2_out1_16(ii2)(0)))));
  END GENERATE Product2_out1_17_gen;


  outputgen2: FOR k IN 0 TO 15 GENERATE
    Product2_out1_18(k) <= std_logic_vector(Product2_out1_17(k));
  END GENERATE;

  outputgen1: FOR k IN 0 TO 15 GENERATE
    y_unsigned(k) <= unsigned(y_1(k));
  END GENERATE;

  out_0_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      y_2 <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        y_2 <= y_unsigned;
      END IF;
    END IF;
  END PROCESS out_0_pipe_process;


  outputgen: FOR k IN 0 TO 15 GENERATE
    LLR_Values(k) <= std_logic_vector(y_2(k));
  END GENERATE;

END rtl;

