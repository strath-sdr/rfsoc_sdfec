-- -------------------------------------------------------------
-- 
-- File Name: hdl_32bits_hmm\hdlsrc\fec_ber_hw_V2\soft_demodulation_src_Subsystem2.vhd
-- Created: 2022-10-27 17:56:31
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: soft_demodulation_src_Subsystem2
-- Source Path: fec_ber_hw_V2/Soft Demodulation/Soft Demodulation/Subsystem2
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.soft_demodulation_src_Soft_Demodulation_pkg.ALL;

ENTITY soft_demodulation_src_Subsystem2 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        a                                 :   IN    vector_of_std_logic_vector35(0 TO 15);  -- sfix35_En22 [16]
        b                                 :   IN    vector_of_std_logic_vector35(0 TO 15);  -- sfix35_En22 [16]
        a1                                :   IN    vector_of_std_logic_vector35(0 TO 15);  -- sfix35_En22 [16]
        b1                                :   IN    vector_of_std_logic_vector35(0 TO 15);  -- sfix35_En22 [16]
        a2                                :   IN    vector_of_std_logic_vector35(0 TO 15);  -- sfix35_En22 [16]
        b2                                :   IN    vector_of_std_logic_vector35(0 TO 15);  -- sfix35_En22 [16]
        a3                                :   IN    vector_of_std_logic_vector35(0 TO 15);  -- sfix35_En22 [16]
        b3                                :   IN    vector_of_std_logic_vector35(0 TO 15);  -- sfix35_En22 [16]
        min                               :   OUT   vector_of_std_logic_vector35(0 TO 15)  -- sfix35_En22 [16]
        );
END soft_demodulation_src_Subsystem2;


ARCHITECTURE rtl OF soft_demodulation_src_Subsystem2 IS

  -- Component Declarations
  COMPONENT soft_demodulation_src_get_min1_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          a                               :   IN    vector_of_std_logic_vector35(0 TO 15);  -- sfix35_En22 [16]
          b                               :   IN    vector_of_std_logic_vector35(0 TO 15);  -- sfix35_En22 [16]
          min                             :   OUT   vector_of_std_logic_vector35(0 TO 15)  -- sfix35_En22 [16]
          );
  END COMPONENT;

  COMPONENT soft_demodulation_src_get_min2_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          a                               :   IN    vector_of_std_logic_vector35(0 TO 15);  -- sfix35_En22 [16]
          b                               :   IN    vector_of_std_logic_vector35(0 TO 15);  -- sfix35_En22 [16]
          min                             :   OUT   vector_of_std_logic_vector35(0 TO 15)  -- sfix35_En22 [16]
          );
  END COMPONENT;

  COMPONENT soft_demodulation_src_get_min5_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          a                               :   IN    vector_of_std_logic_vector35(0 TO 15);  -- sfix35_En22 [16]
          b                               :   IN    vector_of_std_logic_vector35(0 TO 15);  -- sfix35_En22 [16]
          min                             :   OUT   vector_of_std_logic_vector35(0 TO 15)  -- sfix35_En22 [16]
          );
  END COMPONENT;

  COMPONENT soft_demodulation_src_get_min3_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          a                               :   IN    vector_of_std_logic_vector35(0 TO 15);  -- sfix35_En22 [16]
          b                               :   IN    vector_of_std_logic_vector35(0 TO 15);  -- sfix35_En22 [16]
          min                             :   OUT   vector_of_std_logic_vector35(0 TO 15)  -- sfix35_En22 [16]
          );
  END COMPONENT;

  COMPONENT soft_demodulation_src_get_min4_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          a                               :   IN    vector_of_std_logic_vector35(0 TO 15);  -- sfix35_En22 [16]
          b                               :   IN    vector_of_std_logic_vector35(0 TO 15);  -- sfix35_En22 [16]
          min                             :   OUT   vector_of_std_logic_vector35(0 TO 15)  -- sfix35_En22 [16]
          );
  END COMPONENT;

  COMPONENT soft_demodulation_src_get_min6_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          a                               :   IN    vector_of_std_logic_vector35(0 TO 15);  -- sfix35_En22 [16]
          b                               :   IN    vector_of_std_logic_vector35(0 TO 15);  -- sfix35_En22 [16]
          min                             :   OUT   vector_of_std_logic_vector35(0 TO 15)  -- sfix35_En22 [16]
          );
  END COMPONENT;

  COMPONENT soft_demodulation_src_get_min7_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          a                               :   IN    vector_of_std_logic_vector35(0 TO 15);  -- sfix35_En22 [16]
          b                               :   IN    vector_of_std_logic_vector35(0 TO 15);  -- sfix35_En22 [16]
          min                             :   OUT   vector_of_std_logic_vector35(0 TO 15)  -- sfix35_En22 [16]
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : soft_demodulation_src_get_min1_block
    USE ENTITY work.soft_demodulation_src_get_min1_block(rtl);

  FOR ALL : soft_demodulation_src_get_min2_block
    USE ENTITY work.soft_demodulation_src_get_min2_block(rtl);

  FOR ALL : soft_demodulation_src_get_min5_block
    USE ENTITY work.soft_demodulation_src_get_min5_block(rtl);

  FOR ALL : soft_demodulation_src_get_min3_block
    USE ENTITY work.soft_demodulation_src_get_min3_block(rtl);

  FOR ALL : soft_demodulation_src_get_min4_block
    USE ENTITY work.soft_demodulation_src_get_min4_block(rtl);

  FOR ALL : soft_demodulation_src_get_min6_block
    USE ENTITY work.soft_demodulation_src_get_min6_block(rtl);

  FOR ALL : soft_demodulation_src_get_min7_block
    USE ENTITY work.soft_demodulation_src_get_min7_block(rtl);

  -- Signals
  SIGNAL a_signed                         : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL b_signed                         : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL a_1                              : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL a_2                              : vector_of_std_logic_vector35(0 TO 15);  -- ufix35 [16]
  SIGNAL b_1                              : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL b_2                              : vector_of_std_logic_vector35(0 TO 15);  -- ufix35 [16]
  SIGNAL get_min1_out1                    : vector_of_std_logic_vector35(0 TO 15);  -- ufix35 [16]
  SIGNAL a1_signed                        : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL b1_signed                        : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL a1_1                             : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL a1_2                             : vector_of_std_logic_vector35(0 TO 15);  -- ufix35 [16]
  SIGNAL b1_1                             : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL b1_2                             : vector_of_std_logic_vector35(0 TO 15);  -- ufix35 [16]
  SIGNAL get_min2_out1                    : vector_of_std_logic_vector35(0 TO 15);  -- ufix35 [16]
  SIGNAL get_min5_out1                    : vector_of_std_logic_vector35(0 TO 15);  -- ufix35 [16]
  SIGNAL a2_signed                        : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL b2_signed                        : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL a2_1                             : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL a2_2                             : vector_of_std_logic_vector35(0 TO 15);  -- ufix35 [16]
  SIGNAL b2_1                             : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL b2_2                             : vector_of_std_logic_vector35(0 TO 15);  -- ufix35 [16]
  SIGNAL get_min3_out1                    : vector_of_std_logic_vector35(0 TO 15);  -- ufix35 [16]
  SIGNAL a3_signed                        : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL b3_signed                        : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL a3_1                             : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL a3_2                             : vector_of_std_logic_vector35(0 TO 15);  -- ufix35 [16]
  SIGNAL b3_1                             : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL b3_2                             : vector_of_std_logic_vector35(0 TO 15);  -- ufix35 [16]
  SIGNAL get_min4_out1                    : vector_of_std_logic_vector35(0 TO 15);  -- ufix35 [16]
  SIGNAL get_min6_out1                    : vector_of_std_logic_vector35(0 TO 15);  -- ufix35 [16]
  SIGNAL get_min7_out1                    : vector_of_std_logic_vector35(0 TO 15);  -- ufix35 [16]
  SIGNAL get_min7_out1_signed             : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]
  SIGNAL get_min7_out1_1                  : vector_of_signed35(0 TO 15);  -- sfix35_En22 [16]

BEGIN
  u_get_min1 : soft_demodulation_src_get_min1_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              a => a_2,  -- sfix35_En22 [16]
              b => b_2,  -- sfix35_En22 [16]
              min => get_min1_out1  -- sfix35_En22 [16]
              );

  u_get_min2 : soft_demodulation_src_get_min2_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              a => a1_2,  -- sfix35_En22 [16]
              b => b1_2,  -- sfix35_En22 [16]
              min => get_min2_out1  -- sfix35_En22 [16]
              );

  u_get_min5 : soft_demodulation_src_get_min5_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              a => get_min1_out1,  -- sfix35_En22 [16]
              b => get_min2_out1,  -- sfix35_En22 [16]
              min => get_min5_out1  -- sfix35_En22 [16]
              );

  u_get_min3 : soft_demodulation_src_get_min3_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              a => a2_2,  -- sfix35_En22 [16]
              b => b2_2,  -- sfix35_En22 [16]
              min => get_min3_out1  -- sfix35_En22 [16]
              );

  u_get_min4 : soft_demodulation_src_get_min4_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              a => a3_2,  -- sfix35_En22 [16]
              b => b3_2,  -- sfix35_En22 [16]
              min => get_min4_out1  -- sfix35_En22 [16]
              );

  u_get_min6 : soft_demodulation_src_get_min6_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              a => get_min3_out1,  -- sfix35_En22 [16]
              b => get_min4_out1,  -- sfix35_En22 [16]
              min => get_min6_out1  -- sfix35_En22 [16]
              );

  u_get_min7 : soft_demodulation_src_get_min7_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              a => get_min5_out1,  -- sfix35_En22 [16]
              b => get_min6_out1,  -- sfix35_En22 [16]
              min => get_min7_out1  -- sfix35_En22 [16]
              );

  outputgen17: FOR k IN 0 TO 15 GENERATE
    a_signed(k) <= signed(a(k));
  END GENERATE;

  outputgen16: FOR k IN 0 TO 15 GENERATE
    b_signed(k) <= signed(b(k));
  END GENERATE;

  in_0_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      a_1 <= (OTHERS => to_signed(0, 35));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        a_1 <= a_signed;
      END IF;
    END IF;
  END PROCESS in_0_pipe_process;


  outputgen15: FOR k IN 0 TO 15 GENERATE
    a_2(k) <= std_logic_vector(a_1(k));
  END GENERATE;

  in_1_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      b_1 <= (OTHERS => to_signed(0, 35));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        b_1 <= b_signed;
      END IF;
    END IF;
  END PROCESS in_1_pipe_process;


  outputgen14: FOR k IN 0 TO 15 GENERATE
    b_2(k) <= std_logic_vector(b_1(k));
  END GENERATE;

  outputgen13: FOR k IN 0 TO 15 GENERATE
    a1_signed(k) <= signed(a1(k));
  END GENERATE;

  outputgen12: FOR k IN 0 TO 15 GENERATE
    b1_signed(k) <= signed(b1(k));
  END GENERATE;

  in_2_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      a1_1 <= (OTHERS => to_signed(0, 35));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        a1_1 <= a1_signed;
      END IF;
    END IF;
  END PROCESS in_2_pipe_process;


  outputgen11: FOR k IN 0 TO 15 GENERATE
    a1_2(k) <= std_logic_vector(a1_1(k));
  END GENERATE;

  in_3_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      b1_1 <= (OTHERS => to_signed(0, 35));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        b1_1 <= b1_signed;
      END IF;
    END IF;
  END PROCESS in_3_pipe_process;


  outputgen10: FOR k IN 0 TO 15 GENERATE
    b1_2(k) <= std_logic_vector(b1_1(k));
  END GENERATE;

  outputgen9: FOR k IN 0 TO 15 GENERATE
    a2_signed(k) <= signed(a2(k));
  END GENERATE;

  outputgen8: FOR k IN 0 TO 15 GENERATE
    b2_signed(k) <= signed(b2(k));
  END GENERATE;

  in_4_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      a2_1 <= (OTHERS => to_signed(0, 35));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        a2_1 <= a2_signed;
      END IF;
    END IF;
  END PROCESS in_4_pipe_process;


  outputgen7: FOR k IN 0 TO 15 GENERATE
    a2_2(k) <= std_logic_vector(a2_1(k));
  END GENERATE;

  in_5_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      b2_1 <= (OTHERS => to_signed(0, 35));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        b2_1 <= b2_signed;
      END IF;
    END IF;
  END PROCESS in_5_pipe_process;


  outputgen6: FOR k IN 0 TO 15 GENERATE
    b2_2(k) <= std_logic_vector(b2_1(k));
  END GENERATE;

  outputgen5: FOR k IN 0 TO 15 GENERATE
    a3_signed(k) <= signed(a3(k));
  END GENERATE;

  outputgen4: FOR k IN 0 TO 15 GENERATE
    b3_signed(k) <= signed(b3(k));
  END GENERATE;

  in_6_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      a3_1 <= (OTHERS => to_signed(0, 35));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        a3_1 <= a3_signed;
      END IF;
    END IF;
  END PROCESS in_6_pipe_process;


  outputgen3: FOR k IN 0 TO 15 GENERATE
    a3_2(k) <= std_logic_vector(a3_1(k));
  END GENERATE;

  in_7_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      b3_1 <= (OTHERS => to_signed(0, 35));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        b3_1 <= b3_signed;
      END IF;
    END IF;
  END PROCESS in_7_pipe_process;


  outputgen2: FOR k IN 0 TO 15 GENERATE
    b3_2(k) <= std_logic_vector(b3_1(k));
  END GENERATE;

  outputgen1: FOR k IN 0 TO 15 GENERATE
    get_min7_out1_signed(k) <= signed(get_min7_out1(k));
  END GENERATE;

  out_0_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      get_min7_out1_1 <= (OTHERS => to_signed(0, 35));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        get_min7_out1_1 <= get_min7_out1_signed;
      END IF;
    END IF;
  END PROCESS out_0_pipe_process;


  outputgen: FOR k IN 0 TO 15 GENERATE
    min(k) <= std_logic_vector(get_min7_out1_1(k));
  END GENERATE;

END rtl;

