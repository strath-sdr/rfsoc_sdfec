-- -------------------------------------------------------------
-- 
-- File Name: hdl_32bits_hmm\hdlsrc\fec_ber_hw_V2\soft_demodulation_src_Subsystem2_block.vhd
-- Created: 2022-10-27 17:56:31
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: soft_demodulation_src_Subsystem2_block
-- Source Path: fec_ber_hw_V2/Soft Demodulation/Subsystem2
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.soft_demodulation_src_Soft_Demodulation_pkg.ALL;

ENTITY soft_demodulation_src_Subsystem2_block IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        valid_in                          :   IN    std_logic;
        data_in                           :   IN    vector_of_std_logic_vector8(0 TO 15);  -- uint8 [16]
        tvalid_out                        :   OUT   std_logic;
        data_out                          :   OUT   vector_of_std_logic_vector32(0 TO 15)  -- uint32 [16]
        );
END soft_demodulation_src_Subsystem2_block;


ARCHITECTURE rtl OF soft_demodulation_src_Subsystem2_block IS

  -- Component Declarations
  COMPONENT soft_demodulation_src_latch
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          en                              :   IN    std_logic;
          data_in                         :   IN    vector_of_std_logic_vector8(0 TO 15);  -- uint8 [16]
          data_out                        :   OUT   vector_of_std_logic_vector8(0 TO 15)  -- uint8 [16]
          );
  END COMPONENT;

  COMPONENT soft_demodulation_src_latch1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          en                              :   IN    std_logic;
          data_in                         :   IN    vector_of_std_logic_vector8(0 TO 15);  -- uint8 [16]
          data_out                        :   OUT   vector_of_std_logic_vector8(0 TO 15)  -- uint8 [16]
          );
  END COMPONENT;

  COMPONENT soft_demodulation_src_latch2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          en                              :   IN    std_logic;
          data_in                         :   IN    vector_of_std_logic_vector8(0 TO 15);  -- uint8 [16]
          data_out                        :   OUT   vector_of_std_logic_vector8(0 TO 15)  -- uint8 [16]
          );
  END COMPONENT;

  COMPONENT soft_demodulation_src_latch3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          en                              :   IN    std_logic;
          data_in                         :   IN    vector_of_std_logic_vector8(0 TO 15);  -- uint8 [16]
          data_out                        :   OUT   vector_of_std_logic_vector8(0 TO 15)  -- uint8 [16]
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : soft_demodulation_src_latch
    USE ENTITY work.soft_demodulation_src_latch(rtl);

  FOR ALL : soft_demodulation_src_latch1
    USE ENTITY work.soft_demodulation_src_latch1(rtl);

  FOR ALL : soft_demodulation_src_latch2
    USE ENTITY work.soft_demodulation_src_latch2(rtl);

  FOR ALL : soft_demodulation_src_latch3
    USE ENTITY work.soft_demodulation_src_latch3(rtl);

  -- Signals
  SIGNAL HDL_Counter_out1                 : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Constant_out1                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Equal_relop1                     : std_logic;
  SIGNAL latch_out1                       : vector_of_std_logic_vector8(0 TO 15);  -- ufix8 [16]
  SIGNAL data_in_unsigned                 : vector_of_unsigned8(0 TO 15);  -- uint8 [16]
  SIGNAL Delay1_out1                      : vector_of_unsigned8(0 TO 15);  -- uint8 [16]
  SIGNAL Delay1_out1_1                    : vector_of_std_logic_vector8(0 TO 15);  -- ufix8 [16]
  SIGNAL latch1_out1                      : vector_of_std_logic_vector8(0 TO 15);  -- ufix8 [16]
  SIGNAL data_in_0                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL data_in_1                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL data_in_2                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL data_in_3                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL data_in_4                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL data_in_5                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL data_in_6                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL data_in_7                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL data_in_8                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL data_in_9                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL data_in_10                       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL data_in_11                       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL data_in_12                       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL data_in_13                       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL data_in_14                       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL data_in_15                       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay_out_1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay_1_reg                      : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL Delay_out_2                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay_out_3                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay_out_4                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay_out_5                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay_out_6                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay_out_7                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay_out_8                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay_out_9                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay_out_10                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay_out_11                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay_out_12                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay_out_13                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay_out_14                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay_out_15                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay_out_16                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay_1_reg_1                    : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL Delay_1_reg_2                    : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL Delay_1_reg_3                    : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL Delay_1_reg_4                    : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL Delay_1_reg_5                    : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL Delay_1_reg_6                    : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL Delay_1_reg_7                    : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL Delay_1_reg_8                    : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL Delay_1_reg_9                    : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL Delay_1_reg_10                   : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL Delay_1_reg_11                   : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL Delay_1_reg_12                   : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL Delay_1_reg_13                   : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL Delay_1_reg_14                   : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL Delay_1_reg_15                   : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL Delay_out1                       : vector_of_unsigned8(0 TO 15);  -- uint8 [16]
  SIGNAL Delay_out1_1                     : vector_of_std_logic_vector8(0 TO 15);  -- ufix8 [16]
  SIGNAL latch2_out1                      : vector_of_std_logic_vector8(0 TO 15);  -- ufix8 [16]
  SIGNAL data_in_0_1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL data_in_1_1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL data_in_2_1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL data_in_3_1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL data_in_4_1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL data_in_5_1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL data_in_6_1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL data_in_7_1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL data_in_8_1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL data_in_9_1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL data_in_10_1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL data_in_11_1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL data_in_12_1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL data_in_13_1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL data_in_14_1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL data_in_15_1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay3_out_1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay3_1_reg                     : vector_of_unsigned8(0 TO 2);  -- ufix8 [3]
  SIGNAL Delay3_out_2                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay3_out_3                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay3_out_4                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay3_out_5                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay3_out_6                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay3_out_7                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay3_out_8                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay3_out_9                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay3_out_10                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay3_out_11                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay3_out_12                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay3_out_13                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay3_out_14                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay3_out_15                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay3_out_16                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay3_1_reg_1                   : vector_of_unsigned8(0 TO 2);  -- ufix8 [3]
  SIGNAL Delay3_1_reg_2                   : vector_of_unsigned8(0 TO 2);  -- ufix8 [3]
  SIGNAL Delay3_1_reg_3                   : vector_of_unsigned8(0 TO 2);  -- ufix8 [3]
  SIGNAL Delay3_1_reg_4                   : vector_of_unsigned8(0 TO 2);  -- ufix8 [3]
  SIGNAL Delay3_1_reg_5                   : vector_of_unsigned8(0 TO 2);  -- ufix8 [3]
  SIGNAL Delay3_1_reg_6                   : vector_of_unsigned8(0 TO 2);  -- ufix8 [3]
  SIGNAL Delay3_1_reg_7                   : vector_of_unsigned8(0 TO 2);  -- ufix8 [3]
  SIGNAL Delay3_1_reg_8                   : vector_of_unsigned8(0 TO 2);  -- ufix8 [3]
  SIGNAL Delay3_1_reg_9                   : vector_of_unsigned8(0 TO 2);  -- ufix8 [3]
  SIGNAL Delay3_1_reg_10                  : vector_of_unsigned8(0 TO 2);  -- ufix8 [3]
  SIGNAL Delay3_1_reg_11                  : vector_of_unsigned8(0 TO 2);  -- ufix8 [3]
  SIGNAL Delay3_1_reg_12                  : vector_of_unsigned8(0 TO 2);  -- ufix8 [3]
  SIGNAL Delay3_1_reg_13                  : vector_of_unsigned8(0 TO 2);  -- ufix8 [3]
  SIGNAL Delay3_1_reg_14                  : vector_of_unsigned8(0 TO 2);  -- ufix8 [3]
  SIGNAL Delay3_1_reg_15                  : vector_of_unsigned8(0 TO 2);  -- ufix8 [3]
  SIGNAL Delay3_out1                      : vector_of_unsigned8(0 TO 15);  -- uint8 [16]
  SIGNAL Delay3_out1_1                    : vector_of_std_logic_vector8(0 TO 15);  -- ufix8 [16]
  SIGNAL latch3_out1                      : vector_of_std_logic_vector8(0 TO 15);  -- ufix8 [16]
  SIGNAL latch_out1_0                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch1_out1_0                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch2_out1_0                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch3_out1_0                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch_out1_1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch1_out1_1                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch2_out1_1                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch3_out1_1                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch_out1_2                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch1_out1_2                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch2_out1_2                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch3_out1_2                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch_out1_3                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch1_out1_3                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch2_out1_3                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch3_out1_3                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch_out1_4                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch1_out1_4                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch2_out1_4                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch3_out1_4                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch_out1_5                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch1_out1_5                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch2_out1_5                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch3_out1_5                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch_out1_6                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch1_out1_6                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch2_out1_6                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch3_out1_6                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch_out1_7                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch1_out1_7                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch2_out1_7                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch3_out1_7                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch_out1_8                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch1_out1_8                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch2_out1_8                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch3_out1_8                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch_out1_9                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch1_out1_9                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch2_out1_9                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch3_out1_9                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch_out1_10                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch1_out1_10                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch2_out1_10                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch3_out1_10                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch_out1_11                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch1_out1_11                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch2_out1_11                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch3_out1_11                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch_out1_12                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch1_out1_12                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch2_out1_12                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch3_out1_12                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch_out1_13                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch1_out1_13                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch2_out1_13                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch3_out1_13                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch_out1_14                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch1_out1_14                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch2_out1_14                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch3_out1_14                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch_out1_15                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch1_out1_15                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch2_out1_15                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL latch3_out1_15                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bit_Concat_out1                  : vector_of_unsigned32(0 TO 15);  -- uint32 [16]

BEGIN
  u_latch : soft_demodulation_src_latch
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              en => Equal_relop1,
              data_in => data_in,  -- uint8 [16]
              data_out => latch_out1  -- uint8 [16]
              );

  u_latch1 : soft_demodulation_src_latch1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              en => Equal_relop1,
              data_in => Delay1_out1_1,  -- uint8 [16]
              data_out => latch1_out1  -- uint8 [16]
              );

  u_latch2 : soft_demodulation_src_latch2
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              en => Equal_relop1,
              data_in => Delay_out1_1,  -- uint8 [16]
              data_out => latch2_out1  -- uint8 [16]
              );

  u_latch3 : soft_demodulation_src_latch3
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              en => Equal_relop1,
              data_in => Delay3_out1_1,  -- uint8 [16]
              data_out => latch3_out1  -- uint8 [16]
              );

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 3
  HDL_Counter_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter_out1 <= to_unsigned(16#0#, 2);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND valid_in = '1' THEN
        HDL_Counter_out1 <= HDL_Counter_out1 + to_unsigned(16#1#, 2);
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  Constant_out1 <= to_unsigned(16#03#, 8);

  
  Equal_relop1 <= '1' WHEN resize(HDL_Counter_out1, 8) = Constant_out1 ELSE
      '0';

  outputgen4: FOR k IN 0 TO 15 GENERATE
    data_in_unsigned(k) <= unsigned(data_in(k));
  END GENERATE;

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1 <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_out1 <= data_in_unsigned;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  outputgen3: FOR k IN 0 TO 15 GENERATE
    Delay1_out1_1(k) <= std_logic_vector(Delay1_out1(k));
  END GENERATE;

  data_in_0 <= unsigned(data_in(0));

  Delay_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_1_reg <= (OTHERS => to_unsigned(16#00#, 8));
      Delay_1_reg_1 <= (OTHERS => to_unsigned(16#00#, 8));
      Delay_1_reg_2 <= (OTHERS => to_unsigned(16#00#, 8));
      Delay_1_reg_3 <= (OTHERS => to_unsigned(16#00#, 8));
      Delay_1_reg_4 <= (OTHERS => to_unsigned(16#00#, 8));
      Delay_1_reg_5 <= (OTHERS => to_unsigned(16#00#, 8));
      Delay_1_reg_6 <= (OTHERS => to_unsigned(16#00#, 8));
      Delay_1_reg_7 <= (OTHERS => to_unsigned(16#00#, 8));
      Delay_1_reg_8 <= (OTHERS => to_unsigned(16#00#, 8));
      Delay_1_reg_9 <= (OTHERS => to_unsigned(16#00#, 8));
      Delay_1_reg_10 <= (OTHERS => to_unsigned(16#00#, 8));
      Delay_1_reg_11 <= (OTHERS => to_unsigned(16#00#, 8));
      Delay_1_reg_12 <= (OTHERS => to_unsigned(16#00#, 8));
      Delay_1_reg_13 <= (OTHERS => to_unsigned(16#00#, 8));
      Delay_1_reg_14 <= (OTHERS => to_unsigned(16#00#, 8));
      Delay_1_reg_15 <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_1_reg(0) <= data_in_0;
        Delay_1_reg(1) <= Delay_1_reg(0);
        Delay_1_reg_1(0) <= data_in_1;
        Delay_1_reg_1(1) <= Delay_1_reg_1(0);
        Delay_1_reg_2(0) <= data_in_2;
        Delay_1_reg_2(1) <= Delay_1_reg_2(0);
        Delay_1_reg_3(0) <= data_in_3;
        Delay_1_reg_3(1) <= Delay_1_reg_3(0);
        Delay_1_reg_4(0) <= data_in_4;
        Delay_1_reg_4(1) <= Delay_1_reg_4(0);
        Delay_1_reg_5(0) <= data_in_5;
        Delay_1_reg_5(1) <= Delay_1_reg_5(0);
        Delay_1_reg_6(0) <= data_in_6;
        Delay_1_reg_6(1) <= Delay_1_reg_6(0);
        Delay_1_reg_7(0) <= data_in_7;
        Delay_1_reg_7(1) <= Delay_1_reg_7(0);
        Delay_1_reg_8(0) <= data_in_8;
        Delay_1_reg_8(1) <= Delay_1_reg_8(0);
        Delay_1_reg_9(0) <= data_in_9;
        Delay_1_reg_9(1) <= Delay_1_reg_9(0);
        Delay_1_reg_10(0) <= data_in_10;
        Delay_1_reg_10(1) <= Delay_1_reg_10(0);
        Delay_1_reg_11(0) <= data_in_11;
        Delay_1_reg_11(1) <= Delay_1_reg_11(0);
        Delay_1_reg_12(0) <= data_in_12;
        Delay_1_reg_12(1) <= Delay_1_reg_12(0);
        Delay_1_reg_13(0) <= data_in_13;
        Delay_1_reg_13(1) <= Delay_1_reg_13(0);
        Delay_1_reg_14(0) <= data_in_14;
        Delay_1_reg_14(1) <= Delay_1_reg_14(0);
        Delay_1_reg_15(0) <= data_in_15;
        Delay_1_reg_15(1) <= Delay_1_reg_15(0);
      END IF;
    END IF;
  END PROCESS Delay_1_process;

  Delay_out_1 <= Delay_1_reg(1);
  Delay_out_2 <= Delay_1_reg_1(1);
  Delay_out_3 <= Delay_1_reg_2(1);
  Delay_out_4 <= Delay_1_reg_3(1);
  Delay_out_5 <= Delay_1_reg_4(1);
  Delay_out_6 <= Delay_1_reg_5(1);
  Delay_out_7 <= Delay_1_reg_6(1);
  Delay_out_8 <= Delay_1_reg_7(1);
  Delay_out_9 <= Delay_1_reg_8(1);
  Delay_out_10 <= Delay_1_reg_9(1);
  Delay_out_11 <= Delay_1_reg_10(1);
  Delay_out_12 <= Delay_1_reg_11(1);
  Delay_out_13 <= Delay_1_reg_12(1);
  Delay_out_14 <= Delay_1_reg_13(1);
  Delay_out_15 <= Delay_1_reg_14(1);
  Delay_out_16 <= Delay_1_reg_15(1);

  data_in_1 <= unsigned(data_in(1));

  data_in_2 <= unsigned(data_in(2));

  data_in_3 <= unsigned(data_in(3));

  data_in_4 <= unsigned(data_in(4));

  data_in_5 <= unsigned(data_in(5));

  data_in_6 <= unsigned(data_in(6));

  data_in_7 <= unsigned(data_in(7));

  data_in_8 <= unsigned(data_in(8));

  data_in_9 <= unsigned(data_in(9));

  data_in_10 <= unsigned(data_in(10));

  data_in_11 <= unsigned(data_in(11));

  data_in_12 <= unsigned(data_in(12));

  data_in_13 <= unsigned(data_in(13));

  data_in_14 <= unsigned(data_in(14));

  data_in_15 <= unsigned(data_in(15));

  Delay_out1(0) <= Delay_out_1;
  Delay_out1(1) <= Delay_out_2;
  Delay_out1(2) <= Delay_out_3;
  Delay_out1(3) <= Delay_out_4;
  Delay_out1(4) <= Delay_out_5;
  Delay_out1(5) <= Delay_out_6;
  Delay_out1(6) <= Delay_out_7;
  Delay_out1(7) <= Delay_out_8;
  Delay_out1(8) <= Delay_out_9;
  Delay_out1(9) <= Delay_out_10;
  Delay_out1(10) <= Delay_out_11;
  Delay_out1(11) <= Delay_out_12;
  Delay_out1(12) <= Delay_out_13;
  Delay_out1(13) <= Delay_out_14;
  Delay_out1(14) <= Delay_out_15;
  Delay_out1(15) <= Delay_out_16;

  outputgen2: FOR k IN 0 TO 15 GENERATE
    Delay_out1_1(k) <= std_logic_vector(Delay_out1(k));
  END GENERATE;

  data_in_0_1 <= unsigned(data_in(0));

  Delay3_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_1_reg <= (OTHERS => to_unsigned(16#00#, 8));
      Delay3_1_reg_1 <= (OTHERS => to_unsigned(16#00#, 8));
      Delay3_1_reg_2 <= (OTHERS => to_unsigned(16#00#, 8));
      Delay3_1_reg_3 <= (OTHERS => to_unsigned(16#00#, 8));
      Delay3_1_reg_4 <= (OTHERS => to_unsigned(16#00#, 8));
      Delay3_1_reg_5 <= (OTHERS => to_unsigned(16#00#, 8));
      Delay3_1_reg_6 <= (OTHERS => to_unsigned(16#00#, 8));
      Delay3_1_reg_7 <= (OTHERS => to_unsigned(16#00#, 8));
      Delay3_1_reg_8 <= (OTHERS => to_unsigned(16#00#, 8));
      Delay3_1_reg_9 <= (OTHERS => to_unsigned(16#00#, 8));
      Delay3_1_reg_10 <= (OTHERS => to_unsigned(16#00#, 8));
      Delay3_1_reg_11 <= (OTHERS => to_unsigned(16#00#, 8));
      Delay3_1_reg_12 <= (OTHERS => to_unsigned(16#00#, 8));
      Delay3_1_reg_13 <= (OTHERS => to_unsigned(16#00#, 8));
      Delay3_1_reg_14 <= (OTHERS => to_unsigned(16#00#, 8));
      Delay3_1_reg_15 <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_1_reg(0) <= data_in_0_1;
        Delay3_1_reg(1 TO 2) <= Delay3_1_reg(0 TO 1);
        Delay3_1_reg_1(0) <= data_in_1_1;
        Delay3_1_reg_1(1 TO 2) <= Delay3_1_reg_1(0 TO 1);
        Delay3_1_reg_2(0) <= data_in_2_1;
        Delay3_1_reg_2(1 TO 2) <= Delay3_1_reg_2(0 TO 1);
        Delay3_1_reg_3(0) <= data_in_3_1;
        Delay3_1_reg_3(1 TO 2) <= Delay3_1_reg_3(0 TO 1);
        Delay3_1_reg_4(0) <= data_in_4_1;
        Delay3_1_reg_4(1 TO 2) <= Delay3_1_reg_4(0 TO 1);
        Delay3_1_reg_5(0) <= data_in_5_1;
        Delay3_1_reg_5(1 TO 2) <= Delay3_1_reg_5(0 TO 1);
        Delay3_1_reg_6(0) <= data_in_6_1;
        Delay3_1_reg_6(1 TO 2) <= Delay3_1_reg_6(0 TO 1);
        Delay3_1_reg_7(0) <= data_in_7_1;
        Delay3_1_reg_7(1 TO 2) <= Delay3_1_reg_7(0 TO 1);
        Delay3_1_reg_8(0) <= data_in_8_1;
        Delay3_1_reg_8(1 TO 2) <= Delay3_1_reg_8(0 TO 1);
        Delay3_1_reg_9(0) <= data_in_9_1;
        Delay3_1_reg_9(1 TO 2) <= Delay3_1_reg_9(0 TO 1);
        Delay3_1_reg_10(0) <= data_in_10_1;
        Delay3_1_reg_10(1 TO 2) <= Delay3_1_reg_10(0 TO 1);
        Delay3_1_reg_11(0) <= data_in_11_1;
        Delay3_1_reg_11(1 TO 2) <= Delay3_1_reg_11(0 TO 1);
        Delay3_1_reg_12(0) <= data_in_12_1;
        Delay3_1_reg_12(1 TO 2) <= Delay3_1_reg_12(0 TO 1);
        Delay3_1_reg_13(0) <= data_in_13_1;
        Delay3_1_reg_13(1 TO 2) <= Delay3_1_reg_13(0 TO 1);
        Delay3_1_reg_14(0) <= data_in_14_1;
        Delay3_1_reg_14(1 TO 2) <= Delay3_1_reg_14(0 TO 1);
        Delay3_1_reg_15(0) <= data_in_15_1;
        Delay3_1_reg_15(1 TO 2) <= Delay3_1_reg_15(0 TO 1);
      END IF;
    END IF;
  END PROCESS Delay3_1_process;

  Delay3_out_1 <= Delay3_1_reg(2);
  Delay3_out_2 <= Delay3_1_reg_1(2);
  Delay3_out_3 <= Delay3_1_reg_2(2);
  Delay3_out_4 <= Delay3_1_reg_3(2);
  Delay3_out_5 <= Delay3_1_reg_4(2);
  Delay3_out_6 <= Delay3_1_reg_5(2);
  Delay3_out_7 <= Delay3_1_reg_6(2);
  Delay3_out_8 <= Delay3_1_reg_7(2);
  Delay3_out_9 <= Delay3_1_reg_8(2);
  Delay3_out_10 <= Delay3_1_reg_9(2);
  Delay3_out_11 <= Delay3_1_reg_10(2);
  Delay3_out_12 <= Delay3_1_reg_11(2);
  Delay3_out_13 <= Delay3_1_reg_12(2);
  Delay3_out_14 <= Delay3_1_reg_13(2);
  Delay3_out_15 <= Delay3_1_reg_14(2);
  Delay3_out_16 <= Delay3_1_reg_15(2);

  data_in_1_1 <= unsigned(data_in(1));

  data_in_2_1 <= unsigned(data_in(2));

  data_in_3_1 <= unsigned(data_in(3));

  data_in_4_1 <= unsigned(data_in(4));

  data_in_5_1 <= unsigned(data_in(5));

  data_in_6_1 <= unsigned(data_in(6));

  data_in_7_1 <= unsigned(data_in(7));

  data_in_8_1 <= unsigned(data_in(8));

  data_in_9_1 <= unsigned(data_in(9));

  data_in_10_1 <= unsigned(data_in(10));

  data_in_11_1 <= unsigned(data_in(11));

  data_in_12_1 <= unsigned(data_in(12));

  data_in_13_1 <= unsigned(data_in(13));

  data_in_14_1 <= unsigned(data_in(14));

  data_in_15_1 <= unsigned(data_in(15));

  Delay3_out1(0) <= Delay3_out_1;
  Delay3_out1(1) <= Delay3_out_2;
  Delay3_out1(2) <= Delay3_out_3;
  Delay3_out1(3) <= Delay3_out_4;
  Delay3_out1(4) <= Delay3_out_5;
  Delay3_out1(5) <= Delay3_out_6;
  Delay3_out1(6) <= Delay3_out_7;
  Delay3_out1(7) <= Delay3_out_8;
  Delay3_out1(8) <= Delay3_out_9;
  Delay3_out1(9) <= Delay3_out_10;
  Delay3_out1(10) <= Delay3_out_11;
  Delay3_out1(11) <= Delay3_out_12;
  Delay3_out1(12) <= Delay3_out_13;
  Delay3_out1(13) <= Delay3_out_14;
  Delay3_out1(14) <= Delay3_out_15;
  Delay3_out1(15) <= Delay3_out_16;

  outputgen1: FOR k IN 0 TO 15 GENERATE
    Delay3_out1_1(k) <= std_logic_vector(Delay3_out1(k));
  END GENERATE;

  latch_out1_0 <= unsigned(latch_out1(0));

  latch1_out1_0 <= unsigned(latch1_out1(0));

  latch2_out1_0 <= unsigned(latch2_out1(0));

  latch3_out1_0 <= unsigned(latch3_out1(0));

  latch_out1_1 <= unsigned(latch_out1(1));

  latch1_out1_1 <= unsigned(latch1_out1(1));

  latch2_out1_1 <= unsigned(latch2_out1(1));

  latch3_out1_1 <= unsigned(latch3_out1(1));

  latch_out1_2 <= unsigned(latch_out1(2));

  latch1_out1_2 <= unsigned(latch1_out1(2));

  latch2_out1_2 <= unsigned(latch2_out1(2));

  latch3_out1_2 <= unsigned(latch3_out1(2));

  latch_out1_3 <= unsigned(latch_out1(3));

  latch1_out1_3 <= unsigned(latch1_out1(3));

  latch2_out1_3 <= unsigned(latch2_out1(3));

  latch3_out1_3 <= unsigned(latch3_out1(3));

  latch_out1_4 <= unsigned(latch_out1(4));

  latch1_out1_4 <= unsigned(latch1_out1(4));

  latch2_out1_4 <= unsigned(latch2_out1(4));

  latch3_out1_4 <= unsigned(latch3_out1(4));

  latch_out1_5 <= unsigned(latch_out1(5));

  latch1_out1_5 <= unsigned(latch1_out1(5));

  latch2_out1_5 <= unsigned(latch2_out1(5));

  latch3_out1_5 <= unsigned(latch3_out1(5));

  latch_out1_6 <= unsigned(latch_out1(6));

  latch1_out1_6 <= unsigned(latch1_out1(6));

  latch2_out1_6 <= unsigned(latch2_out1(6));

  latch3_out1_6 <= unsigned(latch3_out1(6));

  latch_out1_7 <= unsigned(latch_out1(7));

  latch1_out1_7 <= unsigned(latch1_out1(7));

  latch2_out1_7 <= unsigned(latch2_out1(7));

  latch3_out1_7 <= unsigned(latch3_out1(7));

  latch_out1_8 <= unsigned(latch_out1(8));

  latch1_out1_8 <= unsigned(latch1_out1(8));

  latch2_out1_8 <= unsigned(latch2_out1(8));

  latch3_out1_8 <= unsigned(latch3_out1(8));

  latch_out1_9 <= unsigned(latch_out1(9));

  latch1_out1_9 <= unsigned(latch1_out1(9));

  latch2_out1_9 <= unsigned(latch2_out1(9));

  latch3_out1_9 <= unsigned(latch3_out1(9));

  latch_out1_10 <= unsigned(latch_out1(10));

  latch1_out1_10 <= unsigned(latch1_out1(10));

  latch2_out1_10 <= unsigned(latch2_out1(10));

  latch3_out1_10 <= unsigned(latch3_out1(10));

  latch_out1_11 <= unsigned(latch_out1(11));

  latch1_out1_11 <= unsigned(latch1_out1(11));

  latch2_out1_11 <= unsigned(latch2_out1(11));

  latch3_out1_11 <= unsigned(latch3_out1(11));

  latch_out1_12 <= unsigned(latch_out1(12));

  latch1_out1_12 <= unsigned(latch1_out1(12));

  latch2_out1_12 <= unsigned(latch2_out1(12));

  latch3_out1_12 <= unsigned(latch3_out1(12));

  latch_out1_13 <= unsigned(latch_out1(13));

  latch1_out1_13 <= unsigned(latch1_out1(13));

  latch2_out1_13 <= unsigned(latch2_out1(13));

  latch3_out1_13 <= unsigned(latch3_out1(13));

  latch_out1_14 <= unsigned(latch_out1(14));

  latch1_out1_14 <= unsigned(latch1_out1(14));

  latch2_out1_14 <= unsigned(latch2_out1(14));

  latch3_out1_14 <= unsigned(latch3_out1(14));

  latch_out1_15 <= unsigned(latch_out1(15));

  latch1_out1_15 <= unsigned(latch1_out1(15));

  latch2_out1_15 <= unsigned(latch2_out1(15));

  latch3_out1_15 <= unsigned(latch3_out1(15));

  Bit_Concat_out1(0) <= latch_out1_0 & latch1_out1_0 & latch2_out1_0 & latch3_out1_0;
  Bit_Concat_out1(1) <= latch_out1_1 & latch1_out1_1 & latch2_out1_1 & latch3_out1_1;
  Bit_Concat_out1(2) <= latch_out1_2 & latch1_out1_2 & latch2_out1_2 & latch3_out1_2;
  Bit_Concat_out1(3) <= latch_out1_3 & latch1_out1_3 & latch2_out1_3 & latch3_out1_3;
  Bit_Concat_out1(4) <= latch_out1_4 & latch1_out1_4 & latch2_out1_4 & latch3_out1_4;
  Bit_Concat_out1(5) <= latch_out1_5 & latch1_out1_5 & latch2_out1_5 & latch3_out1_5;
  Bit_Concat_out1(6) <= latch_out1_6 & latch1_out1_6 & latch2_out1_6 & latch3_out1_6;
  Bit_Concat_out1(7) <= latch_out1_7 & latch1_out1_7 & latch2_out1_7 & latch3_out1_7;
  Bit_Concat_out1(8) <= latch_out1_8 & latch1_out1_8 & latch2_out1_8 & latch3_out1_8;
  Bit_Concat_out1(9) <= latch_out1_9 & latch1_out1_9 & latch2_out1_9 & latch3_out1_9;
  Bit_Concat_out1(10) <= latch_out1_10 & latch1_out1_10 & latch2_out1_10 & latch3_out1_10;
  Bit_Concat_out1(11) <= latch_out1_11 & latch1_out1_11 & latch2_out1_11 & latch3_out1_11;
  Bit_Concat_out1(12) <= latch_out1_12 & latch1_out1_12 & latch2_out1_12 & latch3_out1_12;
  Bit_Concat_out1(13) <= latch_out1_13 & latch1_out1_13 & latch2_out1_13 & latch3_out1_13;
  Bit_Concat_out1(14) <= latch_out1_14 & latch1_out1_14 & latch2_out1_14 & latch3_out1_14;
  Bit_Concat_out1(15) <= latch_out1_15 & latch1_out1_15 & latch2_out1_15 & latch3_out1_15;

  outputgen: FOR k IN 0 TO 15 GENERATE
    data_out(k) <= std_logic_vector(Bit_Concat_out1(k));
  END GENERATE;

  tvalid_out <= Equal_relop1;

END rtl;

