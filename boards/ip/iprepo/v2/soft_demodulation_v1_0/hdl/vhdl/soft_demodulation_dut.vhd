-- -------------------------------------------------------------
-- 
-- File Name: hdl_32bits_hmm\hdlsrc\fec_ber_hw_V2\soft_demodulation_dut.vhd
-- Created: 2022-10-27 17:56:37
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: soft_demodulation_dut
-- Source Path: soft_demodulation/soft_demodulation_dut
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY soft_demodulation_dut IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        dut_enable                        :   IN    std_logic;  -- ufix1
        aximm_llr_scale                   :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32_En22
        aximm_llr_mag_reset               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        s00_axis_Q_tvalid                 :   IN    std_logic;  -- ufix1
        s00_axis_Q_tdata                  :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
        s01_axis_Q_tvalid                 :   IN    std_logic;  -- ufix1
        s01_axis_Q_tdata                  :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
        s00_axis_I_tvalid                 :   IN    std_logic;  -- ufix1
        s00_axis_I_tdata                  :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
        s01_axis_I_tvalid                 :   IN    std_logic;  -- ufix1
        s01_axis_I_tdata                  :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
        ce_out                            :   OUT   std_logic;  -- ufix1
        aximm_llr_max                     :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32_En24
        m00_axis_tvalid                   :   OUT   std_logic;  -- ufix1
        m00_axis_tdata                    :   OUT   std_logic_vector(127 DOWNTO 0);  -- ufix128
        m01_axis_tvalid                   :   OUT   std_logic;  -- ufix1
        m01_axis_tdata                    :   OUT   std_logic_vector(127 DOWNTO 0);  -- ufix128
        m02_axis_tvalid                   :   OUT   std_logic;  -- ufix1
        m02_axis_tdata                    :   OUT   std_logic_vector(127 DOWNTO 0);  -- ufix128
        m03_axis_tvalid                   :   OUT   std_logic;  -- ufix1
        m03_axis_tdata                    :   OUT   std_logic_vector(127 DOWNTO 0)  -- ufix128
        );
END soft_demodulation_dut;


ARCHITECTURE rtl OF soft_demodulation_dut IS

  -- Component Declarations
  COMPONENT soft_demodulation_src_Soft_Demodulation
    PORT( clk                             :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          reset                           :   IN    std_logic;
          aximm_llr_scale                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32_En22
          aximm_llr_mag_reset             :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          s00_axis_Q_tvalid               :   IN    std_logic;  -- ufix1
          s00_axis_Q_tdata                :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
          s01_axis_Q_tvalid               :   IN    std_logic;  -- ufix1
          s01_axis_Q_tdata                :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
          s00_axis_I_tvalid               :   IN    std_logic;  -- ufix1
          s00_axis_I_tdata                :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
          s01_axis_I_tvalid               :   IN    std_logic;  -- ufix1
          s01_axis_I_tdata                :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
          ce_out                          :   OUT   std_logic;  -- ufix1
          aximm_llr_max                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32_En24
          m00_axis_tvalid                 :   OUT   std_logic;  -- ufix1
          m00_axis_tdata                  :   OUT   std_logic_vector(127 DOWNTO 0);  -- ufix128
          m01_axis_tvalid                 :   OUT   std_logic;  -- ufix1
          m01_axis_tdata                  :   OUT   std_logic_vector(127 DOWNTO 0);  -- ufix128
          m02_axis_tvalid                 :   OUT   std_logic;  -- ufix1
          m02_axis_tdata                  :   OUT   std_logic_vector(127 DOWNTO 0);  -- ufix128
          m03_axis_tvalid                 :   OUT   std_logic;  -- ufix1
          m03_axis_tdata                  :   OUT   std_logic_vector(127 DOWNTO 0)  -- ufix128
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : soft_demodulation_src_Soft_Demodulation
    USE ENTITY work.soft_demodulation_src_Soft_Demodulation(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL s00_axis_Q_tvalid_sig            : std_logic;  -- ufix1
  SIGNAL s01_axis_Q_tvalid_sig            : std_logic;  -- ufix1
  SIGNAL s00_axis_I_tvalid_sig            : std_logic;  -- ufix1
  SIGNAL s01_axis_I_tvalid_sig            : std_logic;  -- ufix1
  SIGNAL ce_out_sig                       : std_logic;  -- ufix1
  SIGNAL aximm_llr_max_sig                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL m00_axis_tvalid_sig              : std_logic;  -- ufix1
  SIGNAL m00_axis_tdata_sig               : std_logic_vector(127 DOWNTO 0);  -- ufix128
  SIGNAL m01_axis_tvalid_sig              : std_logic;  -- ufix1
  SIGNAL m01_axis_tdata_sig               : std_logic_vector(127 DOWNTO 0);  -- ufix128
  SIGNAL m02_axis_tvalid_sig              : std_logic;  -- ufix1
  SIGNAL m02_axis_tdata_sig               : std_logic_vector(127 DOWNTO 0);  -- ufix128
  SIGNAL m03_axis_tvalid_sig              : std_logic;  -- ufix1
  SIGNAL m03_axis_tdata_sig               : std_logic_vector(127 DOWNTO 0);  -- ufix128

BEGIN
  u_soft_demodulation_src_Soft_Demodulation : soft_demodulation_src_Soft_Demodulation
    PORT MAP( clk => clk,
              clk_enable => enb,
              reset => reset,
              aximm_llr_scale => aximm_llr_scale,  -- ufix32_En22
              aximm_llr_mag_reset => aximm_llr_mag_reset,  -- ufix32
              s00_axis_Q_tvalid => s00_axis_Q_tvalid_sig,  -- ufix1
              s00_axis_Q_tdata => s00_axis_Q_tdata,  -- ufix128
              s01_axis_Q_tvalid => s01_axis_Q_tvalid_sig,  -- ufix1
              s01_axis_Q_tdata => s01_axis_Q_tdata,  -- ufix128
              s00_axis_I_tvalid => s00_axis_I_tvalid_sig,  -- ufix1
              s00_axis_I_tdata => s00_axis_I_tdata,  -- ufix128
              s01_axis_I_tvalid => s01_axis_I_tvalid_sig,  -- ufix1
              s01_axis_I_tdata => s01_axis_I_tdata,  -- ufix128
              ce_out => ce_out_sig,  -- ufix1
              aximm_llr_max => aximm_llr_max_sig,  -- ufix32_En24
              m00_axis_tvalid => m00_axis_tvalid_sig,  -- ufix1
              m00_axis_tdata => m00_axis_tdata_sig,  -- ufix128
              m01_axis_tvalid => m01_axis_tvalid_sig,  -- ufix1
              m01_axis_tdata => m01_axis_tdata_sig,  -- ufix128
              m02_axis_tvalid => m02_axis_tvalid_sig,  -- ufix1
              m02_axis_tdata => m02_axis_tdata_sig,  -- ufix128
              m03_axis_tvalid => m03_axis_tvalid_sig,  -- ufix1
              m03_axis_tdata => m03_axis_tdata_sig  -- ufix128
              );

  s00_axis_Q_tvalid_sig <= s00_axis_Q_tvalid;

  s01_axis_Q_tvalid_sig <= s01_axis_Q_tvalid;

  s00_axis_I_tvalid_sig <= s00_axis_I_tvalid;

  s01_axis_I_tvalid_sig <= s01_axis_I_tvalid;

  enb <= dut_enable;

  ce_out <= ce_out_sig;

  aximm_llr_max <= aximm_llr_max_sig;

  m00_axis_tvalid <= m00_axis_tvalid_sig;

  m00_axis_tdata <= m00_axis_tdata_sig;

  m01_axis_tvalid <= m01_axis_tvalid_sig;

  m01_axis_tdata <= m01_axis_tdata_sig;

  m02_axis_tvalid <= m02_axis_tvalid_sig;

  m02_axis_tdata <= m02_axis_tdata_sig;

  m03_axis_tvalid <= m03_axis_tvalid_sig;

  m03_axis_tdata <= m03_axis_tdata_sig;

END rtl;

