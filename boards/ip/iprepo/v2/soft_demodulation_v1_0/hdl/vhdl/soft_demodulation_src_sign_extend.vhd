-- -------------------------------------------------------------
-- 
-- File Name: hdl_32bits_hmm\hdlsrc\fec_ber_hw_V2\soft_demodulation_src_sign_extend.vhd
-- Created: 2022-10-27 17:56:31
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: soft_demodulation_src_sign_extend
-- Source Path: fec_ber_hw_V2/Soft Demodulation/Soft Demodulation/sign_extend
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.soft_demodulation_src_Soft_Demodulation_pkg.ALL;

ENTITY soft_demodulation_src_sign_extend IS
  PORT( u                                 :   IN    vector_of_std_logic_vector6(0 TO 15);  -- sfix6_En2 [16]
        y                                 :   OUT   vector_of_std_logic_vector8(0 TO 15)  -- uint8 [16]
        );
END soft_demodulation_src_sign_extend;


ARCHITECTURE rtl OF soft_demodulation_src_sign_extend IS

  -- Signals
  SIGNAL u_signed                         : vector_of_signed6(0 TO 15);  -- sfix6_En2 [16]
  SIGNAL Bit_Slice_out1                   : std_logic_vector(0 TO 15);  -- ufix1 [16]
  SIGNAL Bit_Slice_out1_0                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_0_1               : std_logic;  -- ufix1
  SIGNAL u_0                              : signed(5 DOWNTO 0);  -- sfix6_En2
  SIGNAL Bit_Slice_out1_1                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_1_1               : std_logic;  -- ufix1
  SIGNAL u_1                              : signed(5 DOWNTO 0);  -- sfix6_En2
  SIGNAL Bit_Slice_out1_2                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_2_1               : std_logic;  -- ufix1
  SIGNAL u_2                              : signed(5 DOWNTO 0);  -- sfix6_En2
  SIGNAL Bit_Slice_out1_3                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_3_1               : std_logic;  -- ufix1
  SIGNAL u_3                              : signed(5 DOWNTO 0);  -- sfix6_En2
  SIGNAL Bit_Slice_out1_4                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_4_1               : std_logic;  -- ufix1
  SIGNAL u_4                              : signed(5 DOWNTO 0);  -- sfix6_En2
  SIGNAL Bit_Slice_out1_5                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_5_1               : std_logic;  -- ufix1
  SIGNAL u_5                              : signed(5 DOWNTO 0);  -- sfix6_En2
  SIGNAL Bit_Slice_out1_6                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_6_1               : std_logic;  -- ufix1
  SIGNAL u_6                              : signed(5 DOWNTO 0);  -- sfix6_En2
  SIGNAL Bit_Slice_out1_7                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_7_1               : std_logic;  -- ufix1
  SIGNAL u_7                              : signed(5 DOWNTO 0);  -- sfix6_En2
  SIGNAL Bit_Slice_out1_8                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_8_1               : std_logic;  -- ufix1
  SIGNAL u_8                              : signed(5 DOWNTO 0);  -- sfix6_En2
  SIGNAL Bit_Slice_out1_9                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_9_1               : std_logic;  -- ufix1
  SIGNAL u_9                              : signed(5 DOWNTO 0);  -- sfix6_En2
  SIGNAL Bit_Slice_out1_10                : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_10_1              : std_logic;  -- ufix1
  SIGNAL u_10                             : signed(5 DOWNTO 0);  -- sfix6_En2
  SIGNAL Bit_Slice_out1_11                : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_11_1              : std_logic;  -- ufix1
  SIGNAL u_11                             : signed(5 DOWNTO 0);  -- sfix6_En2
  SIGNAL Bit_Slice_out1_12                : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_12_1              : std_logic;  -- ufix1
  SIGNAL u_12                             : signed(5 DOWNTO 0);  -- sfix6_En2
  SIGNAL Bit_Slice_out1_13                : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_13_1              : std_logic;  -- ufix1
  SIGNAL u_13                             : signed(5 DOWNTO 0);  -- sfix6_En2
  SIGNAL Bit_Slice_out1_14                : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_14_1              : std_logic;  -- ufix1
  SIGNAL u_14                             : signed(5 DOWNTO 0);  -- sfix6_En2
  SIGNAL Bit_Slice_out1_15                : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_15_1              : std_logic;  -- ufix1
  SIGNAL u_15                             : signed(5 DOWNTO 0);  -- sfix6_En2
  SIGNAL Bit_Concat_out1                  : vector_of_unsigned8(0 TO 15);  -- uint8 [16]

BEGIN
  outputgen1: FOR k1 IN 0 TO 15 GENERATE
    u_signed(k1) <= signed(u(k1));
  END GENERATE;


  Bit_Slice_out1_gen: FOR k IN 0 TO 15 GENERATE
    Bit_Slice_out1(k) <= u_signed(k)(5);
  END GENERATE Bit_Slice_out1_gen;


  Bit_Slice_out1_0 <= Bit_Slice_out1(0);

  Bit_Slice_out1_0_1 <= Bit_Slice_out1(0);

  u_0 <= signed(u(0));

  Bit_Slice_out1_1 <= Bit_Slice_out1(1);

  Bit_Slice_out1_1_1 <= Bit_Slice_out1(1);

  u_1 <= signed(u(1));

  Bit_Slice_out1_2 <= Bit_Slice_out1(2);

  Bit_Slice_out1_2_1 <= Bit_Slice_out1(2);

  u_2 <= signed(u(2));

  Bit_Slice_out1_3 <= Bit_Slice_out1(3);

  Bit_Slice_out1_3_1 <= Bit_Slice_out1(3);

  u_3 <= signed(u(3));

  Bit_Slice_out1_4 <= Bit_Slice_out1(4);

  Bit_Slice_out1_4_1 <= Bit_Slice_out1(4);

  u_4 <= signed(u(4));

  Bit_Slice_out1_5 <= Bit_Slice_out1(5);

  Bit_Slice_out1_5_1 <= Bit_Slice_out1(5);

  u_5 <= signed(u(5));

  Bit_Slice_out1_6 <= Bit_Slice_out1(6);

  Bit_Slice_out1_6_1 <= Bit_Slice_out1(6);

  u_6 <= signed(u(6));

  Bit_Slice_out1_7 <= Bit_Slice_out1(7);

  Bit_Slice_out1_7_1 <= Bit_Slice_out1(7);

  u_7 <= signed(u(7));

  Bit_Slice_out1_8 <= Bit_Slice_out1(8);

  Bit_Slice_out1_8_1 <= Bit_Slice_out1(8);

  u_8 <= signed(u(8));

  Bit_Slice_out1_9 <= Bit_Slice_out1(9);

  Bit_Slice_out1_9_1 <= Bit_Slice_out1(9);

  u_9 <= signed(u(9));

  Bit_Slice_out1_10 <= Bit_Slice_out1(10);

  Bit_Slice_out1_10_1 <= Bit_Slice_out1(10);

  u_10 <= signed(u(10));

  Bit_Slice_out1_11 <= Bit_Slice_out1(11);

  Bit_Slice_out1_11_1 <= Bit_Slice_out1(11);

  u_11 <= signed(u(11));

  Bit_Slice_out1_12 <= Bit_Slice_out1(12);

  Bit_Slice_out1_12_1 <= Bit_Slice_out1(12);

  u_12 <= signed(u(12));

  Bit_Slice_out1_13 <= Bit_Slice_out1(13);

  Bit_Slice_out1_13_1 <= Bit_Slice_out1(13);

  u_13 <= signed(u(13));

  Bit_Slice_out1_14 <= Bit_Slice_out1(14);

  Bit_Slice_out1_14_1 <= Bit_Slice_out1(14);

  u_14 <= signed(u(14));

  Bit_Slice_out1_15 <= Bit_Slice_out1(15);

  Bit_Slice_out1_15_1 <= Bit_Slice_out1(15);

  u_15 <= signed(u(15));

  Bit_Concat_out1(0) <= Bit_Slice_out1_0 & Bit_Slice_out1_0_1 & unsigned(u_0);
  Bit_Concat_out1(1) <= Bit_Slice_out1_1 & Bit_Slice_out1_1_1 & unsigned(u_1);
  Bit_Concat_out1(2) <= Bit_Slice_out1_2 & Bit_Slice_out1_2_1 & unsigned(u_2);
  Bit_Concat_out1(3) <= Bit_Slice_out1_3 & Bit_Slice_out1_3_1 & unsigned(u_3);
  Bit_Concat_out1(4) <= Bit_Slice_out1_4 & Bit_Slice_out1_4_1 & unsigned(u_4);
  Bit_Concat_out1(5) <= Bit_Slice_out1_5 & Bit_Slice_out1_5_1 & unsigned(u_5);
  Bit_Concat_out1(6) <= Bit_Slice_out1_6 & Bit_Slice_out1_6_1 & unsigned(u_6);
  Bit_Concat_out1(7) <= Bit_Slice_out1_7 & Bit_Slice_out1_7_1 & unsigned(u_7);
  Bit_Concat_out1(8) <= Bit_Slice_out1_8 & Bit_Slice_out1_8_1 & unsigned(u_8);
  Bit_Concat_out1(9) <= Bit_Slice_out1_9 & Bit_Slice_out1_9_1 & unsigned(u_9);
  Bit_Concat_out1(10) <= Bit_Slice_out1_10 & Bit_Slice_out1_10_1 & unsigned(u_10);
  Bit_Concat_out1(11) <= Bit_Slice_out1_11 & Bit_Slice_out1_11_1 & unsigned(u_11);
  Bit_Concat_out1(12) <= Bit_Slice_out1_12 & Bit_Slice_out1_12_1 & unsigned(u_12);
  Bit_Concat_out1(13) <= Bit_Slice_out1_13 & Bit_Slice_out1_13_1 & unsigned(u_13);
  Bit_Concat_out1(14) <= Bit_Slice_out1_14 & Bit_Slice_out1_14_1 & unsigned(u_14);
  Bit_Concat_out1(15) <= Bit_Slice_out1_15 & Bit_Slice_out1_15_1 & unsigned(u_15);

  outputgen: FOR k1 IN 0 TO 15 GENERATE
    y(k1) <= std_logic_vector(Bit_Concat_out1(k1));
  END GENERATE;

END rtl;

