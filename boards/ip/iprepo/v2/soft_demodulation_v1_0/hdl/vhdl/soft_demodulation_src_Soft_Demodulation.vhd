-- -------------------------------------------------------------
-- 
-- File Name: hdl_32bits_hmm\hdlsrc\fec_ber_hw_V2\soft_demodulation_src_Soft_Demodulation.vhd
-- Created: 2022-10-27 17:56:31
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1.5625e-09
-- Target subsystem base rate: 1.5625e-09
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1.5625e-09
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- aximm_llr_max                 ce_out        1.5625e-09
-- m00_axis_tvalid               ce_out        1.5625e-09
-- m00_axis_tdata                ce_out        1.5625e-09
-- m01_axis_tvalid               ce_out        1.5625e-09
-- m01_axis_tdata                ce_out        1.5625e-09
-- m02_axis_tvalid               ce_out        1.5625e-09
-- m02_axis_tdata                ce_out        1.5625e-09
-- m03_axis_tvalid               ce_out        1.5625e-09
-- m03_axis_tdata                ce_out        1.5625e-09
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: soft_demodulation_src_Soft_Demodulation
-- Source Path: fec_ber_hw_V2/Soft Demodulation
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.soft_demodulation_src_Soft_Demodulation_pkg.ALL;

ENTITY soft_demodulation_src_Soft_Demodulation IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        aximm_llr_scale                   :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32_En22
        aximm_llr_mag_reset               :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        s00_axis_Q_tvalid                 :   IN    std_logic;
        s00_axis_Q_tdata                  :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
        s01_axis_Q_tvalid                 :   IN    std_logic;
        s01_axis_Q_tdata                  :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
        s00_axis_I_tvalid                 :   IN    std_logic;
        s00_axis_I_tdata                  :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
        s01_axis_I_tvalid                 :   IN    std_logic;
        s01_axis_I_tdata                  :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
        ce_out                            :   OUT   std_logic;
        aximm_llr_max                     :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32_En24
        m00_axis_tvalid                   :   OUT   std_logic;
        m00_axis_tdata                    :   OUT   std_logic_vector(127 DOWNTO 0);  -- ufix128
        m01_axis_tvalid                   :   OUT   std_logic;
        m01_axis_tdata                    :   OUT   std_logic_vector(127 DOWNTO 0);  -- ufix128
        m02_axis_tvalid                   :   OUT   std_logic;
        m02_axis_tdata                    :   OUT   std_logic_vector(127 DOWNTO 0);  -- ufix128
        m03_axis_tvalid                   :   OUT   std_logic;
        m03_axis_tdata                    :   OUT   std_logic_vector(127 DOWNTO 0)  -- ufix128
        );
END soft_demodulation_src_Soft_Demodulation;


ARCHITECTURE rtl OF soft_demodulation_src_Soft_Demodulation IS

  -- Component Declarations
  COMPONENT soft_demodulation_src_To_SSR_I0
    PORT( data_wide                       :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
          data_ssr                        :   OUT   vector_of_std_logic_vector16(0 TO 7)  -- uint16 [8]
          );
  END COMPONENT;

  COMPONENT soft_demodulation_src_To_SSR_I1
    PORT( data_wide                       :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
          data_ssr                        :   OUT   vector_of_std_logic_vector16(0 TO 7)  -- uint16 [8]
          );
  END COMPONENT;

  COMPONENT soft_demodulation_src_To_SSR_Q0
    PORT( data_wide                       :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
          data_ssr                        :   OUT   vector_of_std_logic_vector16(0 TO 7)  -- uint16 [8]
          );
  END COMPONENT;

  COMPONENT soft_demodulation_src_To_SSR_Q1
    PORT( data_wide                       :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
          data_ssr                        :   OUT   vector_of_std_logic_vector16(0 TO 7)  -- uint16 [8]
          );
  END COMPONENT;

  COMPONENT soft_demodulation_src_Soft_Demodulation_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          valid                           :   IN    std_logic;
          real_rsvd                       :   IN    vector_of_std_logic_vector16(0 TO 15);  -- uint16 [16]
          imag                            :   IN    vector_of_std_logic_vector16(0 TO 15);  -- uint16 [16]
          LLR_Scale                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32_En22
          LLR_Values                      :   OUT   vector_of_std_logic_vector8(0 TO 15)  -- uint8 [16]
          );
  END COMPONENT;

  COMPONENT soft_demodulation_src_Subsystem2_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          valid_in                        :   IN    std_logic;
          data_in                         :   IN    vector_of_std_logic_vector8(0 TO 15);  -- uint8 [16]
          tvalid_out                      :   OUT   std_logic;
          data_out                        :   OUT   vector_of_std_logic_vector32(0 TO 15)  -- uint32 [16]
          );
  END COMPONENT;

  COMPONENT soft_demodulation_src_From_SSR1
    PORT( data_ssr                        :   IN    vector_of_std_logic_vector32(0 TO 3);  -- uint32 [4]
          data_wide                       :   OUT   std_logic_vector(127 DOWNTO 0)  -- ufix128
          );
  END COMPONENT;

  COMPONENT soft_demodulation_src_MATLAB_Function
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          u                               :   IN    std_logic_vector(5 DOWNTO 0);  -- sfix6_En2
          reset_1                         :   IN    std_logic;
          y                               :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32_En24
          );
  END COMPONENT;

  COMPONENT soft_demodulation_src_From_SSR2
    PORT( data_ssr                        :   IN    vector_of_std_logic_vector32(0 TO 3);  -- uint32 [4]
          data_wide                       :   OUT   std_logic_vector(127 DOWNTO 0)  -- ufix128
          );
  END COMPONENT;

  COMPONENT soft_demodulation_src_From_SSR3
    PORT( data_ssr                        :   IN    vector_of_std_logic_vector32(0 TO 3);  -- uint32 [4]
          data_wide                       :   OUT   std_logic_vector(127 DOWNTO 0)  -- ufix128
          );
  END COMPONENT;

  COMPONENT soft_demodulation_src_From_SSR4
    PORT( data_ssr                        :   IN    vector_of_std_logic_vector32(0 TO 3);  -- uint32 [4]
          data_wide                       :   OUT   std_logic_vector(127 DOWNTO 0)  -- ufix128
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : soft_demodulation_src_To_SSR_I0
    USE ENTITY work.soft_demodulation_src_To_SSR_I0(rtl);

  FOR ALL : soft_demodulation_src_To_SSR_I1
    USE ENTITY work.soft_demodulation_src_To_SSR_I1(rtl);

  FOR ALL : soft_demodulation_src_To_SSR_Q0
    USE ENTITY work.soft_demodulation_src_To_SSR_Q0(rtl);

  FOR ALL : soft_demodulation_src_To_SSR_Q1
    USE ENTITY work.soft_demodulation_src_To_SSR_Q1(rtl);

  FOR ALL : soft_demodulation_src_Soft_Demodulation_block
    USE ENTITY work.soft_demodulation_src_Soft_Demodulation_block(rtl);

  FOR ALL : soft_demodulation_src_Subsystem2_block
    USE ENTITY work.soft_demodulation_src_Subsystem2_block(rtl);

  FOR ALL : soft_demodulation_src_From_SSR1
    USE ENTITY work.soft_demodulation_src_From_SSR1(rtl);

  FOR ALL : soft_demodulation_src_MATLAB_Function
    USE ENTITY work.soft_demodulation_src_MATLAB_Function(rtl);

  FOR ALL : soft_demodulation_src_From_SSR2
    USE ENTITY work.soft_demodulation_src_From_SSR2(rtl);

  FOR ALL : soft_demodulation_src_From_SSR3
    USE ENTITY work.soft_demodulation_src_From_SSR3(rtl);

  FOR ALL : soft_demodulation_src_From_SSR4
    USE ENTITY work.soft_demodulation_src_From_SSR4(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL To_SSR_I0_out1                   : vector_of_std_logic_vector16(0 TO 7);  -- ufix16 [8]
  SIGNAL To_SSR_I1_out1                   : vector_of_std_logic_vector16(0 TO 7);  -- ufix16 [8]
  SIGNAL Mux_out1                         : vector_of_std_logic_vector16(0 TO 15);  -- ufix16 [16]
  SIGNAL To_SSR_Q0_out1                   : vector_of_std_logic_vector16(0 TO 7);  -- ufix16 [8]
  SIGNAL To_SSR_Q1_out1                   : vector_of_std_logic_vector16(0 TO 7);  -- ufix16 [8]
  SIGNAL Mux1_out1                        : vector_of_std_logic_vector16(0 TO 15);  -- ufix16 [16]
  SIGNAL y                                : vector_of_std_logic_vector8(0 TO 15);  -- ufix8 [16]
  SIGNAL Subsystem2_out1                  : std_logic;
  SIGNAL y_1                              : vector_of_std_logic_vector32(0 TO 15);  -- ufix32 [16]
  SIGNAL Demux_out1                       : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL y_2                              : std_logic_vector(127 DOWNTO 0);  -- ufix128
  SIGNAL y_unsigned                       : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL Bit_Slice_out1                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Data_Type_Conversion_out1        : signed(5 DOWNTO 0);  -- sfix6_En2
  SIGNAL aximm_llr_mag_reset_unsigned     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Cast_To_Boolean_out1             : std_logic;
  SIGNAL y_3                              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL reduced_reg                      : std_logic_vector(0 TO 16);  -- ufix1 [17]
  SIGNAL Subsystem2_out1_1                : std_logic;
  SIGNAL Demux_out2                       : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL y_4                              : std_logic_vector(127 DOWNTO 0);  -- ufix128
  SIGNAL Demux_out3                       : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL y_5                              : std_logic_vector(127 DOWNTO 0);  -- ufix128
  SIGNAL Demux_out4                       : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL y_6                              : std_logic_vector(127 DOWNTO 0);  -- ufix128

BEGIN
  u_To_SSR_I0 : soft_demodulation_src_To_SSR_I0
    PORT MAP( data_wide => s00_axis_I_tdata,  -- ufix128
              data_ssr => To_SSR_I0_out1  -- uint16 [8]
              );

  u_To_SSR_I1 : soft_demodulation_src_To_SSR_I1
    PORT MAP( data_wide => s01_axis_I_tdata,  -- ufix128
              data_ssr => To_SSR_I1_out1  -- uint16 [8]
              );

  u_To_SSR_Q0 : soft_demodulation_src_To_SSR_Q0
    PORT MAP( data_wide => s00_axis_Q_tdata,  -- ufix128
              data_ssr => To_SSR_Q0_out1  -- uint16 [8]
              );

  u_To_SSR_Q1 : soft_demodulation_src_To_SSR_Q1
    PORT MAP( data_wide => s01_axis_Q_tdata,  -- ufix128
              data_ssr => To_SSR_Q1_out1  -- uint16 [8]
              );

  u_Soft_Demodulation : soft_demodulation_src_Soft_Demodulation_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              valid => s00_axis_I_tvalid,
              real_rsvd => Mux_out1,  -- uint16 [16]
              imag => Mux1_out1,  -- uint16 [16]
              LLR_Scale => aximm_llr_scale,  -- ufix32_En22
              LLR_Values => y  -- uint8 [16]
              );

  u_Subsystem2 : soft_demodulation_src_Subsystem2_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              valid_in => s00_axis_I_tvalid,
              data_in => y,  -- uint8 [16]
              tvalid_out => Subsystem2_out1,
              data_out => y_1  -- uint32 [16]
              );

  u_From_SSR1 : soft_demodulation_src_From_SSR1
    PORT MAP( data_ssr => Demux_out1,  -- uint32 [4]
              data_wide => y_2  -- ufix128
              );

  u_MATLAB_Function : soft_demodulation_src_MATLAB_Function
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              u => std_logic_vector(Data_Type_Conversion_out1),  -- sfix6_En2
              reset_1 => Cast_To_Boolean_out1,
              y => y_3  -- ufix32_En24
              );

  u_From_SSR2 : soft_demodulation_src_From_SSR2
    PORT MAP( data_ssr => Demux_out2,  -- uint32 [4]
              data_wide => y_4  -- ufix128
              );

  u_From_SSR3 : soft_demodulation_src_From_SSR3
    PORT MAP( data_ssr => Demux_out3,  -- uint32 [4]
              data_wide => y_5  -- ufix128
              );

  u_From_SSR4 : soft_demodulation_src_From_SSR4
    PORT MAP( data_ssr => Demux_out4,  -- uint32 [4]
              data_wide => y_6  -- ufix128
              );

  Mux_out1(0) <= To_SSR_I0_out1(0);
  Mux_out1(1) <= To_SSR_I0_out1(1);
  Mux_out1(2) <= To_SSR_I0_out1(2);
  Mux_out1(3) <= To_SSR_I0_out1(3);
  Mux_out1(4) <= To_SSR_I0_out1(4);
  Mux_out1(5) <= To_SSR_I0_out1(5);
  Mux_out1(6) <= To_SSR_I0_out1(6);
  Mux_out1(7) <= To_SSR_I0_out1(7);
  Mux_out1(8) <= To_SSR_I1_out1(0);
  Mux_out1(9) <= To_SSR_I1_out1(1);
  Mux_out1(10) <= To_SSR_I1_out1(2);
  Mux_out1(11) <= To_SSR_I1_out1(3);
  Mux_out1(12) <= To_SSR_I1_out1(4);
  Mux_out1(13) <= To_SSR_I1_out1(5);
  Mux_out1(14) <= To_SSR_I1_out1(6);
  Mux_out1(15) <= To_SSR_I1_out1(7);

  Mux1_out1(0) <= To_SSR_Q0_out1(0);
  Mux1_out1(1) <= To_SSR_Q0_out1(1);
  Mux1_out1(2) <= To_SSR_Q0_out1(2);
  Mux1_out1(3) <= To_SSR_Q0_out1(3);
  Mux1_out1(4) <= To_SSR_Q0_out1(4);
  Mux1_out1(5) <= To_SSR_Q0_out1(5);
  Mux1_out1(6) <= To_SSR_Q0_out1(6);
  Mux1_out1(7) <= To_SSR_Q0_out1(7);
  Mux1_out1(8) <= To_SSR_Q1_out1(0);
  Mux1_out1(9) <= To_SSR_Q1_out1(1);
  Mux1_out1(10) <= To_SSR_Q1_out1(2);
  Mux1_out1(11) <= To_SSR_Q1_out1(3);
  Mux1_out1(12) <= To_SSR_Q1_out1(4);
  Mux1_out1(13) <= To_SSR_Q1_out1(5);
  Mux1_out1(14) <= To_SSR_Q1_out1(6);
  Mux1_out1(15) <= To_SSR_Q1_out1(7);

  Demux_out1(0) <= y_1(0);
  Demux_out1(1) <= y_1(1);
  Demux_out1(2) <= y_1(2);
  Demux_out1(3) <= y_1(3);

  y_unsigned <= unsigned(y_2);

  Bit_Slice_out1 <= y_unsigned(5 DOWNTO 0);

  Data_Type_Conversion_out1 <= signed(Bit_Slice_out1);

  aximm_llr_mag_reset_unsigned <= unsigned(aximm_llr_mag_reset);

  
  Cast_To_Boolean_out1 <= '1' WHEN aximm_llr_mag_reset_unsigned /= to_unsigned(0, 32) ELSE
      '0';

  enb <= clk_enable;

  reduced_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      reduced_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        reduced_reg(0) <= Subsystem2_out1;
        reduced_reg(1 TO 16) <= reduced_reg(0 TO 15);
      END IF;
    END IF;
  END PROCESS reduced_process;

  Subsystem2_out1_1 <= reduced_reg(16);

  Demux_out2(0) <= y_1(4);
  Demux_out2(1) <= y_1(5);
  Demux_out2(2) <= y_1(6);
  Demux_out2(3) <= y_1(7);

  Demux_out3(0) <= y_1(8);
  Demux_out3(1) <= y_1(9);
  Demux_out3(2) <= y_1(10);
  Demux_out3(3) <= y_1(11);

  Demux_out4(0) <= y_1(12);
  Demux_out4(1) <= y_1(13);
  Demux_out4(2) <= y_1(14);
  Demux_out4(3) <= y_1(15);

  ce_out <= clk_enable;

  aximm_llr_max <= y_3;

  m00_axis_tvalid <= Subsystem2_out1_1;

  m00_axis_tdata <= y_2;

  m01_axis_tvalid <= Subsystem2_out1_1;

  m01_axis_tdata <= y_4;

  m02_axis_tvalid <= Subsystem2_out1_1;

  m02_axis_tdata <= y_5;

  m03_axis_tvalid <= Subsystem2_out1_1;

  m03_axis_tdata <= y_6;

END rtl;

