-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\fec_ber_hw\ber_src_BER.vhd
-- Created: 2022-10-06 19:12:02
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 3.125e-09
-- Target subsystem base rate: 3.125e-09
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        3.125e-09
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- aximm_bit_error               ce_out        3.125e-09
-- aximm_bit_count               ce_out        3.125e-09
-- aximm_fifo_num                ce_out        3.125e-09
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ber_src_BER
-- Source Path: fec_ber_hw/BER
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.ber_src_BER_pkg.ALL;

ENTITY ber_src_BER IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        aximm_bit_count_reset             :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        s_axis_decoded_tvalid             :   IN    std_logic;
        s_axis_decoded_tdata              :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
        s_axis_orig_tvalid                :   IN    std_logic;
        s_axis_orig_tdata                 :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        ce_out                            :   OUT   std_logic;
        aximm_bit_error                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        aximm_bit_count                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        aximm_fifo_num                    :   OUT   std_logic_vector(13 DOWNTO 0)  -- ufix14
        );
END ber_src_BER;


ARCHITECTURE rtl OF ber_src_BER IS

  -- Component Declarations
  COMPONENT ber_src_HDL_FIFO
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In_rsvd                         :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          Push                            :   IN    std_logic;
          Pop                             :   IN    std_logic;
          Out_rsvd                        :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          Num                             :   OUT   std_logic_vector(13 DOWNTO 0)  -- ufix14
          );
  END COMPONENT;

  COMPONENT ber_src_Subsystem
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          original                        :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          decoded                         :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          reset_1                         :   IN    std_logic;
          Enable                          :   IN    std_logic;
          Bit_Error                       :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : ber_src_HDL_FIFO
    USE ENTITY work.ber_src_HDL_FIFO(rtl);

  FOR ALL : ber_src_Subsystem
    USE ENTITY work.ber_src_Subsystem(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL s_axis_orig_tdata_unsigned       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL s_axis_orig_tdata_1              : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL s_axis_orig_tvalid_1             : std_logic;
  SIGNAL s_axis_decoded_tvalid_1          : std_logic;
  SIGNAL HDL_FIFO_out1                    : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL HDL_FIFO_out4                    : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL s_axis_decoded_tdata_unsigned    : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL s_axis_decoded_tdata_1           : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL Bit_Slice_out1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay1_out1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL aximm_bit_count_reset_unsigned   : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL aximm_bit_count_reset_1          : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Cast_To_Boolean_out1             : std_logic;
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL OR_out1                          : std_logic;
  SIGNAL Subsystem_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Subsystem_out1_unsigned          : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Subsystem_out1_1                 : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL HDL_Counter_out1                 : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL delayMatch_reg                   : vector_of_unsigned32(0 TO 2);  -- ufix32 [3]
  SIGNAL HDL_Counter_out1_1               : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL HDL_FIFO_out4_unsigned           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL delayMatch1_reg                  : vector_of_unsigned14(0 TO 2);  -- ufix14 [3]
  SIGNAL HDL_FIFO_out4_1                  : unsigned(13 DOWNTO 0);  -- ufix14

BEGIN
  u_HDL_FIFO : ber_src_HDL_FIFO
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              In_rsvd => std_logic_vector(s_axis_orig_tdata_1),  -- uint8
              Push => s_axis_orig_tvalid_1,
              Pop => s_axis_decoded_tvalid_1,
              Out_rsvd => HDL_FIFO_out1,  -- uint8
              Num => HDL_FIFO_out4  -- ufix14
              );

  u_Subsystem : ber_src_Subsystem
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              original => HDL_FIFO_out1,  -- uint8
              decoded => std_logic_vector(Delay1_out1),  -- uint8
              reset_1 => Cast_To_Boolean_out1,
              Enable => OR_out1,
              Bit_Error => Subsystem_out1  -- uint32
              );

  s_axis_orig_tdata_unsigned <= unsigned(s_axis_orig_tdata);

  enb <= clk_enable;

  in_4_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      s_axis_orig_tdata_1 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        s_axis_orig_tdata_1 <= s_axis_orig_tdata_unsigned;
      END IF;
    END IF;
  END PROCESS in_4_pipe_process;


  in_3_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      s_axis_orig_tvalid_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        s_axis_orig_tvalid_1 <= s_axis_orig_tvalid;
      END IF;
    END IF;
  END PROCESS in_3_pipe_process;


  in_1_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      s_axis_decoded_tvalid_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        s_axis_decoded_tvalid_1 <= s_axis_decoded_tvalid;
      END IF;
    END IF;
  END PROCESS in_1_pipe_process;


  s_axis_decoded_tdata_unsigned <= unsigned(s_axis_decoded_tdata);

  in_2_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      s_axis_decoded_tdata_1 <= to_unsigned(0, 128);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        s_axis_decoded_tdata_1 <= s_axis_decoded_tdata_unsigned;
      END IF;
    END IF;
  END PROCESS in_2_pipe_process;


  Bit_Slice_out1 <= s_axis_decoded_tdata_1(7 DOWNTO 0);

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_out1 <= Bit_Slice_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  aximm_bit_count_reset_unsigned <= unsigned(aximm_bit_count_reset);

  in_0_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      aximm_bit_count_reset_1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        aximm_bit_count_reset_1 <= aximm_bit_count_reset_unsigned;
      END IF;
    END IF;
  END PROCESS in_0_pipe_process;


  
  Cast_To_Boolean_out1 <= '1' WHEN aximm_bit_count_reset_1 /= to_unsigned(0, 32) ELSE
      '0';

  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_out1 <= s_axis_decoded_tvalid_1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  OR_out1 <= Cast_To_Boolean_out1 OR Delay3_out1;

  Subsystem_out1_unsigned <= unsigned(Subsystem_out1);

  out_0_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Subsystem_out1_1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Subsystem_out1_1 <= Subsystem_out1_unsigned;
      END IF;
    END IF;
  END PROCESS out_0_pipe_process;


  aximm_bit_error <= std_logic_vector(Subsystem_out1_1);

  -- Free running, Unsigned Counter
  --  initial value   = 0
  --  step value      = 8
  HDL_Counter_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter_out1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF Cast_To_Boolean_out1 = '1' THEN 
          HDL_Counter_out1 <= to_unsigned(0, 32);
        ELSIF Delay3_out1 = '1' THEN 
          HDL_Counter_out1 <= HDL_Counter_out1 + to_unsigned(8, 32);
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg <= (OTHERS => to_unsigned(0, 32));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg(0) <= HDL_Counter_out1;
        delayMatch_reg(1 TO 2) <= delayMatch_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  HDL_Counter_out1_1 <= delayMatch_reg(2);

  aximm_bit_count <= std_logic_vector(HDL_Counter_out1_1);

  HDL_FIFO_out4_unsigned <= unsigned(HDL_FIFO_out4);

  delayMatch1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch1_reg <= (OTHERS => to_unsigned(16#0000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch1_reg(0) <= HDL_FIFO_out4_unsigned;
        delayMatch1_reg(1 TO 2) <= delayMatch1_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  HDL_FIFO_out4_1 <= delayMatch1_reg(2);

  aximm_fifo_num <= std_logic_vector(HDL_FIFO_out4_1);

  ce_out <= clk_enable;

END rtl;

