-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\fec_ber_hw\ber_src_Subsystem.vhd
-- Created: 2022-10-06 19:12:02
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ber_src_Subsystem
-- Source Path: fec_ber_hw/BER/Subsystem
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY ber_src_Subsystem IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        original                          :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        decoded                           :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        reset_1                           :   IN    std_logic;
        Enable                            :   IN    std_logic;
        Bit_Error                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
        );
END ber_src_Subsystem;


ARCHITECTURE rtl OF ber_src_Subsystem IS

  -- Signals
  SIGNAL Enable_out4                      : std_logic;
  SIGNAL Enable_out4_1                    : std_logic;
  SIGNAL original_unsigned                : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL original_1                       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bit_Slice7_out1                  : std_logic;  -- ufix1
  SIGNAL decoded_unsigned                 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL decoded_1                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bit_Slice6_out1                  : std_logic;  -- ufix1
  SIGNAL Bit_Slice5_out1                  : std_logic;  -- ufix1
  SIGNAL Bit_Slice4_out1                  : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1                  : std_logic;  -- ufix1
  SIGNAL Bit_Slice2_out1                  : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1                  : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1                   : std_logic;  -- ufix1
  SIGNAL Bit_Slice15_out1                 : std_logic;  -- ufix1
  SIGNAL AND1_out1                        : std_logic;
  SIGNAL Bit_Slice14_out1                 : std_logic;  -- ufix1
  SIGNAL AND2_out1                        : std_logic;
  SIGNAL Bit_Slice13_out1                 : std_logic;  -- ufix1
  SIGNAL AND3_out1                        : std_logic;
  SIGNAL Bit_Slice12_out1                 : std_logic;  -- ufix1
  SIGNAL AND4_out1                        : std_logic;
  SIGNAL Bit_Slice11_out1                 : std_logic;  -- ufix1
  SIGNAL AND5_out1                        : std_logic;
  SIGNAL Bit_Slice10_out1                 : std_logic;  -- ufix1
  SIGNAL AND6_out1                        : std_logic;
  SIGNAL Bit_Slice9_out1                  : std_logic;  -- ufix1
  SIGNAL AND7_out1                        : std_logic;
  SIGNAL Bit_Slice8_out1                  : std_logic;  -- ufix1
  SIGNAL AND8_out1                        : std_logic;
  SIGNAL Sum_add_cast                     : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Sum_add_cast_1                   : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Sum_add_temp                     : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Sum_add_cast_2                   : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Sum_add_temp_1                   : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Sum_add_cast_3                   : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Sum_add_temp_2                   : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Sum_add_cast_4                   : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Sum_add_temp_3                   : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Sum_add_cast_5                   : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Sum_add_temp_4                   : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Sum_add_cast_6                   : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Sum_add_temp_5                   : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Sum_add_cast_7                   : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Sum_add_temp_6                   : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Sum_out1                         : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL reset_2                          : std_logic;
  SIGNAL enb_gated                        : std_logic;
  SIGNAL Add_out1                         : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay2_switch_delay              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay2_out1                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Add_out1_bypass                  : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Add_out1_bypass_1                : unsigned(31 DOWNTO 0);  -- uint32

BEGIN
  Enable_out4 <= Enable;

  in_3_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Enable_out4_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Enable_out4_1 <= Enable_out4;
      END IF;
    END IF;
  END PROCESS in_3_pipe_process;


  original_unsigned <= unsigned(original);

  in_0_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      original_1 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        original_1 <= original_unsigned;
      END IF;
    END IF;
  END PROCESS in_0_pipe_process;


  Bit_Slice7_out1 <= original_1(7);

  decoded_unsigned <= unsigned(decoded);

  in_1_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      decoded_1 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        decoded_1 <= decoded_unsigned;
      END IF;
    END IF;
  END PROCESS in_1_pipe_process;


  Bit_Slice6_out1 <= original_1(6);

  Bit_Slice5_out1 <= original_1(5);

  Bit_Slice4_out1 <= original_1(4);

  Bit_Slice3_out1 <= original_1(3);

  Bit_Slice2_out1 <= original_1(2);

  Bit_Slice1_out1 <= original_1(1);

  Bit_Slice_out1 <= original_1(0);

  Bit_Slice15_out1 <= decoded_1(7);

  AND1_out1 <= Bit_Slice7_out1 XOR Bit_Slice15_out1;

  Bit_Slice14_out1 <= decoded_1(6);

  AND2_out1 <= Bit_Slice6_out1 XOR Bit_Slice14_out1;

  Bit_Slice13_out1 <= decoded_1(5);

  AND3_out1 <= Bit_Slice5_out1 XOR Bit_Slice13_out1;

  Bit_Slice12_out1 <= decoded_1(4);

  AND4_out1 <= Bit_Slice4_out1 XOR Bit_Slice12_out1;

  Bit_Slice11_out1 <= decoded_1(3);

  AND5_out1 <= Bit_Slice3_out1 XOR Bit_Slice11_out1;

  Bit_Slice10_out1 <= decoded_1(2);

  AND6_out1 <= Bit_Slice2_out1 XOR Bit_Slice10_out1;

  Bit_Slice9_out1 <= decoded_1(1);

  AND7_out1 <= Bit_Slice1_out1 XOR Bit_Slice9_out1;

  Bit_Slice8_out1 <= decoded_1(0);

  AND8_out1 <= Bit_Slice_out1 XOR Bit_Slice8_out1;

  Sum_add_cast <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & AND1_out1;
  Sum_add_cast_1 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & AND2_out1;
  Sum_add_temp <= Sum_add_cast + Sum_add_cast_1;
  Sum_add_cast_2 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & AND3_out1;
  Sum_add_temp_1 <= Sum_add_temp + Sum_add_cast_2;
  Sum_add_cast_3 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & AND4_out1;
  Sum_add_temp_2 <= Sum_add_temp_1 + Sum_add_cast_3;
  Sum_add_cast_4 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & AND5_out1;
  Sum_add_temp_3 <= Sum_add_temp_2 + Sum_add_cast_4;
  Sum_add_cast_5 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & AND6_out1;
  Sum_add_temp_4 <= Sum_add_temp_3 + Sum_add_cast_5;
  Sum_add_cast_6 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & AND7_out1;
  Sum_add_temp_5 <= Sum_add_temp_4 + Sum_add_cast_6;
  Sum_add_cast_7 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & AND8_out1;
  Sum_add_temp_6 <= Sum_add_temp_5 + Sum_add_cast_7;
  
  Sum_out1 <= "111" WHEN Sum_add_temp_6(10 DOWNTO 3) /= "00000000" ELSE
      Sum_add_temp_6(2 DOWNTO 0);

  in_2_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      reset_2 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        reset_2 <= reset_1;
      END IF;
    END IF;
  END PROCESS in_2_pipe_process;


  enb_gated <= Enable_out4_1 AND enb;

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_switch_delay <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        IF reset_2 = '1' THEN
          Delay2_switch_delay <= to_unsigned(0, 32);
        ELSE 
          Delay2_switch_delay <= Add_out1;
        END IF;
      END IF;
    END IF;
  END PROCESS Delay2_process;

  
  Delay2_out1 <= to_unsigned(0, 32) WHEN reset_2 = '1' ELSE
      Delay2_switch_delay;

  Add_out1 <= resize(Sum_out1, 32) + Delay2_out1;

  
  Add_out1_bypass_1 <= Add_out1_bypass WHEN Enable_out4_1 = '0' ELSE
      Add_out1;

  reduced_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Add_out1_bypass <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Add_out1_bypass <= Add_out1_bypass_1;
      END IF;
    END IF;
  END PROCESS reduced_process;


  Bit_Error <= std_logic_vector(Add_out1_bypass);

END rtl;

