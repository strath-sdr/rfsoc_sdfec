-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\fec_ber_hw\sd_fec_ctrl_src_Encoder_Ctrl.vhd
-- Created: 2022-10-06 15:04:26
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 3.125e-09
-- Target subsystem base rate: 3.125e-09
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        3.125e-09
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- m_axis_ctrl_tvalid            ce_out        3.125e-09
-- m_axis_ctrl_tdata             ce_out        3.125e-09
-- m_axis_ctrl_tlast             ce_out        3.125e-09
-- m_axis_tvalid                 ce_out        3.125e-09
-- m_axis_tdata                  ce_out        3.125e-09
-- s_axis_status_tready          ce_out        3.125e-09
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: sd_fec_ctrl_src_Encoder_Ctrl
-- Source Path: fec_ber_hw/Encoder Ctrl
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY sd_fec_ctrl_src_Encoder_Ctrl IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        aximm_ctrl_word                   :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        aximm_length                      :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        aximm_load                        :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        s_axis_tvalid                     :   IN    std_logic;
        s_axis_tdata                      :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        s_axis_status_tvalid              :   IN    std_logic;
        s_axis_status_tdata               :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        ce_out                            :   OUT   std_logic;
        m_axis_ctrl_tvalid                :   OUT   std_logic;
        m_axis_ctrl_tdata                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        m_axis_ctrl_tlast                 :   OUT   std_logic;
        m_axis_tvalid                     :   OUT   std_logic;
        m_axis_tdata                      :   OUT   std_logic_vector(127 DOWNTO 0);  -- ufix128
        s_axis_status_tready              :   OUT   std_logic
        );
END sd_fec_ctrl_src_Encoder_Ctrl;


ARCHITECTURE rtl OF sd_fec_ctrl_src_Encoder_Ctrl IS

  -- Component Declarations
  COMPONENT sd_fec_ctrl_src_Chart
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          ctrl_word                       :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          block_length                    :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          load                            :   IN    std_logic;
          s_axis_tvalid                   :   IN    std_logic;
          s_axis_tdata                    :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          m_axis_ctrl_tvalid              :   OUT   std_logic;
          m_axis_ctrl_tdata               :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
          m_axis_ctrl_tlast               :   OUT   std_logic;
          m_axis_tvalid                   :   OUT   std_logic;
          m_axis_tdata                    :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          s_axis_status_tready            :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : sd_fec_ctrl_src_Chart
    USE ENTITY work.sd_fec_ctrl_src_Chart(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL aximm_load_unsigned              : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Data_Type_Conversion1_out1       : std_logic;
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL Logical_Operator1_out1           : std_logic;
  SIGNAL m_axis_ctrl_tdata_tmp            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL m_axis_tvalid_1                  : std_logic;
  SIGNAL m_axis_tdata_1                   : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL m_axis_tdata_unsigned            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay1_out1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Data_Type_Conversion_out1        : unsigned(127 DOWNTO 0);  -- ufix128

BEGIN
  u_Chart : sd_fec_ctrl_src_Chart
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              ctrl_word => aximm_ctrl_word,  -- uint32
              block_length => aximm_length,  -- uint32
              load => Logical_Operator1_out1,
              s_axis_tvalid => s_axis_tvalid,
              s_axis_tdata => s_axis_tdata,  -- uint8
              m_axis_ctrl_tvalid => m_axis_ctrl_tvalid,
              m_axis_ctrl_tdata => m_axis_ctrl_tdata_tmp,  -- uint32
              m_axis_ctrl_tlast => m_axis_ctrl_tlast,
              m_axis_tvalid => m_axis_tvalid_1,
              m_axis_tdata => m_axis_tdata_1,  -- uint8
              s_axis_status_tready => s_axis_status_tready
              );

  aximm_load_unsigned <= unsigned(aximm_load);

  
  Data_Type_Conversion1_out1 <= '1' WHEN aximm_load_unsigned /= to_unsigned(0, 32) ELSE
      '0';

  enb <= clk_enable;

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1 <= '1';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_out1 <= Data_Type_Conversion1_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  Logical_Operator_out1 <=  NOT Delay2_out1;

  Logical_Operator1_out1 <= Data_Type_Conversion1_out1 AND Logical_Operator_out1;

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_out1 <= m_axis_tvalid_1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  m_axis_tdata_unsigned <= unsigned(m_axis_tdata_1);

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_out1 <= m_axis_tdata_unsigned;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Data_Type_Conversion_out1 <= resize(Delay1_out1, 128);

  m_axis_tdata <= std_logic_vector(Data_Type_Conversion_out1);

  ce_out <= clk_enable;

  m_axis_ctrl_tdata <= m_axis_ctrl_tdata_tmp;

  m_axis_tvalid <= Delay_out1;

END rtl;

