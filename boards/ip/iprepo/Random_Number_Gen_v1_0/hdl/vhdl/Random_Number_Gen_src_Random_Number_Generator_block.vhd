-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\book_example_v2\Random_Number_Gen_src_Random_Number_Generator_block.vhd
-- Created: 2023-01-13 11:55:50
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Random_Number_Gen_src_Random_Number_Generator_block
-- Source Path: book_example_v2/Random Number Generator/Random Number Generator
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Random_Number_Gen_src_Random_Number_Generator_block IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        reset_1                           :   IN    std_logic;
        enable                            :   IN    std_logic;
        data                              :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
        );
END Random_Number_Gen_src_Random_Number_Generator_block;


ARCHITECTURE rtl OF Random_Number_Gen_src_Random_Number_Generator_block IS

  -- Component Declarations
  COMPONENT Random_Number_Gen_src_bit0
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Random_Number_Gen_src_bit1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Random_Number_Gen_src_bit2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Random_Number_Gen_src_bit3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Random_Number_Gen_src_bit4
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Random_Number_Gen_src_bit5
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Random_Number_Gen_src_bit6
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Random_Number_Gen_src_bit7
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          inportReset                     :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Random_Number_Gen_src_bit0
    USE ENTITY work.Random_Number_Gen_src_bit0(rtl);

  FOR ALL : Random_Number_Gen_src_bit1
    USE ENTITY work.Random_Number_Gen_src_bit1(rtl);

  FOR ALL : Random_Number_Gen_src_bit2
    USE ENTITY work.Random_Number_Gen_src_bit2(rtl);

  FOR ALL : Random_Number_Gen_src_bit3
    USE ENTITY work.Random_Number_Gen_src_bit3(rtl);

  FOR ALL : Random_Number_Gen_src_bit4
    USE ENTITY work.Random_Number_Gen_src_bit4(rtl);

  FOR ALL : Random_Number_Gen_src_bit5
    USE ENTITY work.Random_Number_Gen_src_bit5(rtl);

  FOR ALL : Random_Number_Gen_src_bit6
    USE ENTITY work.Random_Number_Gen_src_bit6(rtl);

  FOR ALL : Random_Number_Gen_src_bit7
    USE ENTITY work.Random_Number_Gen_src_bit7(rtl);

  -- Signals
  SIGNAL enb_gated                        : std_logic;
  SIGNAL enable_out2                      : std_logic;
  SIGNAL bit0_out1                        : std_logic;
  SIGNAL bit1_out1                        : std_logic;
  SIGNAL bit2_out1                        : std_logic;
  SIGNAL bit3_out1                        : std_logic;
  SIGNAL bit4_out1                        : std_logic;
  SIGNAL bit5_out1                        : std_logic;
  SIGNAL bit6_out1                        : std_logic;
  SIGNAL bit7_out1                        : std_logic;
  SIGNAL concat_out1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL concat_out1_bypass               : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL concat_out1_last_value           : unsigned(7 DOWNTO 0);  -- uint8

BEGIN
  u_bit0 : Random_Number_Gen_src_bit0
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb_gated,
              inportReset => reset_1,
              PN_Sequence => bit0_out1
              );

  u_bit1 : Random_Number_Gen_src_bit1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb_gated,
              inportReset => reset_1,
              PN_Sequence => bit1_out1
              );

  u_bit2 : Random_Number_Gen_src_bit2
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb_gated,
              inportReset => reset_1,
              PN_Sequence => bit2_out1
              );

  u_bit3 : Random_Number_Gen_src_bit3
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb_gated,
              inportReset => reset_1,
              PN_Sequence => bit3_out1
              );

  u_bit4 : Random_Number_Gen_src_bit4
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb_gated,
              inportReset => reset_1,
              PN_Sequence => bit4_out1
              );

  u_bit5 : Random_Number_Gen_src_bit5
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb_gated,
              inportReset => reset_1,
              PN_Sequence => bit5_out1
              );

  u_bit6 : Random_Number_Gen_src_bit6
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb_gated,
              inportReset => reset_1,
              PN_Sequence => bit6_out1
              );

  u_bit7 : Random_Number_Gen_src_bit7
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb_gated,
              inportReset => reset_1,
              PN_Sequence => bit7_out1
              );

  enable_out2 <= enable;

  enb_gated <= enable_out2 AND enb;

  concat_out1 <= unsigned'(bit0_out1 & bit1_out1 & bit2_out1 & bit3_out1 & bit4_out1 & bit5_out1 & bit6_out1 & bit7_out1);

  data_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      concat_out1_last_value <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        concat_out1_last_value <= concat_out1_bypass;
      END IF;
    END IF;
  END PROCESS data_bypass_process;


  
  concat_out1_bypass <= concat_out1_last_value WHEN enable_out2 = '0' ELSE
      concat_out1;

  data <= std_logic_vector(concat_out1_bypass);

END rtl;

