-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\book_example_v2\Random_Number_Gen_src_Random_Number_Generator.vhd
-- Created: 2023-01-13 11:55:50
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1.25e-08
-- Target subsystem base rate: 1.25e-08
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1.25e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- m00_axis_tvalid               ce_out        1.25e-08
-- m00_axis_tdata                ce_out        1.25e-08
-- m01_axis_tvalid               ce_out        1.25e-08
-- m01_axis_tdata                ce_out        1.25e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Random_Number_Gen_src_Random_Number_Generator
-- Source Path: book_example_v2/Random Number Generator
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Random_Number_Gen_src_Random_Number_Generator IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        aximm_enable                      :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        aximm_bits                        :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        aximm_reset                       :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        m00_axis_tready                   :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        m00_axis_tvalid                   :   OUT   std_logic;
        m00_axis_tdata                    :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        m01_axis_tvalid                   :   OUT   std_logic;
        m01_axis_tdata                    :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
        );
END Random_Number_Gen_src_Random_Number_Generator;


ARCHITECTURE rtl OF Random_Number_Gen_src_Random_Number_Generator IS

  -- Component Declarations
  COMPONENT Random_Number_Gen_src_rising_edge
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in_rsvd                         :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          pulse                           :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Random_Number_Gen_src_tvalid_hold
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          en                              :   IN    std_logic;
          trigger                         :   IN    std_logic;
          comparator                      :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          enable                          :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Random_Number_Gen_src_Random_Number_Generator_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          reset_1                         :   IN    std_logic;
          enable                          :   IN    std_logic;
          data                            :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Random_Number_Gen_src_rising_edge
    USE ENTITY work.Random_Number_Gen_src_rising_edge(rtl);

  FOR ALL : Random_Number_Gen_src_tvalid_hold
    USE ENTITY work.Random_Number_Gen_src_tvalid_hold(rtl);

  FOR ALL : Random_Number_Gen_src_Random_Number_Generator_block
    USE ENTITY work.Random_Number_Gen_src_Random_Number_Generator_block(rtl);

  -- Signals
  SIGNAL rising_edge_out1                 : std_logic;
  SIGNAL tvalid_hold_out1                 : std_logic;
  SIGNAL AND_out1                         : std_logic;
  SIGNAL aximm_reset_unsigned             : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Cast_To_Boolean1_out1            : std_logic;
  SIGNAL Random_Number_Generator_out1     : std_logic_vector(7 DOWNTO 0);  -- ufix8

BEGIN
  u_rising_edge : Random_Number_Gen_src_rising_edge
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              in_rsvd => aximm_enable,  -- uint32
              pulse => rising_edge_out1
              );

  u_tvalid_hold : Random_Number_Gen_src_tvalid_hold
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              en => m00_axis_tready,
              trigger => rising_edge_out1,
              comparator => aximm_bits,  -- uint32
              enable => tvalid_hold_out1
              );

  u_Random_Number_Generator : Random_Number_Gen_src_Random_Number_Generator_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              reset_1 => Cast_To_Boolean1_out1,
              enable => AND_out1,
              data => Random_Number_Generator_out1  -- uint8
              );

  AND_out1 <= m00_axis_tready AND tvalid_hold_out1;

  aximm_reset_unsigned <= unsigned(aximm_reset);

  
  Cast_To_Boolean1_out1 <= '1' WHEN aximm_reset_unsigned /= to_unsigned(0, 32) ELSE
      '0';

  ce_out <= clk_enable;

  m00_axis_tvalid <= AND_out1;

  m00_axis_tdata <= Random_Number_Generator_out1;

  m01_axis_tvalid <= AND_out1;

  m01_axis_tdata <= Random_Number_Generator_out1;

END rtl;

