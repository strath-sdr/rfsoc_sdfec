-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\book_example\qam_mapping_dut.vhd
-- Created: 2023-01-16 15:11:33
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: qam_mapping_dut
-- Source Path: qam_mapping/qam_mapping_dut
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY qam_mapping_dut IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        dut_enable                        :   IN    std_logic;  -- ufix1
        s_axis_tvalid                     :   IN    std_logic;  -- ufix1
        s_axis_tdata                      :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        s_axis_tlast                      :   IN    std_logic;  -- ufix1
        aximm_valid                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        ce_out                            :   OUT   std_logic;  -- ufix1
        m_axis_tvalid                     :   OUT   std_logic;  -- ufix1
        m_axis_tdata                      :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
        s_axis_tready                     :   OUT   std_logic;  -- ufix1
        probe0                            :   OUT   std_logic;  -- ufix1
        probe1                            :   OUT   std_logic;  -- ufix1
        probe2                            :   OUT   std_logic;  -- ufix1
        probe3                            :   OUT   std_logic  -- ufix1
        );
END qam_mapping_dut;


ARCHITECTURE rtl OF qam_mapping_dut IS

  -- Component Declarations
  COMPONENT qam_mapping_src_QAM_Mapping
    PORT( clk                             :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          reset                           :   IN    std_logic;
          s_axis_tvalid                   :   IN    std_logic;  -- ufix1
          s_axis_tdata                    :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
          s_axis_tlast                    :   IN    std_logic;  -- ufix1
          aximm_valid                     :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          ce_out                          :   OUT   std_logic;  -- ufix1
          m_axis_tvalid                   :   OUT   std_logic;  -- ufix1
          m_axis_tdata                    :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
          s_axis_tready                   :   OUT   std_logic;  -- ufix1
          probe0                          :   OUT   std_logic;  -- ufix1
          probe1                          :   OUT   std_logic;  -- ufix1
          probe2                          :   OUT   std_logic;  -- ufix1
          probe3                          :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : qam_mapping_src_QAM_Mapping
    USE ENTITY work.qam_mapping_src_QAM_Mapping(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL s_axis_tvalid_sig                : std_logic;  -- ufix1
  SIGNAL s_axis_tlast_sig                 : std_logic;  -- ufix1
  SIGNAL ce_out_sig                       : std_logic;  -- ufix1
  SIGNAL m_axis_tvalid_sig                : std_logic;  -- ufix1
  SIGNAL m_axis_tdata_sig                 : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL s_axis_tready_sig                : std_logic;  -- ufix1
  SIGNAL probe0_sig                       : std_logic;  -- ufix1
  SIGNAL probe1_sig                       : std_logic;  -- ufix1
  SIGNAL probe2_sig                       : std_logic;  -- ufix1
  SIGNAL probe3_sig                       : std_logic;  -- ufix1

BEGIN
  u_qam_mapping_src_QAM_Mapping : qam_mapping_src_QAM_Mapping
    PORT MAP( clk => clk,
              clk_enable => enb,
              reset => reset,
              s_axis_tvalid => s_axis_tvalid_sig,  -- ufix1
              s_axis_tdata => s_axis_tdata,  -- ufix8
              s_axis_tlast => s_axis_tlast_sig,  -- ufix1
              aximm_valid => aximm_valid,  -- ufix32
              ce_out => ce_out_sig,  -- ufix1
              m_axis_tvalid => m_axis_tvalid_sig,  -- ufix1
              m_axis_tdata => m_axis_tdata_sig,  -- ufix8
              s_axis_tready => s_axis_tready_sig,  -- ufix1
              probe0 => probe0_sig,  -- ufix1
              probe1 => probe1_sig,  -- ufix1
              probe2 => probe2_sig,  -- ufix1
              probe3 => probe3_sig  -- ufix1
              );

  s_axis_tvalid_sig <= s_axis_tvalid;

  s_axis_tlast_sig <= s_axis_tlast;

  enb <= dut_enable;

  ce_out <= ce_out_sig;

  m_axis_tvalid <= m_axis_tvalid_sig;

  m_axis_tdata <= m_axis_tdata_sig;

  s_axis_tready <= s_axis_tready_sig;

  probe0 <= probe0_sig;

  probe1 <= probe1_sig;

  probe2 <= probe2_sig;

  probe3 <= probe3_sig;

END rtl;

