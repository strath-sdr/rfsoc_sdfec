-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\book_example\qam_mapping_src_QAM_Mapping.vhd
-- Created: 2023-01-16 15:11:30
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1.25e-08
-- Target subsystem base rate: 1.25e-08
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1.25e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- m_axis_tvalid                 ce_out        1.25e-08
-- m_axis_tdata                  ce_out        1.25e-08
-- s_axis_tready                 ce_out        1.25e-08
-- probe0                        ce_out        1.25e-08
-- probe1                        ce_out        1.25e-08
-- probe2                        ce_out        1.25e-08
-- probe3                        ce_out        1.25e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: qam_mapping_src_QAM_Mapping
-- Source Path: book_example/QAM Mapping
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY qam_mapping_src_QAM_Mapping IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        s_axis_tvalid                     :   IN    std_logic;
        s_axis_tdata                      :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        s_axis_tlast                      :   IN    std_logic;
        aximm_valid                       :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        ce_out                            :   OUT   std_logic;
        m_axis_tvalid                     :   OUT   std_logic;
        m_axis_tdata                      :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        s_axis_tready                     :   OUT   std_logic;  -- ufix1
        probe0                            :   OUT   std_logic;
        probe1                            :   OUT   std_logic;
        probe2                            :   OUT   std_logic;
        probe3                            :   OUT   std_logic
        );
END qam_mapping_src_QAM_Mapping;


ARCHITECTURE rtl OF qam_mapping_src_QAM_Mapping IS

  -- Component Declarations
  COMPONENT qam_mapping_src_QAM16_Generator
    PORT( bits                            :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          symbol                          :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : qam_mapping_src_QAM16_Generator
    USE ENTITY work.qam_mapping_src_QAM16_Generator(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL aximm_valid_unsigned             : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Bit_Slice_out1                   : std_logic;  -- ufix1
  SIGNAL Cast_To_Boolean_out1             : std_logic;
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL NOT2_out1                        : std_logic;
  SIGNAL OR1_out1                         : std_logic;
  SIGNAL Delay3_reg                       : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL AND2_out1                        : std_logic;
  SIGNAL NOT_out1                         : std_logic;
  SIGNAL HDL_Counter_out1                 : std_logic;  -- ufix1
  SIGNAL AND_out1                         : std_logic;
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL OR_out1                          : std_logic;
  SIGNAL AND1_out1                        : std_logic;
  SIGNAL s_axis_tdata_unsigned            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bit_Slice9_out1                  : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Delay_out1                       : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Slice8_out1                  : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Multiport_Switch_out1            : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL y                                : std_logic_vector(7 DOWNTO 0);  -- ufix8

BEGIN
  u_QAM16_Generator : qam_mapping_src_QAM16_Generator
    PORT MAP( bits => std_logic_vector(Multiport_Switch_out1),  -- ufix4
              symbol => y  -- uint8
              );

  aximm_valid_unsigned <= unsigned(aximm_valid);

  Bit_Slice_out1 <= aximm_valid_unsigned(0);

  
  Cast_To_Boolean_out1 <= '1' WHEN Bit_Slice_out1 /= '0' ELSE
      '0';

  enb <= clk_enable;

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_out1 <= s_axis_tlast;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  NOT2_out1 <=  NOT Delay2_out1;

  OR1_out1 <= s_axis_tlast AND NOT2_out1;

  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_reg(0) <= OR1_out1;
        Delay3_reg(1) <= Delay3_reg(0);
      END IF;
    END IF;
  END PROCESS Delay3_process;

  Delay3_out1 <= Delay3_reg(1);

  AND2_out1 <= Cast_To_Boolean_out1 AND Delay3_out1;

  NOT_out1 <=  NOT AND2_out1;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 1
  HDL_Counter_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HDL_Counter_out1 <=  NOT HDL_Counter_out1;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  AND_out1 <= s_axis_tvalid AND HDL_Counter_out1;

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_out1 <= AND_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  OR_out1 <= AND_out1 OR Delay1_out1;

  AND1_out1 <= NOT_out1 AND OR_out1;

  s_axis_tdata_unsigned <= unsigned(s_axis_tdata);

  Bit_Slice9_out1 <= s_axis_tdata_unsigned(7 DOWNTO 4);

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1 <= to_unsigned(16#0#, 4);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_out1 <= Bit_Slice9_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  Bit_Slice8_out1 <= s_axis_tdata_unsigned(3 DOWNTO 0);

  
  Multiport_Switch_out1 <= Delay_out1 WHEN AND_out1 = '0' ELSE
      Bit_Slice8_out1;

  ce_out <= clk_enable;

  m_axis_tvalid <= AND1_out1;

  m_axis_tdata <= y;

  s_axis_tready <= HDL_Counter_out1;

  probe0 <= NOT_out1;

  probe1 <= OR_out1;

  probe2 <= Delay3_out1;

  probe3 <= Cast_To_Boolean_out1;

END rtl;

