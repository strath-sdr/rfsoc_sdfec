-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\fec_ber_hw\qam_mapping_src_QAM_Mapping.vhd
-- Created: 2022-10-06 15:06:34
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 3.125e-09
-- Target subsystem base rate: 3.125e-09
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        3.125e-09
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- m_axis_tvalid                 ce_out        3.125e-09
-- m_axis_tdata                  ce_out        3.125e-09
-- s_axis_tready                 ce_out        3.125e-09
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: qam_mapping_src_QAM_Mapping
-- Source Path: fec_ber_hw/QAM Mapping
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.qam_mapping_src_QAM_Mapping_pkg.ALL;

ENTITY qam_mapping_src_QAM_Mapping IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        s_axis_tvalid                     :   IN    std_logic;
        s_axis_tdata                      :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
        m_axis_tready                     :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        m_axis_tvalid                     :   OUT   std_logic;
        m_axis_tdata                      :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        s_axis_tready                     :   OUT   std_logic
        );
END qam_mapping_src_QAM_Mapping;


ARCHITECTURE rtl OF qam_mapping_src_QAM_Mapping IS

  -- Component Declarations
  COMPONENT qam_mapping_src_QAM_Mapping_tc
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_1_1                       :   OUT   std_logic;
          enb_1_4_0                       :   OUT   std_logic;
          enb_1_4_1                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT qam_mapping_src_HDL_FIFO
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In_rsvd                         :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          Push                            :   IN    std_logic;
          Pop                             :   IN    std_logic;
          Out_rsvd                        :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          Empty                           :   OUT   std_logic;
          Full                            :   OUT   std_logic;
          Num                             :   OUT   std_logic_vector(13 DOWNTO 0)  -- ufix14
          );
  END COMPONENT;

  COMPONENT qam_mapping_src_sample_and_hold_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          valid_in                        :   IN    std_logic;
          data_in                         :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          alphavalid_out                  :   OUT   std_logic;
          alphadata_out                   :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  COMPONENT qam_mapping_src_QAM16_Generator
    PORT( symbol                          :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          Out1_re                         :   OUT   std_logic_vector(3 DOWNTO 0);  -- sfix4
          Out1_im                         :   OUT   std_logic_vector(3 DOWNTO 0)  -- sfix4
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : qam_mapping_src_QAM_Mapping_tc
    USE ENTITY work.qam_mapping_src_QAM_Mapping_tc(rtl);

  FOR ALL : qam_mapping_src_HDL_FIFO
    USE ENTITY work.qam_mapping_src_HDL_FIFO(rtl);

  FOR ALL : qam_mapping_src_sample_and_hold_block
    USE ENTITY work.qam_mapping_src_sample_and_hold_block(rtl);

  FOR ALL : qam_mapping_src_QAM16_Generator
    USE ENTITY work.qam_mapping_src_QAM16_Generator(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL enb_1_4_0                        : std_logic;
  SIGNAL enb_1_4_1                        : std_logic;
  SIGNAL enb_1_1_1                        : std_logic;
  SIGNAL HDL_Counter1_out1                : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Compare_To_Zero_out1             : std_logic;
  SIGNAL s_axis_tdata_unsigned            : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL Bit_Slice_out1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL HDL_FIFO_out3                    : std_logic;
  SIGNAL NOT1_out1                        : std_logic;
  SIGNAL AND1_out1                        : std_logic;
  SIGNAL AND_out1                         : std_logic;
  SIGNAL HDL_FIFO_out1                    : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL HDL_FIFO_out2                    : std_logic;
  SIGNAL HDL_FIFO_out4                    : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL NOT_out1                         : std_logic;
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL sample_and_hold_out1             : std_logic;
  SIGNAL sample_and_hold_out2             : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Downsample1_out1                 : std_logic;
  SIGNAL Delay_reg                        : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL Delay3_reg                       : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL Upsample1_zero                   : std_logic;
  SIGNAL Upsample1_muxout                 : std_logic;
  SIGNAL Upsample1_bypass_reg             : std_logic;  -- ufix1
  SIGNAL Upsample1_bypassout              : std_logic;
  SIGNAL HDL_Counter_out1                 : std_logic;  -- ufix1
  SIGNAL sample_and_hold_out2_unsigned    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Downsample_out1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay1_reg                       : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL Delay1_out1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bit_Slice8_out1                  : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Slice9_out1                  : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Multiport_Switch_out1            : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL QAM16_Generator_out1_re          : std_logic_vector(3 DOWNTO 0);  -- ufix4
  SIGNAL QAM16_Generator_out1_im          : std_logic_vector(3 DOWNTO 0);  -- ufix4
  SIGNAL QAM16_Generator_out1_re_signed   : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL QAM16_Generator_out1_im_signed   : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL Bit_Concat_out1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay2_reg                       : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL Delay2_out1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Upsample_zero                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Upsample_muxout                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Upsample_bypass_reg              : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Upsample_bypassout               : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL HDL_FIFO_out4_unsigned           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL Constant_out1                    : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL GreaterThan_relop1               : std_logic;

BEGIN
  u_QAM_Mapping_tc : qam_mapping_src_QAM_Mapping_tc
    PORT MAP( clk => clk,
              reset => reset,
              clk_enable => clk_enable,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              enb_1_4_0 => enb_1_4_0,
              enb_1_4_1 => enb_1_4_1
              );

  u_HDL_FIFO : qam_mapping_src_HDL_FIFO
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              In_rsvd => std_logic_vector(Bit_Slice_out1),  -- uint8
              Push => AND1_out1,
              Pop => AND_out1,
              Out_rsvd => HDL_FIFO_out1,  -- uint8
              Empty => HDL_FIFO_out2,
              Full => HDL_FIFO_out3,
              Num => HDL_FIFO_out4  -- ufix14
              );

  u_sample_and_hold : qam_mapping_src_sample_and_hold_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              valid_in => Delay4_out1,
              data_in => HDL_FIFO_out1,  -- uint8
              alphavalid_out => sample_and_hold_out1,
              alphadata_out => sample_and_hold_out2  -- uint8
              );

  u_QAM16_Generator : qam_mapping_src_QAM16_Generator
    PORT MAP( symbol => std_logic_vector(Multiport_Switch_out1),  -- ufix4
              Out1_re => QAM16_Generator_out1_re,  -- sfix4
              Out1_im => QAM16_Generator_out1_im  -- sfix4
              );

  -- Free running, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  HDL_Counter1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter1_out1 <= to_unsigned(16#0#, 3);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HDL_Counter1_out1 <= HDL_Counter1_out1 + to_unsigned(16#1#, 3);
      END IF;
    END IF;
  END PROCESS HDL_Counter1_process;


  
  Compare_To_Zero_out1 <= '1' WHEN HDL_Counter1_out1 = to_unsigned(16#0#, 3) ELSE
      '0';

  s_axis_tdata_unsigned <= unsigned(s_axis_tdata);

  Bit_Slice_out1 <= s_axis_tdata_unsigned(7 DOWNTO 0);

  NOT1_out1 <=  NOT HDL_FIFO_out3;

  AND1_out1 <= s_axis_tvalid AND NOT1_out1;

  NOT_out1 <=  NOT HDL_FIFO_out2;

  AND_out1 <= Compare_To_Zero_out1 AND NOT_out1;

  Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_out1 <= AND_out1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  -- Downsample by 4 register (Sample offset 0)
  Downsample1_output_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Downsample1_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_1 = '1' THEN
        Downsample1_out1 <= sample_and_hold_out1;
      END IF;
    END IF;
  END PROCESS Downsample1_output_process;


  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        Delay_reg(0) <= Downsample1_out1;
        Delay_reg(1) <= Delay_reg(0);
      END IF;
    END IF;
  END PROCESS Delay_process;

  Delay_out1 <= Delay_reg(1);

  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        Delay3_reg(0) <= Delay_out1;
        Delay3_reg(1) <= Delay3_reg(0);
      END IF;
    END IF;
  END PROCESS Delay3_process;

  Delay3_out1 <= Delay3_reg(1);

  -- Upsample1: Upsample by 4, Sample offset 0 
  Upsample1_zero <= '0';

  
  Upsample1_muxout <= Delay3_out1 WHEN enb_1_4_1 = '1' ELSE
      Upsample1_zero;

  -- Upsample bypass register
  Upsample1_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Upsample1_bypass_reg <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_1_1 = '1' THEN
        Upsample1_bypass_reg <= Upsample1_muxout;
      END IF;
    END IF;
  END PROCESS Upsample1_bypass_process;

  
  Upsample1_bypassout <= Upsample1_muxout WHEN enb_1_1_1 = '1' ELSE
      Upsample1_bypass_reg;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 1
  HDL_Counter_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' AND Delay_out1 = '1' THEN
        HDL_Counter_out1 <=  NOT HDL_Counter_out1;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  sample_and_hold_out2_unsigned <= unsigned(sample_and_hold_out2);

  -- Downsample by 4 register (Sample offset 0)
  Downsample_output_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Downsample_out1 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_1 = '1' THEN
        Downsample_out1 <= sample_and_hold_out2_unsigned;
      END IF;
    END IF;
  END PROCESS Downsample_output_process;


  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        Delay1_reg(0) <= Downsample_out1;
        Delay1_reg(1) <= Delay1_reg(0);
      END IF;
    END IF;
  END PROCESS Delay1_process;

  Delay1_out1 <= Delay1_reg(1);

  Bit_Slice8_out1 <= Delay1_out1(3 DOWNTO 0);

  Bit_Slice9_out1 <= Delay1_out1(7 DOWNTO 4);

  
  Multiport_Switch_out1 <= Bit_Slice8_out1 WHEN HDL_Counter_out1 = '0' ELSE
      Bit_Slice9_out1;

  QAM16_Generator_out1_re_signed <= signed(QAM16_Generator_out1_re);

  QAM16_Generator_out1_im_signed <= signed(QAM16_Generator_out1_im);

  Bit_Concat_out1 <= unsigned(QAM16_Generator_out1_re_signed) & unsigned(QAM16_Generator_out1_im_signed);

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        Delay2_reg(0) <= Bit_Concat_out1;
        Delay2_reg(1) <= Delay2_reg(0);
      END IF;
    END IF;
  END PROCESS Delay2_process;

  Delay2_out1 <= Delay2_reg(1);

  -- Upsample: Upsample by 4, Sample offset 0 
  Upsample_zero <= to_unsigned(16#00#, 8);

  
  Upsample_muxout <= Delay2_out1 WHEN enb_1_4_1 = '1' ELSE
      Upsample_zero;

  -- Upsample bypass register
  Upsample_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Upsample_bypass_reg <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_1_1 = '1' THEN
        Upsample_bypass_reg <= Upsample_muxout;
      END IF;
    END IF;
  END PROCESS Upsample_bypass_process;

  
  Upsample_bypassout <= Upsample_muxout WHEN enb_1_1_1 = '1' ELSE
      Upsample_bypass_reg;

  m_axis_tdata <= std_logic_vector(Upsample_bypassout);

  HDL_FIFO_out4_unsigned <= unsigned(HDL_FIFO_out4);

  Constant_out1 <= to_unsigned(16#1FFE#, 13);

  
  GreaterThan_relop1 <= '1' WHEN HDL_FIFO_out4_unsigned < resize(Constant_out1, 14) ELSE
      '0';

  ce_out <= enb_1_1_1;

  m_axis_tvalid <= Upsample1_bypassout;

  s_axis_tready <= GreaterThan_relop1;

END rtl;

