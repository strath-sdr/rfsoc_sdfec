-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\book_example\soft_demodulation_src_imag.vhd
-- Created: 2022-11-22 20:57:46
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: soft_demodulation_src_imag
-- Source Path: book_example/Soft Demodulation/imag
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY soft_demodulation_src_imag IS
  PORT( u                                 :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En11
        b1                                :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En11
        b0                                :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En11
        );
END soft_demodulation_src_imag;


ARCHITECTURE rtl OF soft_demodulation_src_imag IS

  -- Signals
  SIGNAL u_signed                         : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL b1_tmp                           : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL b0_tmp                           : signed(15 DOWNTO 0);  -- sfix16_En11

BEGIN
  u_signed <= signed(u);

  imag_output : PROCESS (u_signed)
    VARIABLE y : signed(15 DOWNTO 0);
    VARIABLE yfi : signed(15 DOWNTO 0);
    VARIABLE add_cast : signed(16 DOWNTO 0);
    VARIABLE add_temp : signed(16 DOWNTO 0);
    VARIABLE mul_temp : signed(33 DOWNTO 0);
    VARIABLE sub_cast : signed(16 DOWNTO 0);
    VARIABLE sub_temp : signed(16 DOWNTO 0);
    VARIABLE mul_temp_0 : signed(33 DOWNTO 0);
    VARIABLE cast : signed(16 DOWNTO 0);
    VARIABLE cast_0 : signed(16 DOWNTO 0);
    VARIABLE cast_1 : signed(16 DOWNTO 0);
    VARIABLE cast_2 : signed(16 DOWNTO 0);
    VARIABLE cast_3 : signed(16 DOWNTO 0);
    VARIABLE cast_4 : signed(16 DOWNTO 0);
    VARIABLE add_cast_0 : signed(16 DOWNTO 0);
    VARIABLE add_temp_0 : signed(16 DOWNTO 0);
  BEGIN
    add_temp := to_signed(16#00000#, 17);
    mul_temp := to_signed(0, 34);
    sub_temp := to_signed(16#00000#, 17);
    mul_temp_0 := to_signed(0, 34);
    cast_0 := to_signed(16#00000#, 17);
    cast_2 := to_signed(16#00000#, 17);
    add_cast := to_signed(16#00000#, 17);
    sub_cast := to_signed(16#00000#, 17);
    cast := to_signed(16#00000#, 17);
    cast_1 := to_signed(16#00000#, 17);
    IF u_signed < to_signed(-16#1000#, 16) THEN 
      add_cast := resize(u_signed, 17);
      add_temp := add_cast + to_signed(16#00800#, 17);
      -- CSD Encoding (65536) : 10000000000000000; Cost (Adders) = 0
      mul_temp :=  - (resize(add_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 34));
      IF ((mul_temp(33) = '0') AND (mul_temp(32 DOWNTO 30) /= "000")) OR ((mul_temp(33) = '0') AND (mul_temp(30 DOWNTO 15) = X"7FFF")) THEN 
        b1_tmp <= X"7FFF";
      ELSIF (mul_temp(33) = '1') AND (mul_temp(32 DOWNTO 30) /= "111") THEN 
        b1_tmp <= X"8000";
      ELSE 
        b1_tmp <= mul_temp(30 DOWNTO 15) + ('0' & mul_temp(14));
      END IF;
    ELSIF (u_signed > to_signed(-16#1000#, 16)) AND (u_signed < to_signed(16#1000#, 16)) THEN 
      cast := resize(u_signed, 17);
      cast_0 :=  - (cast);
      IF (cast_0(16) = '0') AND (cast_0(15) /= '0') THEN 
        b1_tmp <= X"7FFF";
      ELSIF (cast_0(16) = '1') AND (cast_0(15) /= '1') THEN 
        b1_tmp <= X"8000";
      ELSE 
        b1_tmp <= cast_0(15 DOWNTO 0);
      END IF;
    ELSE 
      sub_cast := resize(u_signed, 17);
      sub_temp := sub_cast - to_signed(16#00800#, 17);
      -- CSD Encoding (65536) : 10000000000000000; Cost (Adders) = 0
      mul_temp_0 :=  - (resize(sub_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 34));
      IF ((mul_temp_0(33) = '0') AND (mul_temp_0(32 DOWNTO 30) /= "000")) OR ((mul_temp_0(33) = '0') AND (mul_temp_0(30 DOWNTO 15) = X"7FFF")) THEN 
        b1_tmp <= X"7FFF";
      ELSIF (mul_temp_0(33) = '1') AND (mul_temp_0(32 DOWNTO 30) /= "111") THEN 
        b1_tmp <= X"8000";
      ELSE 
        b1_tmp <= mul_temp_0(30 DOWNTO 15) + ('0' & mul_temp_0(14));
      END IF;
    END IF;
    -- if u <= 0
    --     b0 = fi(u+2,1,16,11);
    -- else
    --     b0 = fi(-u+2,1,16,11);
    -- end
    IF u_signed < to_signed(16#0000#, 16) THEN 
      cast_1 := resize(u_signed, 17);
      cast_2 :=  - (cast_1);
      IF (cast_2(16) = '0') AND (cast_2(15) /= '0') THEN 
        y := X"7FFF";
      ELSIF (cast_2(16) = '1') AND (cast_2(15) /= '1') THEN 
        y := X"8000";
      ELSE 
        y := cast_2(15 DOWNTO 0);
      END IF;
    ELSE 
      y := u_signed;
    END IF;
    cast_3 := resize(y, 17);
    cast_4 :=  - (cast_3);
    IF (cast_4(16) = '0') AND (cast_4(15) /= '0') THEN 
      yfi := X"7FFF";
    ELSIF (cast_4(16) = '1') AND (cast_4(15) /= '1') THEN 
      yfi := X"8000";
    ELSE 
      yfi := cast_4(15 DOWNTO 0);
    END IF;
    add_cast_0 := resize(yfi, 17);
    add_temp_0 := add_cast_0 + to_signed(16#01000#, 17);
    IF (add_temp_0(16) = '0') AND (add_temp_0(15) /= '0') THEN 
      b0_tmp <= X"7FFF";
    ELSIF (add_temp_0(16) = '1') AND (add_temp_0(15) /= '1') THEN 
      b0_tmp <= X"8000";
    ELSE 
      b0_tmp <= add_temp_0(15 DOWNTO 0);
    END IF;
  END PROCESS imag_output;


  b1 <= std_logic_vector(b1_tmp);

  b0 <= std_logic_vector(b0_tmp);

END rtl;

